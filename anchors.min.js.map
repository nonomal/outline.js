{"version":3,"file":"anchors.min.js","sources":["src/utils/types/isString.js","src/utils/lang/hasOwn.js","src/utils/lang/toString.js","src/utils/types/isFunction.js","src/utils/types/isObject.js","src/base.js","src/utils/lang/extend.js","src/utils/types/isElement.js","src/utils/lang/easeInQuad.js","src/utils/dom/_getScrollElement.js","src/utils/dom/offsetTop.js","src/utils/dom/matches.js","src/utils/dom/getParentOrHost.js","src/utils/event/enum.js","src/utils/event/_off.js","src/utils/event/_delete.js","src/utils/event/purgeElement.js","src/utils/event/getListeners.js","src/utils/event/off.js","src/utils/event/on.js","src/utils/event/getTarget.js","src/utils/dom/resolveTextNode.js","src/utils/dom/closest.js","src/utils/observer/_subscribers.js","src/utils/observer/_hasDirectSubscribersFor.js","src/utils/observer/has.js","src/utils/observer/_hasSubscribers.js","src/utils/observer/emit.js","src/utils/types/isTypedArray.js","src/utils/types/isArray.js","src/utils/lang/trim.js","src/utils/types/isDOM.js","src/utils/types/isHTMLCollection.js","src/utils/types/isFragment.js","src/utils/types/isTextNode.js","src/utils/dom/setAttribute.js","src/_updateHeading.js","src/utils/icons.js","src/utils/dom/createElement.js","src/utils/dom/removeClass.js","src/utils/dom/hasClass.js","src/_resetHeading.js","src/utils/types/isEmpty.js","src/getChapters.js","src/utils/lang/stripTags.js","src/_getChapterParentIdByDiffer.js","src/_getChaptersWithCode.js","src/anchors.js","src/utils/lang/toTree.js","src/utils/dom/scrollTo.js","src/utils/lang/later.js","src/utils/event/stop.js"],"sourcesContent":["/**\r\n * 检测数据是否为 String 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} str\r\n * @returns {boolean}\r\n */\r\nconst isString = (str) => {\r\n  return typeof str === 'string'\r\n}\r\n\r\nexport default isString\r\n","/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n  return obj && hasOwnProperty.call(obj, prop)\r\n}\r\n\r\nexport default hasOwn\r\n","/**\r\n * Object 对象原型上的 toString 方法\r\n * ========================================================================\r\n * @method toString\r\n * @param {*} val\r\n * @returns {string}\r\n */\r\nconst toString = (val) => {\r\n  return Object.prototype.toString.apply(val)\r\n}\r\n\r\nexport default toString\r\n","import toString from '../lang/toString'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  return typeof val === 'function' || toString(val) === '[object Function]'\r\n}\r\n\r\nexport default isFunction\r\n","import toString from '../lang/toString'\r\nimport isFunction from '../types/isFunction'\r\n\r\n/**\r\n * 检测数据是否为 Object 类型\r\n * ========================================================================\r\n * @method isObject\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isObject = (o) => {\r\n  return (\r\n    (toString(o) === '[object Object]' ||\r\n      typeof o === 'object' ||\r\n      isFunction(o)) &&\r\n    o !== null\r\n  )\r\n}\r\n\r\nexport default isObject\r\n","import isString from './utils/types/isString'\r\nimport hasOwn from './utils/lang/hasOwn'\r\nimport isObject from './utils/types/isObject'\r\nimport extend from './utils/lang/extend'\r\n\r\nclass Base {\r\n  constructor(options) {\r\n    this.attrs = {}\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n  }\r\n\r\n  initialize(options) {\r\n    this.attr(options).render().addListeners()\r\n    return this\r\n  }\r\n\r\n  attr(prop, value) {\r\n    const attrs = this.attrs\r\n\r\n    if (isString(prop)) {\r\n      // 只能扩展 attrs 中已有的属性\r\n      if (value && hasOwn(attrs, prop)) {\r\n        // 更新单个配置信息\r\n        attrs[prop] = value\r\n        return this\r\n      }\r\n\r\n      // 只传递 prop 参数，则返回对应的属性值\r\n      return attrs[prop]\r\n    } else if (isObject(prop)) {\r\n      // 批量更新配置信息\r\n      extend(attrs, prop)\r\n\r\n      return this\r\n    } else if (arguments.length === 0) {\r\n      // 不传递参数，直接返回整个\r\n      return attrs\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  render() {\r\n    return this\r\n  }\r\n\r\n  destroy() {\r\n    this.removeListeners()\r\n    return this\r\n  }\r\n\r\n  reload(options) {\r\n    this.destroy().initialize(this.attr(options))\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    return this\r\n  }\r\n}\r\n\r\nexport default Base\r\n","import hasOwn from './hasOwn'\r\n\r\n/**\r\n * 扩展对象\r\n * ========================================================================\r\n * @method extend\r\n * @param {Object} origin\r\n * @param {Object} source\r\n */\r\nconst extend = (origin, source) => {\r\n  const keys = Object.keys(source)\r\n\r\n  keys.forEach((prop) => {\r\n    if (hasOwn(source, prop)) {\r\n      origin[prop] = source[prop]\r\n    }\r\n  })\r\n}\r\n\r\nexport default extend\r\n","import isObject from './isObject'\r\n\r\n/**\r\n * 检测数据是否为 HTMLElement DOM 节点\r\n * ========================================================================\r\n * @method isElement\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isElement = (o) => {\r\n  return !!(isObject(o) && o.nodeName && o.tagName && o.nodeType === 1)\r\n}\r\n\r\nexport default isElement\r\n","/**\r\n * 返回给定值的平方值\r\n * ========================================================================\r\n * @method easeInQuad\r\n * @param {Number} x\r\n * @returns {number}\r\n */\r\nconst easeInQuad = (x) => {\r\n  return x * x\r\n}\r\n\r\nexport default easeInQuad\r\n","import isString from '../types/isString'\r\nimport isElement from '../types/isElement'\r\n\r\n/**\r\n * 通过给的 scrollElement 参数，获取滚动 DOM 元素\r\n * ========================================================================\r\n * @method _getScrollElement\r\n * @param {String|HTMLElement} scrollElement\r\n * @returns {Element}\r\n * @private\r\n */\r\nconst _getScrollElement = (scrollElement = null) => {\r\n  let $rootElements\r\n  let $scrollElement\r\n\r\n  if (!scrollElement) {\r\n    $rootElements = document.querySelectorAll('html,body')\r\n    $scrollElement =\r\n      $rootElements[0].scrollTop - $rootElements[1].scrollTop >= 0\r\n        ? $rootElements[0]\r\n        : $rootElements[1]\r\n  } else {\r\n    if (isString(scrollElement)) {\r\n      $scrollElement = document.querySelector(scrollElement)\r\n    } else if (isElement(scrollElement)) {\r\n      $scrollElement = scrollElement\r\n    }\r\n  }\r\n\r\n  return $scrollElement\r\n}\r\n\r\nexport default _getScrollElement\r\n","/**\r\n * 获取 DOM 节点相对于窗口的 left （纵坐标）值\r\n * ========================================================================\r\n * @method offsetTop\r\n * @param {HTMLElement} el - DOM 节点\r\n * @returns {Number}\r\n */\r\nconst offsetTop = (el) => {\r\n  let top = el.offsetTop\r\n\r\n  if (el.offsetParent !== null) {\r\n    top += offsetTop(el.offsetParent)\r\n  }\r\n\r\n  return top\r\n}\r\n\r\nexport default offsetTop\r\n","/**\r\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\r\n * ========================================================================\r\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\r\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\r\n * 标 DOM 元素是否为事件代理所期望触发的目标。\r\n * ========================================================================\r\n * @method matches\r\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\r\n * @returns {Boolean}\r\n */\r\nconst matches = (el, selector = '') => {\r\n  const sel = selector.replace(/^>/i, '')\r\n\r\n  if (!selector || !sel || !el) {\r\n    return false\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.matches) {\r\n    return el.matches(sel)\r\n  } else if (el.msMatchesSelector) {\r\n    return el.msMatchesSelector(sel)\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default matches\r\n","/**\r\n * 获取 DOM 元素的父节点\r\n * ========================================================================\r\n * @method getParentOrHost\r\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\r\n * @returns {*|HTMLElement}\r\n */\r\nconst getParentOrHost = (el) => {\r\n  return el.host && el !== document && el.host.nodeType\r\n    ? el.host\r\n    : el.parentNode\r\n}\r\n\r\nexport default getParentOrHost\r\n","export const CAPTURE_EVENTS = [\r\n  'focusout',\r\n  'blur',\r\n  'focusin',\r\n  'focus',\r\n  'load',\r\n  'unload',\r\n  'mouseenter',\r\n  'mouseleave'\r\n]\r\n","import { CAPTURE_EVENTS } from './enum'\r\nimport _delete from './_delete'\r\n\r\n/**\r\n * （私有方法）取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method _off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须）事件处理器回调函数\r\n * @private\r\n */\r\nconst _off = (el, type, fn) => {\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  /* istanbul ignore else */\r\n  if (fn._delegateListener) {\r\n    fn = fn._delegateListener\r\n    delete fn._delegateListener\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  _delete(el, type, fn)\r\n\r\n  el.removeEventListener(type, fn, capture)\r\n}\r\n\r\nexport default _off\r\n","/**\r\n * 删除 DOM 元素缓存的 _listeners 数据\r\n * ========================================================================\r\n * @method _delete\r\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\r\n * @param {String} type - 事件类型（名称）\r\n * @param {Function} [fn] - 事件处理器回调函数\r\n */\r\nconst _delete = function (el, type, fn) {\r\n  const listeners = el._listeners\r\n  let index = -1\r\n\r\n  if (listeners.length < 1) {\r\n    return false\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  listeners.forEach((listener, i) => {\r\n    const handler = listener.fn\r\n\r\n    if (type === listener.type) {\r\n      index = i\r\n\r\n      if (handler === fn) {\r\n        index = i\r\n      }\r\n    }\r\n  })\r\n\r\n  /* istanbul ignore else */\r\n  if (index > -1) {\r\n    listeners.splice(index, 1)\r\n  }\r\n}\r\n\r\nexport default _delete\r\n","import isString from '../types/isString'\r\nimport isElement from '../types/isElement'\r\nimport getListeners from './getListeners'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 销毁（type 类型的）代理事件绑定\r\n * ========================================================================\r\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\r\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\r\n * ========================================================================\r\n * @method purgeElement\r\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\r\n * @param {String|Boolean} type - （必须）事件类型\r\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\r\n */\r\nconst purgeElement = function (el, type, recurse = false) {\r\n  const $element = isString(el) ? document.querySelector(el) : el\r\n  const $children = $element.childNodes\r\n  const listeners = getListeners($element, type)\r\n\r\n  listeners.forEach((listener) => {\r\n    _off($element, listener.type, listener.fn)\r\n  })\r\n\r\n  if (\r\n    (recurse || type === true || arguments.length === 1) &&\r\n    $element &&\r\n    $children\r\n  ) {\r\n    $children.forEach(($child) => {\r\n      if (isElement($child)) {\r\n        purgeElement($child, type, recurse)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default purgeElement\r\n","import isString from '../types/isString'\r\n\r\n/**\r\n * 获取 DOM 元素（type 事件类型）事件绑定信息\r\n * ========================================================================\r\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\r\n * ========================================================================\r\n * @methods getListeners\r\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\r\n * @param {String} [type] - （可选）事件类型\r\n * @returns {Array} - 已绑定的事件信息\r\n */\r\nconst getListeners = (el, type) => {\r\n  let listeners = el._listeners || []\r\n\r\n  if (isString(type) && type) {\r\n    listeners = listeners.filter((listener) => {\r\n      return listener.type === type\r\n    })\r\n  }\r\n\r\n  return listeners\r\n}\r\n\r\nexport default getListeners\r\n","import purgeElement from './purgeElement'\r\nimport isFunction from '../types/isFunction'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} [fn] - （可选）事件处理器回调函数\r\n */\r\nconst off = (el, type, fn) => {\r\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\r\n  if (!isFunction(fn)) {\r\n    return purgeElement(el, type)\r\n  }\r\n\r\n  _off(el, type, fn)\r\n}\r\n\r\nexport default off\r\n","import closest from '../dom/closest'\r\nimport off from './off'\r\nimport getTarget from './getTarget'\r\n\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定代理事件\r\n * ========================================================================\r\n * @method on\r\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n * @param {Function|Object} fn - （可选） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst on = (el, selector, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  const listener = function (evt) {\r\n    const target = getTarget(evt)\r\n    // 通过 Element.matches 方法获得点击的目标元素\r\n    const delegateTarget = closest(target, selector, el)\r\n    let overrideContext = context || el\r\n\r\n    evt.delegateTarget = delegateTarget\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (delegateTarget) {\r\n      // 仅触发一次\r\n      /* istanbul ignore else */\r\n      if (once === true) {\r\n        off(el, type, listener)\r\n      }\r\n\r\n      fn.call(overrideContext, evt, data)\r\n    }\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    selector,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default on\r\n","import resolveTextNode from '../dom/resolveTextNode'\r\n\r\n/**\r\n * 返回触发事件的 target DOM 元素\r\n * ========================================================================\r\n * @method getTarget\r\n * @param {Event} evt - Event 对象\r\n * @return {HTMLElement} - Event 对象的 target DOM 元素\r\n */\r\nconst getTarget = function (evt) {\r\n  const target = evt.target\r\n\r\n  return resolveTextNode(target)\r\n}\r\n\r\nexport default getTarget\r\n","/**\r\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\r\n * resolveTextNode() 方法则会返回实际的目标节点。\r\n * ========================================================================\r\n * @method resolveTextNode\r\n * @param {HTMLElement|Text} el - 要解析的节点\r\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\r\n */\r\nconst resolveTextNode = function (el) {\r\n  if (el && el.nodeType === 3) {\r\n    return el.parentNode\r\n  }\r\n\r\n  return el\r\n}\r\n\r\nexport default resolveTextNode\r\n","import matches from './matches'\r\nimport getParentOrHost from './getParentOrHost'\r\n\r\n/**\r\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\r\n * ========================================================================\r\n * @method closest\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）DOM 元素的选择其\r\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\r\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\r\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\r\n */\r\nconst closest = (el, selector, ctx, includeCTX) => {\r\n  const context = ctx || document\r\n\r\n  if (!el) {\r\n    return null\r\n  }\r\n\r\n  do {\r\n    /* istanbul ignore else */\r\n    if (\r\n      (selector != null &&\r\n        (selector.startsWith('>')\r\n          ? el.parentNode === context && matches(el, selector)\r\n          : matches(el, selector))) ||\r\n      (includeCTX && el === context)\r\n    ) {\r\n      return el\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (el === context) {\r\n      break\r\n    }\r\n\r\n    /* jshint boss:true */\r\n  } while ((el = getParentOrHost(el)))\r\n}\r\n\r\nexport default closest\r\n","/**\r\n * 存储订阅者（主题和处理器的）私有对象\r\n * ========================================================================\r\n * @type {{}}\r\n * @private\r\n */\r\nconst _subscribers = {}\r\n\r\nexport default _subscribers\r\n","import _subscribers from './_subscribers'\r\nimport hasOwn from '../lang/hasOwn'\r\n\r\n/**\r\n * 判断是否存在与给定 topic 完全匹配的订阅者信息\r\n * ========================================================================\r\n * @method _hasDirectSubscribersFor\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasDirectSubscribersFor = (topic) => {\r\n  return hasOwn(_subscribers, topic) && _subscribers[topic].length > 0\r\n}\r\n\r\nexport default _hasDirectSubscribersFor\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\nimport _hasSubscribers from './_hasSubscribers'\r\n\r\n/**\r\n * 判断是否存在包含 topic 指定的订阅者信息\r\n * ========================================================================\r\n * @method has\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Boolean} [isDirect] - （可选）是否为直接的主题，默认值：true\r\n * @returns {Boolean}\r\n */\r\nconst has = (topic, isDirect = true) => {\r\n  return isDirect ? _hasDirectSubscribersFor(topic) : _hasSubscribers(topic)\r\n}\r\n\r\nexport default has\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\n\r\n/**\r\n * 判断是否存在包含给定 topic 相关的订阅者信息\r\n * ========================================================================\r\n * @method _hasSubscribers\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasSubscribers = (topic) => {\r\n  let found = _hasDirectSubscribersFor(topic)\r\n  let position = topic.lastIndexOf('.')\r\n\r\n  while (!found && position !== -1) {\r\n    topic = topic.substring(0, position)\r\n    position = topic.lastIndexOf('.')\r\n    found = _hasDirectSubscribersFor(topic)\r\n  }\r\n\r\n  return found\r\n}\r\n\r\nexport default _hasSubscribers\r\n","import isTypedArray from '../types/isTypedArray'\r\nimport _subscribers from './_subscribers'\r\nimport has from './has'\r\nimport _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\n\r\n/**\r\n * （异步）发布订阅主题信息\r\n * ========================================================================\r\n * 主题默认是异步发布的。确保在消费者处理主题时，主题的发起者不会被阻止。\r\n * ========================================================================\r\n * @method emit\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Object} data - （必须）数据对象\r\n * @param {Boolean} async - (可选) 是否异步发布\r\n */\r\nconst emit = (topic, data, async = true) => {\r\n  const execute = (topic) => {\r\n    if (!_hasDirectSubscribersFor(topic)) {\r\n      return false\r\n    }\r\n\r\n    _subscribers[topic].forEach((subscriber) => {\r\n      // 针对 mqtt 消息服务返回的 Uint8Array 类似的 typed arrays 格式的数据\r\n      // 采用 toString() 方法转化为普通（JSON）字符串\r\n      const message = isTypedArray(data) ? data.toString() : data\r\n\r\n      subscriber.callback.call(subscriber.context || subscriber, message)\r\n    })\r\n  }\r\n  const deliver = () => {\r\n    let subscriber = topic\r\n    let position = topic.lastIndexOf('.')\r\n\r\n    while (position !== -1) {\r\n      subscriber = subscriber.substring(0, position)\r\n      position = subscriber.lastIndexOf('.')\r\n\r\n      execute(subscriber)\r\n    }\r\n\r\n    // 执行 topic 对应的处理器\r\n    execute(topic)\r\n    // 执行特殊 topic：'*'（监听全部消息的发布）\r\n    execute('*')\r\n  }\r\n\r\n  if (!has(topic)) {\r\n    return false\r\n  }\r\n\r\n  if (async) {\r\n    setTimeout(deliver, 10)\r\n  } else {\r\n    deliver()\r\n  }\r\n}\r\n\r\nexport default emit\r\n","import toString from '../lang/toString'\r\n/**\r\n * 判断检测数据是否为 Typed Arrays 类型的数据\r\n * ========================================================================\r\n * @param {*} val\r\n * @returns {boolean}\r\n */\r\nconst isTypedArray = (val) => {\r\n  const TYPES = [\r\n    '[object Int8Array]',\r\n    '[object Uint8Array]',\r\n    '[object Uint8ClampedArray]',\r\n    '[object Int16Array]',\r\n    '[object Uint16Array]',\r\n    '[object Int32Array]',\r\n    '[object Uint32Array]',\r\n    '[object Float32Array]',\r\n    '[object Float64Array]',\r\n    '[object BigInt64Array]',\r\n    '[object BigUint64Array]'\r\n  ]\r\n\r\n  return TYPES.indexOf(toString(val)) > -1\r\n}\r\n\r\nexport default isTypedArray\r\n","import toString from '../lang/toString'\r\n\r\n/**\r\n * 检测数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isArray = (o) => {\r\n  if (Array.isArray) {\r\n    return Array.isArray(o)\r\n  } else {\r\n    return toString(o) === '[object Array]'\r\n  }\r\n}\r\n\r\nexport default isArray\r\n","import isString from '../types/isString'\r\n\r\n/**\r\n * 清楚字符串起始位置所有的空格\r\n * ========================================================================\r\n * @method trim\r\n * @param {string} str\r\n * @returns {string|Boolean}\r\n */\r\nconst trim = (str) => {\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n  return str.replace(/(^\\s+)|(\\s+$)/g, '')\r\n}\r\n\r\nexport default trim\r\n","import isObject from './isObject'\r\nimport isElement from './isElement'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isFragment from './isFragment'\r\nimport isTextNode from './isTextNode'\r\n\r\nconst isDOM = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (isElement(el) || isHTMLCollection(el) || isFragment(el) || isTextNode(el))\r\n  )\r\n}\r\n\r\nexport default isDOM\r\n","import toString from '../lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isHTMLCollection = (el) => {\r\n  return !!(isObject(el) && toString(el) === '[object NodeList]')\r\n}\r\n\r\nexport default isHTMLCollection\r\n","import toString from '../lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isFragment = (fragment) => {\r\n  return !!(\r\n    isObject(fragment) && toString(fragment) === '[object DocumentFragment]'\r\n  )\r\n}\r\n\r\nexport default isFragment\r\n","import toString from '../lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isTextNode = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (toString(el) === '[object Text]' || (el.tagName && el.nodeType === 3))\r\n  )\r\n}\r\n\r\nexport default isTextNode\r\n","/**\r\n * 给 DOM 节点设置属性/值\r\n * ========================================================================\r\n * @method setAttribute\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} attr - 属性名称\r\n * @param {String|Number|Boolean} value - 属性值\r\n */\r\nconst setAttribute = (el, attr, value) => {\r\n  let tagName = el.tagName.toLowerCase()\r\n\r\n  switch (attr) {\r\n    case 'style':\r\n      el.style.cssText = value\r\n      break\r\n    case 'value':\r\n      if (tagName === 'input' || tagName === 'textarea') {\r\n        el.value = value\r\n      } else {\r\n        el.setAttribute(attr, value)\r\n      }\r\n      break\r\n    case 'className':\r\n      el.className = value\r\n      break\r\n    default:\r\n      el.setAttribute(attr, value)\r\n      break\r\n  }\r\n}\r\n\r\nexport default setAttribute\r\n","import trim from './utils/lang/trim'\r\nimport createElement from './utils/dom/createElement'\r\nimport setAttribute from './utils/dom/setAttribute'\r\n\r\nimport { createSvgIcon } from './utils/icons'\r\n\r\nconst _updateHeading = ($heading, i, options) => {\r\n  const CLS_HEADING = 'outline-heading'\r\n  const hasAnchor = options.hasAnchor || true\r\n  const isAtStart = options.isAtStart || true\r\n  const showCode = options.showCode || false\r\n  const chapterCode = options.chapterCode || ''\r\n  const anchorURL = options.anchorURL || ''\r\n  const headingId = `heading-${i}`\r\n  const attrs = {\r\n    id: headingId,\r\n    className: isAtStart ? `${CLS_HEADING} ${CLS_HEADING}_start` : CLS_HEADING,\r\n    'data-id': i\r\n  }\r\n  const keys = Object.keys(attrs)\r\n  const text = trim($heading.innerHTML)\r\n  let $anchor\r\n  let $icon\r\n\r\n  keys.forEach((prop) => {\r\n    setAttribute($heading, prop, attrs[prop])\r\n  })\r\n\r\n  if (showCode) {\r\n    $heading.innerHTML = chapterCode + ' ' + text\r\n  }\r\n\r\n  if (!hasAnchor) {\r\n    return false\r\n  }\r\n\r\n  $icon = createSvgIcon('hash')\r\n  $anchor = createElement(\r\n    'a',\r\n    {\r\n      id: `anchor-${i}`,\r\n      className: `${CLS_HEADING}__anchor anchor-${i}`,\r\n      href: anchorURL ? anchorURL : `#${headingId}`,\r\n      target: anchorURL ? '_blank' : 'self',\r\n      'data-id': i\r\n    },\r\n    [$icon]\r\n  )\r\n  $heading.appendChild($anchor)\r\n}\r\n\r\nexport default _updateHeading\r\n","import isArray from './types/isArray'\r\n\r\n/**\r\n * 绘制 SVG Sprites 图标集\r\n * ========================================================================\r\n * @method paintSvgSprites\r\n * @param {Array} [symbols] - （可选）symbols 图标数组\r\n *                             传递 symbols - 绘制 symbols + SYMBOLS 的图标集\r\n *                             不传递 symbols - 仅绘制默认 SYMBOLS 图标集\r\n */\r\nexport const paintSvgSprites = (symbols = []) => {\r\n  const SYMBOLS = [\r\n    '<symbol id=\"outline-icon-up\" viewBox=\"0 0 1024 1024\"><path d=\"M494.784 261.696c0.832-0.448 1.536-1.216 2.368-1.536a38.72 38.72 0 0 1 46.08 8.256l277.824 302.272a41.92 41.92 0 0 1-1.536 58.048 39.104 39.104 0 0 1-56.448-1.6L513.728 355.904 260.736 626.048a39.104 39.104 0 0 1-56.448 1.088 41.6 41.6 0 0 1-1.088-57.984L483.84 269.696c0.512-0.512 1.344-0.768 1.92-1.408l1.088-1.344c2.368-2.496 5.312-3.648 8-5.248z\"></path></symbol>',\r\n    '<symbol id=\"outline-icon-down\" viewBox=\"0 0 1024 1024\"><path d=\"M494.784 762.304c0.832 0.448 1.536 1.216 2.368 1.536 15.232 7.488 33.92 4.992 46.08-8.256l277.824-302.272a41.92 41.92 0 0 0-1.536-58.048 39.104 39.104 0 0 0-56.448 1.6l-249.344 271.232-252.992-270.144a39.104 39.104 0 0 0-56.448-1.088 41.6 41.6 0 0 0-1.088 57.984l280.576 299.456c0.512 0.512 1.344 0.768 1.92 1.408l1.088 1.344c2.368 2.496 5.312 3.648 8 5.248z\"></path></symbol>',\r\n    '<symbol id=\"outline-icon-menu\" viewBox=\"0 0 1024 1024\"><path d=\"M320 256h640V128H320zM320 576h640V448H320zM320 896h640v-128H320zM64 256h128V128H64zM64 576h128V448H64zM64 896h128v-128H64z\"></path></symbol>',\r\n    '<symbol id=\"outline-icon-hash\" viewBox=\"0 0 24 24\"><path d=\"M14.216 10l-0.444 4h-3.988l0.444-4zM15.006 2.89l-0.568 5.11h-3.988l0.543-4.89c0.061-0.549-0.335-1.043-0.883-1.104s-1.043 0.335-1.104 0.884l-0.568 5.11h-4.438c-0.552 0-1 0.448-1 1s0.448 1 1 1h4.216l-0.444 4h-3.772c-0.552 0-1 0.448-1 1s0.448 1 1 1h3.549l-0.543 4.89c-0.061 0.549 0.335 1.043 0.883 1.104s1.043-0.335 1.104-0.883l0.569-5.111h3.988l-0.543 4.89c-0.061 0.549 0.335 1.043 0.883 1.104s1.043-0.335 1.104-0.883l0.568-5.111h4.438c0.552 0 1-0.448 1-1s-0.448-1-1-1h-4.216l0.444-4h3.772c0.552 0 1-0.448 1-1s-0.448-1-1-1h-3.549l0.543-4.89c0.061-0.549-0.335-1.043-0.883-1.104s-1.043 0.335-1.104 0.883z\"></path></symbol>',\r\n    '<symbol id=\"outline-icon-close\" viewBox=\"0 0 1024 1024\"><path d=\"M536.96 491.648L310.592 265.344a32 32 0 1 0-45.248 45.248L491.584 536.96l-226.304 226.304a32 32 0 0 0 45.312 45.248l226.24-226.304 226.304 226.304a32 32 0 0 0 45.248-45.248L582.144 536.896l226.304-226.24a32 32 0 0 0-45.248-45.248L536.896 491.584z\"></path></symbol>',\r\n    '<symbol id=\"outline-icon-homepage\" viewBox=\"0 0 26 28\"><path d=\"M22 15.5v7.5c0 0.547-0.453 1-1 1h-6v-6h-4v6h-6c-0.547 0-1-0.453-1-1v-7.5c0-0.031 0.016-0.063 0.016-0.094l8.984-7.406 8.984 7.406c0.016 0.031 0.016 0.063 0.016 0.094zM25.484 14.422l-0.969 1.156c-0.078 0.094-0.203 0.156-0.328 0.172h-0.047c-0.125 0-0.234-0.031-0.328-0.109l-10.813-9.016-10.813 9.016c-0.109 0.078-0.234 0.125-0.375 0.109-0.125-0.016-0.25-0.078-0.328-0.172l-0.969-1.156c-0.172-0.203-0.141-0.531 0.063-0.703l11.234-9.359c0.656-0.547 1.719-0.547 2.375 0l3.813 3.187v-3.047c0-0.281 0.219-0.5 0.5-0.5h3c0.281 0 0.5 0.219 0.5 0.5v6.375l3.422 2.844c0.203 0.172 0.234 0.5 0.063 0.703z\"></path></symbol>',\r\n    '<symbol id=\"outline-icon-github\" viewBox=\"0 0 24 28\"><path d=\"M12 2c6.625 0 12 5.375 12 12 0 5.297-3.437 9.797-8.203 11.391-0.609 0.109-0.828-0.266-0.828-0.578 0-0.391 0.016-1.687 0.016-3.297 0-1.125-0.375-1.844-0.812-2.219 2.672-0.297 5.484-1.313 5.484-5.922 0-1.313-0.469-2.375-1.234-3.219 0.125-0.313 0.531-1.531-0.125-3.187-1-0.313-3.297 1.234-3.297 1.234-0.953-0.266-1.984-0.406-3-0.406s-2.047 0.141-3 0.406c0 0-2.297-1.547-3.297-1.234-0.656 1.656-0.25 2.875-0.125 3.187-0.766 0.844-1.234 1.906-1.234 3.219 0 4.594 2.797 5.625 5.469 5.922-0.344 0.313-0.656 0.844-0.766 1.609-0.688 0.313-2.438 0.844-3.484-1-0.656-1.141-1.844-1.234-1.844-1.234-1.172-0.016-0.078 0.734-0.078 0.734 0.781 0.359 1.328 1.75 1.328 1.75 0.703 2.141 4.047 1.422 4.047 1.422 0 1 0.016 1.937 0.016 2.234 0 0.313-0.219 0.688-0.828 0.578-4.766-1.594-8.203-6.094-8.203-11.391 0-6.625 5.375-12 12-12zM4.547 19.234c0.031-0.063-0.016-0.141-0.109-0.187-0.094-0.031-0.172-0.016-0.203 0.031-0.031 0.063 0.016 0.141 0.109 0.187 0.078 0.047 0.172 0.031 0.203-0.031zM5.031 19.766c0.063-0.047 0.047-0.156-0.031-0.25-0.078-0.078-0.187-0.109-0.25-0.047-0.063 0.047-0.047 0.156 0.031 0.25 0.078 0.078 0.187 0.109 0.25 0.047zM5.5 20.469c0.078-0.063 0.078-0.187 0-0.297-0.063-0.109-0.187-0.156-0.266-0.094-0.078 0.047-0.078 0.172 0 0.281s0.203 0.156 0.266 0.109zM6.156 21.125c0.063-0.063 0.031-0.203-0.063-0.297-0.109-0.109-0.25-0.125-0.313-0.047-0.078 0.063-0.047 0.203 0.063 0.297 0.109 0.109 0.25 0.125 0.313 0.047zM7.047 21.516c0.031-0.094-0.063-0.203-0.203-0.25-0.125-0.031-0.266 0.016-0.297 0.109s0.063 0.203 0.203 0.234c0.125 0.047 0.266 0 0.297-0.094zM8.031 21.594c0-0.109-0.125-0.187-0.266-0.172-0.141 0-0.25 0.078-0.25 0.172 0 0.109 0.109 0.187 0.266 0.172 0.141 0 0.25-0.078 0.25-0.172zM8.937 21.438c-0.016-0.094-0.141-0.156-0.281-0.141-0.141 0.031-0.234 0.125-0.219 0.234 0.016 0.094 0.141 0.156 0.281 0.125s0.234-0.125 0.219-0.219z\"></path></symbol>',\r\n    '<symbol id=\"outline-icon-issues\" viewBox=\"0 0 24 28\"><path d=\"M25.5 15c0 0.547-0.453 1-1 1h-3.5c0 1.953-0.422 3.422-1.047 4.531l3.25 3.266c0.391 0.391 0.391 1.016 0 1.406-0.187 0.203-0.453 0.297-0.703 0.297s-0.516-0.094-0.703-0.297l-3.094-3.078s-2.047 1.875-4.703 1.875v-14h-2v14c-2.828 0-4.891-2.063-4.891-2.063l-2.859 3.234c-0.203 0.219-0.469 0.328-0.75 0.328-0.234 0-0.469-0.078-0.672-0.25-0.406-0.375-0.438-1-0.078-1.422l3.156-3.547c-0.547-1.078-0.906-2.469-0.906-4.281h-3.5c-0.547 0-1-0.453-1-1s0.453-1 1-1h3.5v-4.594l-2.703-2.703c-0.391-0.391-0.391-1.016 0-1.406s1.016-0.391 1.406 0l2.703 2.703h13.188l2.703-2.703c0.391-0.391 1.016-0.391 1.406 0s0.391 1.016 0 1.406l-2.703 2.703v4.594h3.5c0.547 0 1 0.453 1 1zM18 6h-10c0-2.766 2.234-5 5-5s5 2.234 5 5z\"></path></symbol>',\r\n    '<symbol id=\"outline-icon-tags\" viewBox=\"0 0 26 28\"><path d=\"M7 7c0-1.109-0.891-2-2-2s-2 0.891-2 2 0.891 2 2 2 2-0.891 2-2zM23.672 16c0 0.531-0.219 1.047-0.578 1.406l-7.672 7.688c-0.375 0.359-0.891 0.578-1.422 0.578s-1.047-0.219-1.406-0.578l-11.172-11.188c-0.797-0.781-1.422-2.297-1.422-3.406v-6.5c0-1.094 0.906-2 2-2h6.5c1.109 0 2.625 0.625 3.422 1.422l11.172 11.156c0.359 0.375 0.578 0.891 0.578 1.422zM29.672 16c0 0.531-0.219 1.047-0.578 1.406l-7.672 7.688c-0.375 0.359-0.891 0.578-1.422 0.578-0.812 0-1.219-0.375-1.75-0.922l7.344-7.344c0.359-0.359 0.578-0.875 0.578-1.406s-0.219-1.047-0.578-1.422l-11.172-11.156c-0.797-0.797-2.312-1.422-3.422-1.422h3.5c1.109 0 2.625 0.625 3.422 1.422l11.172 11.156c0.359 0.375 0.578 0.891 0.578 1.422z\"></path></symbol>'\r\n  ]\r\n  const sprites =\r\n    isArray(symbols) && symbols.length > 0 ? SYMBOLS.concat(symbols) : SYMBOLS\r\n  const $body = document.body\r\n  let $icons = document.querySelector('#svg-sprites')\r\n\r\n  if ($icons) {\r\n    $icons.innerHTML = sprites.join('')\r\n  } else {\r\n    $icons = document.createElement('div')\r\n    $icons.innerHTML =\r\n      `<svg id=\"svg-sprites\" aria-hidden=\"true\" style=\"position:absolute;display:none;width:0;height:0;overflow:hidden;\">` +\r\n      `${sprites.join('')}` +\r\n      `</svg>`\r\n    $body.insertBefore($icons.firstChild, $body.firstChild)\r\n  }\r\n}\r\n\r\n/**\r\n * 创建 SVG 图标 DOM 元素\r\n * ========================================================================\r\n * @method createSvgIcon\r\n * @param {String} name\r\n * @param {Number|String|Array} [size]\r\n * @param {String} [color]\r\n * @param {String} [iconSet]\r\n * @returns {HTMLElement}\r\n */\r\nexport const createSvgIcon = (\r\n  name,\r\n  size = 0,\r\n  color = '',\r\n  iconSet = 'outline'\r\n) => {\r\n  const binds = iconSet\r\n    ? `xlink:href=\"#${iconSet}-icon-${name}\"`\r\n    : `xlink:href=\"#icon-${name}\"`\r\n  const width = isArray(size) ? size[0] : size\r\n  const height = isArray(size) ? size[1] : size\r\n  const defaultRules = size ? `width:${width}px;height:${height}px;` : ''\r\n  const cssRules = color ? defaultRules + `color:${color}` : defaultRules\r\n  const svg =\r\n    `<svg aria-hidden=\"true\" class=\"outline-icon__svg\" style=\"${cssRules}\">` +\r\n    `<use ${binds}></use>` +\r\n    `</svg>`\r\n  const $icon = document.createElement('i')\r\n\r\n  $icon.className = 'outline-icon'\r\n  $icon.innerHTML = svg\r\n\r\n  return $icon\r\n}\r\n","import hasOwn from '../lang/hasOwn'\r\nimport isObject from '../types/isObject'\r\nimport isString from '../types/isString'\r\nimport isArray from '../types/isArray'\r\nimport isDOM from '../types/isDOM'\r\nimport setAttribute from './setAttribute'\r\n\r\n/**\r\n * 创建 DOM 节点，并添加属性和子节点\r\n * ========================================================================\r\n * @method createElement\r\n * @param {String} tagName - 标签名称\r\n * @param {Object|Array} attrs - 属性对象或者子节点\r\n * @param {Array} [children] - 子节点数组\r\n * @returns {HTMLElement}\r\n */\r\nconst createElement = (tagName, attrs, children) => {\r\n  const $fragment = document.createDocumentFragment()\r\n  const $el = document.createElement(tagName)\r\n  const isValidChild = (child) => {\r\n    return isDOM(child) || isString(child)\r\n  }\r\n  const append = (child) => {\r\n    let $child\r\n\r\n    if (!isValidChild(child)) {\r\n      return false\r\n    }\r\n\r\n    if (isDOM(child)) {\r\n      $child = child\r\n    } else if (isString(child)) {\r\n      $child = document.createTextNode(child)\r\n    }\r\n\r\n    $fragment.appendChild($child)\r\n  }\r\n\r\n  if (isObject(attrs)) {\r\n    Object.keys(attrs).forEach((attr) => {\r\n      if (hasOwn(attrs, attr)) {\r\n        setAttribute($el, attr, attrs[attr])\r\n      }\r\n    })\r\n  } else if (isArray(attrs) && attrs.every((attr) => isValidChild(attr))) {\r\n    attrs.forEach((child) => {\r\n      append(child)\r\n    })\r\n  }\r\n\r\n  if (isArray(children)) {\r\n    children.forEach((child) => {\r\n      append(child)\r\n    })\r\n  } else {\r\n    append(children)\r\n  }\r\n\r\n  $el.appendChild($fragment)\r\n\r\n  return $el\r\n}\r\n\r\nexport default createElement\r\n","import trim from '../lang/trim'\r\nimport hasClass from './hasClass'\r\n\r\n/**\r\n * 移除 DOM 节点的 className 样式\r\n * ========================================================================\r\n * @method removeClass\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst removeClass = (el, className) => {\r\n  let allClass = el.className\r\n  let classList\r\n\r\n  if (!allClass || !hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.remove) {\r\n    classList.remove(className)\r\n  } else {\r\n    allClass = trim(allClass.replace(className, ''))\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\nexport default removeClass\r\n","import isElement from '../types/isElement'\r\n/**\r\n * 检测 DOM 节点是否包含名为 className 的样式\r\n * ========================================================================\r\n * @method hasClass\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst hasClass = (el, className) => {\r\n  const pattern = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)')\r\n  let allClass\r\n  let classList\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  allClass = el.className\r\n\r\n  if (!allClass) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.contains) {\r\n    return el.classList.contains(className)\r\n  }\r\n\r\n  return !!pattern.exec(allClass)\r\n}\r\n\r\nexport default hasClass\r\n","import removeClass from './utils/dom/removeClass'\r\nimport isEmpty from './utils/types/isEmpty'\r\nimport trim from './utils/lang/trim'\r\n\r\nconst _resetHeading = ($heading, hasAnchor = true, isAtStart = true) => {\r\n  const CLS_HEADING = 'outline-heading'\r\n  const text = $heading.innerHTML\r\n  let $anchor\r\n\r\n  $heading.innerHTML = text.replace(/^\\d+(?:(\\.?\\d*)*\\s?)?/gi, '')\r\n  $heading.removeAttribute('id')\r\n  $heading.removeAttribute('data-id')\r\n\r\n  removeClass($heading, CLS_HEADING)\r\n\r\n  if (!hasAnchor) {\r\n    return false\r\n  }\r\n\r\n  $anchor = $heading.querySelector(`.${CLS_HEADING}__anchor`)\r\n\r\n  if (isAtStart) {\r\n    removeClass($heading, `${CLS_HEADING}_start`)\r\n  }\r\n\r\n  if (isEmpty(trim($heading.className))) {\r\n    $heading.removeAttribute('class')\r\n  }\r\n\r\n  $heading.removeChild($anchor)\r\n}\r\n\r\nexport default _resetHeading\r\n","import isString from './isString'\r\n/**\r\n * 检测数据是否为空字符串\r\n * ========================================================================\r\n * @method isEmpty\r\n * @param {String} str\r\n * @returns {boolean}\r\n */\r\nconst isEmpty = (str) => {\r\n  return isString(str) && str === ''\r\n}\r\n\r\nexport default isEmpty\r\n","import trim from './utils/lang/trim'\r\nimport stripTags from './utils/lang/stripTags'\r\n\r\nimport _getChapterParentIdByDiffer from './_getChapterParentIdByDiffer'\r\nimport _getChaptersWithCode from './_getChaptersWithCode'\r\n\r\nconst getChapters = (headings, showCode = true) => {\r\n  let previous = 1\r\n  let level = 0\r\n  const chapters = []\r\n\r\n  headings.forEach((heading, i) => {\r\n    const headingLevel = heading.tagName.replace(/h/i, '')\r\n    let current = parseInt(headingLevel, 10)\r\n    let pid = -1\r\n\r\n    // 场景1：当前标题是前一个标题的子标题\r\n    // 当前标题的（标题标签）序号 > 前一个标题的序号：两个相连的标题是父标题 -> 子标题关系；\r\n    // h2 （前一个标题）\r\n    // h3 （当前标题）\r\n    if (current > previous) {\r\n      level += 1\r\n\r\n      // 第一层级的 pid 是 -1\r\n      if (level === 1) {\r\n        pid = -1\r\n      } else {\r\n        pid = i - 1\r\n      }\r\n    }\r\n    // 场景2：当前标题和前一个标题层级相同\r\n    // 当前标题的（标题标签）序号 = 前一个标题的序号\r\n    // h2 （前一个标题）\r\n    // h2 （当前标题）\r\n    // 当前标题的（标题标签）序号 < 前一个标题的序号，并且当前标题序号 > 当前的级别\r\n    // h2\r\n    // h4 （前一个标题）\r\n    // h3 （当前标题：这种情况我们还是任务 h3 是 h2 的下一级章节）\r\n    else if (current === previous || (current < previous && current > level)) {\r\n      // H1 的层级肯定是 1\r\n      if (current === 1) {\r\n        level = 1\r\n        pid = -1\r\n      } else {\r\n        pid = chapters[i - 1].pid\r\n      }\r\n    }\r\n    // 场景3：当前标题比前一个标题层级高\r\n    else if (current <= level) {\r\n      // H1 的层级肯定是 1\r\n      if (current === 1) {\r\n        level = 1\r\n      } else {\r\n        level = level - (previous - current)\r\n\r\n        if (level <= 1) {\r\n          level = 1\r\n        }\r\n      }\r\n\r\n      // 第一级的标题\r\n      if (level === 1) {\r\n        pid = -1\r\n      } else {\r\n        // 通过当前标题和前一个标题之间的等级差，获得当前标题的父标题ID\r\n        pid = _getChapterParentIdByDiffer(chapters, previous - current, i)\r\n      }\r\n    }\r\n\r\n    previous = current\r\n\r\n    chapters.push({\r\n      id: i,\r\n      pid: pid,\r\n      level: level,\r\n      rel: `heading-${i}`,\r\n      text: stripTags(trim(heading.innerHTML))\r\n    })\r\n  })\r\n\r\n  return showCode ? _getChaptersWithCode(chapters) : chapters\r\n}\r\n\r\nexport default getChapters\r\n","import isString from '../types/isString'\r\n\r\n/**\r\n * 过滤所有 HTML 标签\r\n * ========================================================================\r\n * @method stripTags\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\nconst stripTags = (str) => {\r\n  if (!isString(str)) {\r\n    return ''\r\n  }\r\n  return str.replace(/<\\/?[^>]+(>|$)/g, '')\r\n}\r\n\r\nexport default stripTags\r\n","const _getChapterParentIdByDiffer = (chapters, differ, index) => {\r\n  let previous = chapters[index - 1]\r\n  let pid\r\n  let i\r\n\r\n  for (i = 0; i < differ; i += 1) {\r\n    pid = previous.pid\r\n    previous = chapters[pid]\r\n  }\r\n\r\n  pid = previous.pid\r\n\r\n  return pid\r\n}\r\n\r\nexport default _getChapterParentIdByDiffer\r\n","const _getChaptersWithCode = (chapters) => {\r\n  const groups = {}\r\n  const cb = (o) => {\r\n    return [o.pid]\r\n  }\r\n\r\n  chapters.forEach((o) => {\r\n    const group = JSON.stringify(cb(o))\r\n\r\n    groups[group] = groups[group] || []\r\n    groups[group].push(o)\r\n\r\n    o.index = groups[group].length\r\n    if (o.pid === -1) {\r\n      o.code = String(o.index)\r\n    }\r\n  })\r\n\r\n  Object.keys(groups).forEach((group) => {\r\n    groups[group].forEach((c) => {\r\n      const subjects = chapters.filter((b) => b.pid === c.id)\r\n      subjects.forEach((o) => {\r\n        o.code = c.code + '.' + o.index\r\n      })\r\n    })\r\n  })\r\n\r\n  return chapters\r\n}\r\n\r\nexport default _getChaptersWithCode\r\n","import Base from './base'\r\n\r\n// 在文章的标题生成 anchor 链接\r\nimport isString from './utils/types/isString'\r\nimport isFunction from './utils/types/isFunction'\r\nimport isElement from './utils/types/isElement'\r\nimport toTree from './utils/lang/toTree'\r\nimport later from './utils/lang/later'\r\nimport scrollTo from './utils/dom/scrollTo'\r\nimport _getScrollElement from './utils/dom/_getScrollElement'\r\nimport offsetTop from './utils/dom/offsetTop'\r\nimport on from './utils/event/on'\r\nimport off from './utils/event/off'\r\nimport stop from './utils/event/stop'\r\nimport publish from './utils/observer/emit'\r\nimport { paintSvgSprites } from './utils/icons'\r\n\r\nimport _updateHeading from './_updateHeading'\r\nimport _resetHeading from './_resetHeading'\r\nimport getChapters from './getChapters'\r\n\r\nclass Anchors extends Base {\r\n  constructor(options) {\r\n    super()\r\n\r\n    this.attrs = Anchors.DEFAULTS\r\n    this.$articleElement = null\r\n    this.$scrollElement = null\r\n    this.$headings = []\r\n\r\n    this.chapters = []\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n  }\r\n\r\n  initialize(options) {\r\n    let created\r\n    let scrollElement\r\n    let selector\r\n    let $articleElement\r\n    let articleElement\r\n\r\n    this.attr(options)\r\n    articleElement = this.attr('articleElement')\r\n    scrollElement = this.attr('scrollElement')\r\n    selector = this.attr('selector')\r\n    created = this.attr('created')\r\n\r\n    if (isString(articleElement)) {\r\n      $articleElement = document.querySelector(articleElement)\r\n    } else if (isElement(articleElement)) {\r\n      $articleElement = articleElement\r\n    }\r\n\r\n    if (!$articleElement) {\r\n      return this\r\n    }\r\n\r\n    this.$articleElement = $articleElement\r\n    this.$scrollElement = _getScrollElement(scrollElement)\r\n    this.$headings = [...$articleElement.querySelectorAll(selector)]\r\n\r\n    if (this.$headings.length < 1) {\r\n      return this\r\n    }\r\n\r\n    this.chapters = getChapters(this.$headings)\r\n\r\n    if (isFunction(created)) {\r\n      created.call(this)\r\n    }\r\n\r\n    this.render().addListeners()\r\n\r\n    return this\r\n  }\r\n\r\n  getChapters(isTreeStructured = false) {\r\n    const chapters = this.chapters\r\n    return isTreeStructured ? toTree(chapters, 'id', 'pid') : chapters\r\n  }\r\n\r\n  count() {\r\n    return this.chapters.length\r\n  }\r\n\r\n  render() {\r\n    const mounted = this.attr('mounted')\r\n    const hasAnchor = this.attr('hasAnchor')\r\n    const isAtStart = this.attr('isAtStart')\r\n    const showCode = this.attr('showCode')\r\n    const anchorURL = this.attr('anchorURL')\r\n    const $headings = this.$headings\r\n    const chapters = this.getChapters()\r\n\r\n    paintSvgSprites()\r\n\r\n    $headings.forEach(($heading, i) => {\r\n      const chapterCode = chapters[i].code\r\n      _updateHeading($heading, i, {\r\n        hasAnchor,\r\n        isAtStart,\r\n        showCode,\r\n        chapterCode,\r\n        anchorURL\r\n      })\r\n    })\r\n\r\n    if (isFunction(mounted)) {\r\n      mounted.call(this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  scrollTo(top, after) {\r\n    const el = this.$scrollElement\r\n\r\n    scrollTo(el, top, after)\r\n\r\n    return this\r\n  }\r\n\r\n  destroy() {\r\n    const hasAnchor = this.attr('hasAnchor')\r\n    const isAtStart = this.attr('isAtStart')\r\n    const beforeDestroy = this.attr('beforeDestroy')\r\n    const afterDestroy = this.attr('afterDestroy')\r\n    const $headings = this.$headings\r\n\r\n    if (isFunction(beforeDestroy)) {\r\n      beforeDestroy.call(this)\r\n    }\r\n\r\n    this.removeListeners()\r\n    $headings.forEach(($heading) => {\r\n      _resetHeading($heading, hasAnchor, isAtStart)\r\n    })\r\n\r\n    this.attr(Anchors.DEFAULTS)\r\n    this.$articleElement = null\r\n    this.$scrollElement = null\r\n    this.$headings = []\r\n    this.chapters = []\r\n\r\n    if (isFunction(afterDestroy)) {\r\n      afterDestroy.call(this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  onAnchorTrigger(evt) {\r\n    const anchorURL = this.attr('anchorURL')\r\n    const afterScroll = this.attr('afterScroll')\r\n    const stickyHeight = this.attr('stickyHeight')\r\n    const $anchor = evt.delegateTarget\r\n    const $heading = $anchor.parentNode\r\n    const top = offsetTop($heading) - (stickyHeight + 10)\r\n    const $scrollElement = this.$scrollElement\r\n    const min = 0\r\n    const max = $scrollElement.scrollHeight - $scrollElement.clientHeight\r\n    const after = () => {\r\n      if (isFunction(afterScroll)) {\r\n        afterScroll.call(this, 'anchor')\r\n      }\r\n\r\n      later(() => {\r\n        publish('toolbar:update', {\r\n          top,\r\n          min,\r\n          max\r\n        })\r\n      })\r\n    }\r\n\r\n    this.scrollTo(top, after)\r\n\r\n    if (!anchorURL) {\r\n      stop(evt)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    const $articleElement = this.$articleElement\r\n\r\n    on(\r\n      $articleElement,\r\n      '.outline-heading__anchor',\r\n      'click',\r\n      this.onAnchorTrigger,\r\n      this,\r\n      true\r\n    )\r\n\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    const $articleElement = this.$articleElement\r\n\r\n    off($articleElement, 'click', this.onAnchorTrigger)\r\n\r\n    return this\r\n  }\r\n}\r\n\r\nAnchors.DEFAULTS = {\r\n  scrollElement: 'html,body',\r\n  articleElement: '#article',\r\n  selector: 'h1,h2,h3,h4,h5,h6',\r\n  stickyHeight: 0,\r\n  anchorURL: '',\r\n  hasAnchor: true,\r\n  isAtStart: true,\r\n  showCode: false,\r\n  created: null,\r\n  mounted: null,\r\n  afterScroll: null,\r\n  beforeDestroy: null,\r\n  afterDestroy: null\r\n}\r\n\r\nexport default Anchors\r\n","const toTree = (list, nodeKey, parentKey) => {\r\n  const map = {}\r\n  const roots = []\r\n\r\n  list.forEach((item, i) => {\r\n    // initialize the map\r\n    map[item[nodeKey]] = i\r\n    // initialize the children\r\n    item.children = []\r\n  })\r\n\r\n  list.forEach((item) => {\r\n    const node = list[map[item[parentKey]]]\r\n\r\n    if (item[parentKey] !== -1) {\r\n      // if you have dangling branches check that map[node.parentId] exists\r\n      node.children.push(item)\r\n    } else {\r\n      roots.push(item)\r\n    }\r\n  })\r\n\r\n  return roots\r\n}\r\n\r\nexport default toTree\r\n","import easeInQuad from '../lang/easeInQuad'\r\nimport isFunction from '../types/isFunction'\r\nimport _getScrollElement from './_getScrollElement'\r\n\r\n/**\r\n * 指定 rootElement DOM 节点滚动到指定 top 位置\r\n * ========================================================================\r\n * @method scrollTo\r\n * @param {HTMLElement|Object} [scrollElement] - （必须）要滚动的 DOM 节点\r\n * @param {Number} top - （必须）滚动的 scrollTop 数值\r\n * @param {Function} [afterStop] - （可选）滚动完成的回调函数\r\n */\r\nconst scrollTo = (scrollElement, top, afterStop) => {\r\n  const $scrollElement = _getScrollElement(scrollElement)\r\n  let scrollTop = $scrollElement.scrollTop\r\n  let step = 0\r\n  const distance = top - scrollTop\r\n  const MAX_HEIGHT = $scrollElement.scrollHeight\r\n  const MAX_TOP = top - MAX_HEIGHT <= 0 ? top : MAX_HEIGHT\r\n  const stop = (top) => {\r\n    if (isFunction(afterStop)) {\r\n      afterStop(top)\r\n    }\r\n\r\n    return false\r\n  }\r\n  const play = () => {\r\n    step += 1\r\n\r\n    // 向上滚动\r\n    if (distance < 0) {\r\n      scrollTop -= easeInQuad(step)\r\n      $scrollElement.scrollTop = scrollTop\r\n\r\n      if (scrollTop <= top) {\r\n        $scrollElement.scrollTop = top\r\n        return stop(top)\r\n      }\r\n    } else {\r\n      scrollTop += easeInQuad(step)\r\n      $scrollElement.scrollTop = scrollTop\r\n\r\n      if (scrollTop >= MAX_TOP) {\r\n        $scrollElement.scrollTop = MAX_TOP\r\n        return stop(MAX_TOP)\r\n      }\r\n    }\r\n\r\n    requestAnimationFrame(play)\r\n  }\r\n\r\n  requestAnimationFrame(play)\r\n}\r\n\r\nexport default scrollTo\r\n","import isFunction from '../types/isFunction'\r\n\r\n/**\r\n * later - 延迟执行方法\r\n * ========================================================================\r\n * @method later\r\n * @param {Function} fn\r\n * @param {Number} [delay]\r\n * @returns {number|boolean}\r\n */\r\nconst later = (fn, delay = 300) => {\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  return setTimeout(() => {\r\n    fn()\r\n  }, delay)\r\n}\r\n\r\nexport default later\r\n","/**\r\n * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n * ========================================================================\r\n * @method stop\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 工作台输出：'a'\r\n *   // 不会触发事件冒泡，输出：'你点击了导航栏'\r\n *   // 也不会切换到 href 属性的页面，阻止了点击链接的默认行为\r\n *   stopEvent(evt)\r\n * })\r\n */\r\nconst stop = function (evt) {\r\n  evt.stopPropagation()\r\n  evt.preventDefault()\r\n}\r\n\r\nexport default stop\r\n"],"names":["isString","str","hasOwn","obj","prop","hasOwnProperty","Object","prototype","call","toString","val","apply","isFunction","isObject","o","Base","constructor","options","this","attrs","initialize","attr","render","addListeners","value","origin","source","keys","forEach","arguments","length","destroy","removeListeners","reload","isElement","nodeName","tagName","nodeType","easeInQuad","x","_getScrollElement","scrollElement","$rootElements","$scrollElement","document","querySelector","querySelectorAll","scrollTop","offsetTop","el","top","offsetParent","matches","selector","sel","replace","msMatchesSelector","getParentOrHost","host","parentNode","CAPTURE_EVENTS","_off","type","fn","capture","indexOf","_delegateListener","listeners","_listeners","index","listener","i","handler","splice","_delete","removeEventListener","purgeElement","recurse","$element","$children","childNodes","filter","getListeners","$child","off","on","data","context","once","evt","target","getTarget","delegateTarget","ctx","includeCTX","startsWith","closest","overrideContext","push","addEventListener","_subscribers","_hasDirectSubscribersFor","topic","has","isDirect","found","position","lastIndexOf","substring","_hasSubscribers","emit","async","execute","subscriber","message","callback","deliver","setTimeout","isArray","Array","trim","isDOM","isHTMLCollection","fragment","isTextNode","setAttribute","toLowerCase","style","cssText","className","_updateHeading","$heading","CLS_HEADING","hasAnchor","isAtStart","showCode","chapterCode","anchorURL","headingId","id","text","innerHTML","$anchor","$icon","name","size","color","iconSet","binds","width","height","defaultRules","svg","createElement","createSvgIcon","children","$fragment","createDocumentFragment","$el","isValidChild","child","append","createTextNode","appendChild","every","href","removeClass","classList","allClass","pattern","RegExp","contains","exec","hasClass","remove","_resetHeading","removeAttribute","removeChild","getChapters","headings","previous","level","chapters","heading","headingLevel","current","parseInt","pid","differ","_getChapterParentIdByDiffer","rel","groups","group","JSON","stringify","cb","code","String","c","b","_getChaptersWithCode","Anchors","super","DEFAULTS","$articleElement","$headings","created","articleElement","isTreeStructured","list","nodeKey","parentKey","map","roots","item","node","toTree","count","mounted","symbols","SYMBOLS","sprites","concat","$body","body","$icons","join","insertBefore","firstChild","paintSvgSprites","scrollTo","after","afterStop","step","distance","MAX_HEIGHT","scrollHeight","MAX_TOP","stop","play","requestAnimationFrame","beforeDestroy","afterDestroy","onAnchorTrigger","afterScroll","stickyHeight","max","clientHeight","delay","later","publish","min","stopPropagation","preventDefault"],"mappings":"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"}