{"version":3,"file":"chapters.min.js","sources":["src/utils/types/isString.js","src/utils/lang/hasOwn.js","src/utils/lang/toString.js","src/base.js","src/utils/types/isObject.js","src/utils/lang/extend.js","src/utils/types/isFunction.js","src/utils/types/isElement.js","src/utils/lang/later.js","src/utils/event/enum.js","src/utils/event/_off.js","src/utils/event/_delete.js","src/utils/event/purgeElement.js","src/utils/event/getListeners.js","src/utils/event/off.js","src/utils/dom/matches.js","src/utils/dom/getParentOrHost.js","src/utils/event/on.js","src/utils/event/getTarget.js","src/utils/dom/resolveTextNode.js","src/utils/dom/closest.js","src/utils/dom/createElement.js","src/utils/types/isArray.js","src/utils/dom/setAttribute.js","src/utils/lang/easeInQuad.js","src/utils/dom/_getScrollElement.js","src/utils/dom/scrollTo.js","src/utils/dom/hasClass.js","src/utils/dom/addClass.js","src/utils/dom/removeClass.js","src/utils/lang/trim.js","src/utils/dom/offsetTop.js","src/utils/observer/_subscribers.js","src/utils/observer/_hasDirectSubscribersFor.js","src/utils/observer/has.js","src/utils/observer/_hasSubscribers.js","src/utils/observer/emit.js","src/utils/types/isTypedArray.js","src/chapters.js","src/_paintChapters.js","src/utils/types/isNumber.js","src/utils/dom/intersection.js","src/utils/event/stop.js","src/utils/event/emit.js"],"sourcesContent":["/**\r\n * 检测数据是否为 String 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} str\r\n * @returns {boolean}\r\n */\r\nconst isString = (str) => {\r\n  return typeof str === 'string'\r\n}\r\n\r\nexport default isString\r\n","/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n  return obj && hasOwnProperty.call(obj, prop)\r\n}\r\n\r\nexport default hasOwn\r\n","const toString = Object.prototype.toString\r\n\r\n/**\r\n * Object 对象原型上的 toString 方法\r\n * ========================================================================\r\n * @method toString\r\n * @param {*} val\r\n * @returns {string}\r\n */\r\nexport default toString\r\n","import isString from './utils/types/isString'\r\nimport hasOwn from './utils/lang/hasOwn'\r\nimport isObject from './utils/types/isObject'\r\nimport extend from './utils/lang/extend'\r\n\r\nclass Base {\r\n  constructor(options) {\r\n    this.attrs = {}\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n  }\r\n\r\n  initialize(options) {\r\n    this.attr(options).render().addListeners()\r\n    return this\r\n  }\r\n\r\n  attr(prop, value) {\r\n    const attrs = this.attrs\r\n\r\n    if (isString(prop)) {\r\n      // 只能扩展 attrs 中已有的属性\r\n      if (value && hasOwn(attrs, prop)) {\r\n        // 更新单个配置信息\r\n        attrs[prop] = value\r\n        return this\r\n      }\r\n\r\n      // 只传递 prop 参数，则返回对应的属性值\r\n      return attrs[prop]\r\n    } else if (isObject(prop)) {\r\n      // 批量更新配置信息\r\n      extend(attrs, prop)\r\n\r\n      return this\r\n    } else if (arguments.length === 0) {\r\n      // 不传递参数，直接返回整个\r\n      return attrs\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  render() {\r\n    return this\r\n  }\r\n\r\n  destroy() {\r\n    this.removeListeners()\r\n    return this\r\n  }\r\n\r\n  reload(options) {\r\n    this.destroy().initialize(this.attr(options))\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    return this\r\n  }\r\n}\r\n\r\nexport default Base\r\n","import toString from '../lang/toString'\r\n\r\n/**\r\n * 检测数据是否为 Object 类型\r\n * ========================================================================\r\n * @method isObject\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isObject = (o) => {\r\n  return toString.apply(o) === '[object Object]' && o !== null\r\n}\r\n\r\nexport default isObject\r\n","import hasOwn from './hasOwn'\r\n\r\n/**\r\n * 扩展对象\r\n * ========================================================================\r\n * @method extend\r\n * @param {Object} origin\r\n * @param {Object} source\r\n */\r\nconst extend = (origin, source) => {\r\n  const keys = Object.keys(source)\r\n\r\n  keys.forEach((prop) => {\r\n    if (hasOwn(source, prop)) {\r\n      origin[prop] = source[prop]\r\n    }\r\n  })\r\n}\r\n\r\nexport default extend\r\n","import toString from '../lang/toString'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  return (\r\n    typeof val === 'function' || toString.apply(val) === '[object Function]'\r\n  )\r\n}\r\n\r\nexport default isFunction\r\n","/**\r\n * 检测数据是否为 HTMLElement DOM 节点\r\n * ========================================================================\r\n * @method isElement\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isElement = (o) => {\r\n  return o && o.nodeName && o.tagName && o.nodeType === 1\r\n}\r\n\r\nexport default isElement\r\n","import isFunction from '../types/isFunction'\r\n\r\n/**\r\n * later - 延迟执行方法\r\n * ========================================================================\r\n * @method later\r\n * @param {Function} fn\r\n * @param {Number} [delay]\r\n * @returns {number|boolean}\r\n */\r\nconst later = (fn, delay = 300) => {\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  return setTimeout(() => {\r\n    fn()\r\n  }, delay)\r\n}\r\n\r\nexport default later\r\n","export const CAPTURE_EVENTS = [\r\n  'focusout',\r\n  'blur',\r\n  'focusin',\r\n  'focus',\r\n  'load',\r\n  'unload',\r\n  'mouseenter',\r\n  'mouseleave'\r\n]\r\n","import { CAPTURE_EVENTS } from './enum'\r\nimport _delete from './_delete'\r\n\r\n/**\r\n * （私有方法）取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method _off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须）事件处理器回调函数\r\n * @private\r\n */\r\nconst _off = (el, type, fn) => {\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  /* istanbul ignore else */\r\n  if (fn._delegateListener) {\r\n    fn = fn._delegateListener\r\n    delete fn._delegateListener\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  _delete(el, type, fn)\r\n\r\n  el.removeEventListener(type, fn, capture)\r\n}\r\n\r\nexport default _off\r\n","/**\r\n * 删除 DOM 元素缓存的 _listeners 数据\r\n * ========================================================================\r\n * @method _delete\r\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\r\n * @param {String} type - 事件类型（名称）\r\n * @param {Function} [fn] - 事件处理器回调函数\r\n */\r\nconst _delete = function (el, type, fn) {\r\n  const listeners = el._listeners\r\n  let index = -1\r\n\r\n  if (listeners.length < 1) {\r\n    return false\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  listeners.forEach((listener, i) => {\r\n    const handler = listener.fn\r\n\r\n    if (type === listener.type) {\r\n      index = i\r\n\r\n      if (handler === fn) {\r\n        index = i\r\n      }\r\n    }\r\n  })\r\n\r\n  /* istanbul ignore else */\r\n  if (index > -1) {\r\n    listeners.splice(index, 1)\r\n  }\r\n}\r\n\r\nexport default _delete\r\n","import isString from '../types/isString'\r\nimport isElement from '../types/isElement'\r\nimport getListeners from './getListeners'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 销毁（type 类型的）代理事件绑定\r\n * ========================================================================\r\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\r\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\r\n * ========================================================================\r\n * @method purgeElement\r\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\r\n * @param {String|Boolean} type - （必须）事件类型\r\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\r\n */\r\nconst purgeElement = function (el, type, recurse = false) {\r\n  const $element = isString(el) ? document.querySelector(el) : el\r\n  const $children = $element.childNodes\r\n  const listeners = getListeners($element, type)\r\n\r\n  listeners.forEach((listener) => {\r\n    _off($element, listener.type, listener.fn)\r\n  })\r\n\r\n  if (\r\n    (recurse || type === true || arguments.length === 1) &&\r\n    $element &&\r\n    $children\r\n  ) {\r\n    $children.forEach(($child) => {\r\n      if (isElement($child)) {\r\n        purgeElement($child, type, recurse)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default purgeElement\r\n","import isString from '../types/isString'\r\n\r\n/**\r\n * 获取 DOM 元素（type 事件类型）事件绑定信息\r\n * ========================================================================\r\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\r\n * ========================================================================\r\n * @methods getListeners\r\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\r\n * @param {String} [type] - （可选）事件类型\r\n * @returns {Array} - 已绑定的事件信息\r\n */\r\nconst getListeners = (el, type) => {\r\n  let listeners = el._listeners || []\r\n\r\n  if (isString(type) && type) {\r\n    listeners = listeners.filter((listener) => {\r\n      return listener.type === type\r\n    })\r\n  }\r\n\r\n  return listeners\r\n}\r\n\r\nexport default getListeners\r\n","import purgeElement from './purgeElement'\r\nimport isFunction from '../types/isFunction'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} [fn] - （可选）事件处理器回调函数\r\n */\r\nconst off = (el, type, fn) => {\r\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\r\n  if (!isFunction(fn)) {\r\n    return purgeElement(el, type)\r\n  }\r\n\r\n  _off(el, type, fn)\r\n}\r\n\r\nexport default off\r\n","/**\r\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\r\n * ========================================================================\r\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\r\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\r\n * 标 DOM 元素是否为事件代理所期望触发的目标。\r\n * ========================================================================\r\n * @method matches\r\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\r\n * @returns {Boolean}\r\n */\r\nconst matches = (el, selector = '') => {\r\n  const sel = selector.replace(/^>/i, '')\r\n\r\n  if (!selector || !sel || !el) {\r\n    return false\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.matches) {\r\n    return el.matches(sel)\r\n  } else if (el.msMatchesSelector) {\r\n    return el.msMatchesSelector(sel)\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default matches\r\n","/**\r\n * 获取 DOM 元素的父节点\r\n * ========================================================================\r\n * @method getParentOrHost\r\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\r\n * @returns {*|HTMLElement}\r\n */\r\nconst getParentOrHost = (el) => {\r\n  return el.host && el !== document && el.host.nodeType\r\n    ? el.host\r\n    : el.parentNode\r\n}\r\n\r\nexport default getParentOrHost\r\n","import closest from '../dom/closest'\r\nimport off from './off'\r\nimport getTarget from './getTarget'\r\n\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定代理事件\r\n * ========================================================================\r\n * @method on\r\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n * @param {Function|Object} fn - （可选） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst on = (el, selector, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  const listener = function (evt) {\r\n    const target = getTarget(evt)\r\n    // 通过 Element.matches 方法获得点击的目标元素\r\n    const delegateTarget = closest(target, selector, el)\r\n    let overrideContext = context || el\r\n\r\n    evt.delegateTarget = delegateTarget\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (delegateTarget) {\r\n      // 仅触发一次\r\n      /* istanbul ignore else */\r\n      if (once === true) {\r\n        off(el, type, listener)\r\n      }\r\n\r\n      fn.call(overrideContext, evt, data)\r\n    }\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    selector,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default on\r\n","import resolveTextNode from '../dom/resolveTextNode'\r\n\r\n/**\r\n * 返回触发事件的 target DOM 元素\r\n * ========================================================================\r\n * @method getTarget\r\n * @param {Event} evt - Event 对象\r\n * @return {HTMLElement} - Event 对象的 target DOM 元素\r\n */\r\nconst getTarget = function (evt) {\r\n  const target = evt.target\r\n\r\n  return resolveTextNode(target)\r\n}\r\n\r\nexport default getTarget\r\n","/**\r\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\r\n * resolveTextNode() 方法则会返回实际的目标节点。\r\n * ========================================================================\r\n * @method resolveTextNode\r\n * @param {HTMLElement|Text} el - 要解析的节点\r\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\r\n */\r\nconst resolveTextNode = function (el) {\r\n  if (el && el.nodeType === 3) {\r\n    return el.parentNode\r\n  }\r\n\r\n  return el\r\n}\r\n\r\nexport default resolveTextNode\r\n","import matches from './matches'\r\nimport getParentOrHost from './getParentOrHost'\r\n\r\n/**\r\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\r\n * ========================================================================\r\n * @method closest\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）DOM 元素的选择其\r\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\r\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\r\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\r\n */\r\nconst closest = (el, selector, ctx, includeCTX) => {\r\n  const context = ctx || document\r\n\r\n  if (!el) {\r\n    return null\r\n  }\r\n\r\n  do {\r\n    /* istanbul ignore else */\r\n    if (\r\n      (selector != null &&\r\n        (selector[0] === '>'\r\n          ? el.parentNode === context && matches(el, selector)\r\n          : matches(el, selector))) ||\r\n      (includeCTX && el === context)\r\n    ) {\r\n      return el\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (el === context) {\r\n      break\r\n    }\r\n\r\n    /* jshint boss:true */\r\n  } while ((el = getParentOrHost(el)))\r\n}\r\n\r\nexport default closest\r\n","import hasOwn from '../lang/hasOwn'\r\nimport isArray from '../types/isArray'\r\nimport isElement from '../types/isElement'\r\nimport setAttribute from './setAttribute'\r\n\r\n/**\r\n * 创建 DOM 节点，并添加属性和子节点\r\n * ========================================================================\r\n * @method createElement\r\n * @param {String} tagName - 标签名称\r\n * @param {Object} attributes - 属性对象\r\n * @param {Array} children - 子节点数组\r\n * @returns {HTMLElement}\r\n */\r\nconst createElement = (tagName, attributes, children) => {\r\n  const keys = Object.keys(attributes)\r\n  let element = document.createElement(tagName)\r\n\r\n  keys.forEach((attr) => {\r\n    if (hasOwn(attributes, attr)) {\r\n      setAttribute(element, attr, attributes[attr])\r\n    }\r\n  })\r\n\r\n  if (isArray(children)) {\r\n    children.forEach((child) => {\r\n      let childNode = isElement(child) ? child : document.createTextNode(child)\r\n\r\n      element.appendChild(childNode)\r\n    })\r\n  }\r\n\r\n  return element\r\n}\r\n\r\nexport default createElement\r\n","import toString from '../lang/toString'\r\n\r\n/**\r\n * 检测数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isArray = (o) => {\r\n  if (Array.isArray) {\r\n    return Array.isArray(o)\r\n  } else {\r\n    return toString.apply(o) === '[object Array]'\r\n  }\r\n}\r\n\r\nexport default isArray\r\n","/**\r\n * 给 DOM 节点设置属性/值\r\n * ========================================================================\r\n * @method setAttribute\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} attr - 属性名称\r\n * @param {String|Number|Boolean} value - 属性值\r\n */\r\nconst setAttribute = (el, attr, value) => {\r\n  let tagName = el.tagName.toLowerCase()\r\n\r\n  switch (attr) {\r\n    case 'style':\r\n      el.style.cssText = value\r\n      break\r\n    case 'value':\r\n      if (tagName === 'input' || tagName === 'textarea') {\r\n        el.value = value\r\n      } else {\r\n        el.setAttribute(attr, value)\r\n      }\r\n      break\r\n    case 'className':\r\n      el.className = value\r\n      break\r\n    default:\r\n      el.setAttribute(attr, value)\r\n      break\r\n  }\r\n}\r\n\r\nexport default setAttribute\r\n","/**\r\n * 返回给定值的平方值\r\n * ========================================================================\r\n * @method easeInQuad\r\n * @param {Number} x\r\n * @returns {number}\r\n */\r\nconst easeInQuad = (x) => {\r\n  return x * x\r\n}\r\n\r\nexport default easeInQuad\r\n","import isString from '../types/isString'\r\nimport isElement from '../types/isElement'\r\n\r\nconst _getScrollElement = (scrollElement = null) => {\r\n  let $rootElements\r\n  let $scrollElement\r\n\r\n  if (!scrollElement) {\r\n    $rootElements = document.querySelectorAll('html,body')\r\n    $scrollElement =\r\n      $rootElements[0].scrollTop - $rootElements[1].scrollTop >= 0\r\n        ? $rootElements[0]\r\n        : $rootElements[1]\r\n  } else {\r\n    if (isString(scrollElement)) {\r\n      $scrollElement = document.querySelector(scrollElement)\r\n    } else if (isElement(scrollElement)) {\r\n      $scrollElement = scrollElement\r\n    }\r\n  }\r\n\r\n  return $scrollElement\r\n}\r\n\r\nexport default _getScrollElement\r\n","import easeInQuad from '../lang/easeInQuad'\nimport isFunction from '../types/isFunction'\nimport isNumber from '../types/isNumber'\nimport _getScrollElement from './_getScrollElement'\n\nlet timer = null\n\n/**\n * 指定 rootElement DOM 节点滚动到指定 top 位置\n * ========================================================================\n * @method scrollTo\n * @param {HTMLElement|Object} [scrollElement] - （必须）要滚动的 DOM 节点\n * @param {Number} top - （必须）滚动的 scrollTop 数值\n * @param {Function|Number} [afterStop] - （可选）滚动完成的回调函数或者滚动的速率值\n * @param {Number} [speed] - 可选）滚动的速率值\n */\nconst scrollTo = (scrollElement, top, afterStop, speed = 30) => {\n  const $scrollElement = _getScrollElement(scrollElement)\n  let scrollTop = $scrollElement.scrollTop\n  let step = 0\n  const distance = top - scrollTop\n  const MAX_HEIGHT = $scrollElement.scrollHeight\n  const MAX_TOP = top - MAX_HEIGHT <= 0 ? top : MAX_HEIGHT\n  const stop = () => {\n    clearTimeout(timer)\n    timer = null\n  }\n  const play = () => {\n    if (timer) {\n      stop()\n    }\n\n    step += 3\n\n    // 线上滚动\n    if (distance < 0) {\n      scrollTop -= easeInQuad(step)\n      $scrollElement.scrollTop = scrollTop\n\n      if (scrollTop <= top) {\n        $scrollElement.scrollTop = top\n        stop()\n\n        if (isFunction(afterStop)) {\n          afterStop(top)\n        }\n\n        return false\n      }\n    } else {\n      scrollTop += easeInQuad(step)\n      $scrollElement.scrollTop = scrollTop\n\n      if (scrollTop >= MAX_TOP) {\n        $scrollElement.scrollTop = MAX_TOP\n        stop()\n\n        if (isFunction(afterStop)) {\n          afterStop(MAX_TOP)\n        }\n\n        return false\n      }\n    }\n\n    timer = setTimeout(play, isNumber(afterStop) ? afterStop : speed)\n  }\n\n  play()\n}\n\nexport default scrollTo\n","/**\r\n * 检测 DOM 节点是否包含名为 className 的样式\r\n * ========================================================================\r\n * @method hasClass\r\n * @param {HTMLElement|Object} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {*}\r\n */\r\nconst hasClass = (el, className) => {\r\n  let allClass = el.className\r\n\r\n  if (!allClass) {\r\n    return false\r\n  }\r\n\r\n  return allClass.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'))\r\n}\r\n\r\nexport default hasClass\r\n","import hasClass from './hasClass'\r\n\r\n/**\r\n * 给 DOM 节点添加名为 className 的样式\r\n * ========================================================================\r\n * @method addClass\r\n * @param {HTMLElement|Object} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst addClass = (el, className) => {\r\n  let allClass = el.className\r\n\r\n  if (hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  allClass += allClass.length > 0 ? ' ' + className : className\r\n\r\n  el.className = allClass\r\n}\r\n\r\nexport default addClass\r\n","import trim from '../lang/trim'\r\nimport hasClass from './hasClass'\r\n\r\n/**\r\n * 移除 DOM 节点的 className 样式\r\n * ========================================================================\r\n * @method removeClass\r\n * @param {HTMLElement|Object} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst removeClass = (el, className) => {\r\n  let allClass = el.className\r\n\r\n  if (!allClass || !hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  allClass = trim(allClass.replace(className, ''))\r\n\r\n  el.className = allClass\r\n}\r\n\r\nexport default removeClass\r\n","import isString from '../types/isString'\r\n\r\n/**\r\n * 清楚字符串起始位置所有的空格\r\n * ========================================================================\r\n * @method trim\r\n * @param {string} str\r\n * @returns {string|Boolean}\r\n */\r\nconst trim = (str) => {\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n  return str.replace(/^\\s+|\\s+$/g, '')\r\n}\r\n\r\nexport default trim\r\n","/**\r\n * 获取 DOM 节点相对于窗口的 left （纵坐标）值\r\n * ========================================================================\r\n * @method offsetTop\r\n * @param {HTMLElement} el - DOM 节点\r\n * @returns {Number}\r\n */\r\nconst offsetTop = (el) => {\r\n  let top = el.offsetTop\r\n\r\n  if (el.offsetParent !== null) {\r\n    top += offsetTop(el.offsetParent)\r\n  }\r\n\r\n  return top\r\n}\r\n\r\nexport default offsetTop\r\n","/**\r\n * 存储订阅者（主题和处理器的）私有对象\r\n * ========================================================================\r\n * @type {{}}\r\n * @private\r\n */\r\nconst _subscribers = {}\r\n\r\nexport default _subscribers\r\n","import _subscribers from './_subscribers'\r\nimport hasOwn from '../lang/hasOwn'\r\n\r\n/**\r\n * 判断是否存在与给定 topic 完全匹配的订阅者信息\r\n * ========================================================================\r\n * @method _hasDirectSubscribersFor\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasDirectSubscribersFor = (topic) => {\r\n  return hasOwn(_subscribers, topic) && _subscribers[topic].length > 0\r\n}\r\n\r\nexport default _hasDirectSubscribersFor\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\nimport _hasSubscribers from './_hasSubscribers'\r\n\r\n/**\r\n * 判断是否存在包含 topic 指定的订阅者信息\r\n * ========================================================================\r\n * @method has\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Boolean} [isDirect] - （可选）是否为直接的主题，默认值：true\r\n * @returns {Boolean}\r\n */\r\nconst has = (topic, isDirect = true) => {\r\n  return isDirect ? _hasDirectSubscribersFor(topic) : _hasSubscribers(topic)\r\n}\r\n\r\nexport default has\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\n\r\n/**\r\n * 判断是否存在包含给定 topic 相关的订阅者信息\r\n * ========================================================================\r\n * @method _hasSubscribers\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasSubscribers = (topic) => {\r\n  let found = _hasDirectSubscribersFor(topic)\r\n  let position = topic.lastIndexOf('.')\r\n\r\n  while (!found && position !== -1) {\r\n    topic = topic.substring(0, position)\r\n    position = topic.lastIndexOf('.')\r\n    found = _hasDirectSubscribersFor(topic)\r\n  }\r\n\r\n  return found\r\n}\r\n\r\nexport default _hasSubscribers\r\n","import isTypedArray from '../types/isTypedArray'\r\nimport _subscribers from './_subscribers'\r\nimport has from './has'\r\nimport _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\n\r\n/**\r\n * （异步）发布订阅主题信息\r\n * ========================================================================\r\n * 主题默认是异步发布的。确保在消费者处理主题时，主题的发起者不会被阻止。\r\n * ========================================================================\r\n * @method emit\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Object} data - （必须）数据对象\r\n * @param {Boolean} async - (可选) 是否异步发布\r\n */\r\nconst emit = (topic, data, async = true) => {\r\n  const execute = (topic) => {\r\n    if (!_hasDirectSubscribersFor(topic)) {\r\n      return false\r\n    }\r\n\r\n    _subscribers[topic].forEach((subscriber) => {\r\n      // 针对 mqtt 消息服务返回的 Uint8Array 类似的 typed arrays 格式的数据\r\n      // 采用 toString() 方法转化为普通（JSON）字符串\r\n      const message = isTypedArray(data) ? data.toString() : data\r\n\r\n      subscriber.callback.call(subscriber.context || subscriber, message)\r\n    })\r\n  }\r\n  const deliver = () => {\r\n    let subscriber = topic\r\n    let position = topic.lastIndexOf('.')\r\n\r\n    while (position !== -1) {\r\n      subscriber = subscriber.substring(0, position)\r\n      position = subscriber.lastIndexOf('.')\r\n\r\n      execute(subscriber)\r\n    }\r\n\r\n    // 执行 topic 对应的处理器\r\n    execute(topic)\r\n    // 执行特殊 topic：'*'（监听全部消息的发布）\r\n    execute('*')\r\n  }\r\n\r\n  if (!has(topic)) {\r\n    return false\r\n  }\r\n\r\n  if (async) {\r\n    setTimeout(deliver, 10)\r\n  } else {\r\n    deliver()\r\n  }\r\n}\r\n\r\nexport default emit\r\n","import toString from '../lang/toString'\r\n/**\r\n * 判断检测数据是否为 Typed Arrays 类型的数据\r\n * ========================================================================\r\n * @param {*} val\r\n * @returns {boolean}\r\n */\r\nconst isTypedArray = (val) => {\r\n  const TYPES = [\r\n    '[object Int8Array]',\r\n    '[object Uint8Array]',\r\n    '[object Uint8ClampedArray]',\r\n    '[object Int16Array]',\r\n    '[object Uint16Array]',\r\n    '[object Int32Array]',\r\n    '[object Uint32Array]',\r\n    '[object Float32Array]',\r\n    '[object Float64Array]',\r\n    '[object BigInt64Array]',\r\n    '[object BigUint64Array]'\r\n  ]\r\n\r\n  return TYPES.indexOf(toString.call(val)) > -1\r\n}\r\n\r\nexport default isTypedArray\r\n","import Base from './base'\n\nimport isString from './utils/types/isString'\nimport isFunction from './utils/types/isFunction'\nimport isElement from './utils/types/isElement'\nimport later from './utils/lang/later'\nimport emit from './utils/event/emit'\nimport on from './utils/event/on'\nimport off from './utils/event/off'\nimport stop from './utils/event/stop'\nimport createElement from './utils/dom/createElement'\nimport scrollTo from './utils/dom/scrollTo'\nimport addClass from './utils/dom/addClass'\nimport intersection from './utils/dom/intersection'\nimport removeClass from './utils/dom/removeClass'\nimport offsetTop from './utils/dom/offsetTop'\nimport publish from './utils/observer/emit'\n\nimport _getScrollElement from './utils/dom/_getScrollElement'\nimport _paintChapters from './_paintChapters'\n\nclass Chapters extends Base {\n  constructor(options) {\n    super()\n\n    this.attrs = Chapters.DEFAULTS\n    this.$el = null\n    this.$title = null\n    this.$main = null\n    this.$list = null\n    this.$placeholder = null\n    this.$parentElement = null\n    this.$scrollElement = null\n    this.chapters = []\n    this.closed = false\n    this.active = 0\n    this.offsetTop = 0\n    this.$active = null\n    this.timer = null\n    this.playing = false\n\n    if (options) {\n      this.initialize(options)\n    }\n  }\n\n  initialize(options) {\n    let created\n    let parentElement\n    let scrollElement\n    let $parent\n\n    this.attr(options)\n    created = this.attr('created')\n    parentElement = this.attr('parentElement')\n    scrollElement = this.attr('scrollElement')\n\n    if (isString(parentElement)) {\n      $parent = document.querySelector(parentElement)\n    } else if (isElement(parentElement)) {\n      $parent = parentElement\n    }\n    this.$parentElement = $parent\n    this.$scrollElement = _getScrollElement(scrollElement)\n\n    this.chapters = this.attr('chapters')\n    this.closed = this.attr('closed')\n    this.active = this.attr('active')\n\n    if (isFunction(created)) {\n      created.call(this)\n    }\n\n    if (this.chapters.length < 1) {\n      return this\n    }\n\n    this.render().addListeners()\n\n    this.$active = document.querySelector(`#chapter-${this.active}`)\n\n    return this\n  }\n\n  isClosed() {\n    return this.closed\n  }\n\n  isSticky() {\n    const position = this.attr('position')\n    return position === 'sticky'\n  }\n\n  isFixed() {\n    const position = this.attr('position')\n    return position === 'fixed'\n  }\n\n  isInside() {\n    return this.isFixed() || this.isSticky()\n  }\n\n  isOutside() {\n    return !this.isInside()\n  }\n\n  render() {\n    const mounted = this.attr('mounted')\n    const title = this.attr('title')\n    const showCode = this.attr('showCode')\n    const customClass = this.attr('customClass')\n    const $parentElement = this.$parentElement\n    const contents = []\n    let $title = null\n    let $el\n    let $main\n    let $list\n    let $placeholder\n\n    if (!$parentElement) {\n      return this\n    }\n\n    if (this.isInside()) {\n      $title = createElement(\n        'h2',\n        {\n          className: 'outline-chapters__title'\n        },\n        [title]\n      )\n      this.$title = $title\n      contents.push($title)\n    }\n\n    $list = createElement(\n      'ul',\n      {\n        className: 'outline-chapters__list'\n      },\n      ['']\n    )\n    this.$list = $list\n\n    $placeholder = createElement(\n      'div',\n      {\n        className: 'outline-chapters__placeholder'\n      },\n      ['']\n    )\n    this.$placeholder = $placeholder\n\n    $main = createElement(\n      'div',\n      {\n        className: 'outline-chapters__main'\n      },\n      [$list, $placeholder]\n    )\n    this.$main = $main\n    contents.push($main)\n\n    $el = createElement(\n      'nav',\n      {\n        id: 'outline-chapters',\n        className: 'outline-chapters'\n      },\n      contents\n    )\n    this.$el = $el\n\n    if (this.isSticky()) {\n      addClass($el, 'outline-chapters_sticky')\n    }\n\n    if (customClass) {\n      addClass($el, customClass)\n    }\n\n    $parentElement.appendChild($el)\n    _paintChapters($list, this.chapters, showCode)\n\n    this.offsetTop = offsetTop(document.querySelector('#outline-chapters'))\n\n    if (isFunction(mounted)) {\n      mounted.call(this)\n    }\n\n    this.onObserver()\n\n    return this\n  }\n\n  highlight(id) {\n    const $anchor = this.$el.querySelector(`#outline-anchor-${id}`)\n    const HIGHLIGHT = 'outline-chapters_active'\n    const $placeholder = this.$placeholder\n    let top\n\n    if (this.$active) {\n      removeClass(this.$active, HIGHLIGHT)\n    }\n\n    this.active = parseInt($anchor.getAttribute('data-id'), 10)\n    this.$active = $anchor\n    addClass(this.$active, HIGHLIGHT)\n\n    top = 30 * this.active\n    $placeholder.style.top = `calc(0.5em + ${top}px)`\n\n    return this\n  }\n\n  sticky() {\n    const FIXED = 'outline-chapters_fixed'\n    const $el = this.$el\n    const top = this.offsetTop\n    const scrollTop = this.$scrollElement.scrollTop\n\n    if (this.isClosed()) {\n      return this\n    }\n\n    if (scrollTop >= top) {\n      addClass($el, FIXED)\n    } else {\n      removeClass($el, FIXED)\n    }\n\n    return this\n  }\n\n  scrollTo(top, after) {\n    const el = this.$scrollElement\n\n    scrollTo(el, top, after, 100)\n\n    return this\n  }\n\n  show() {\n    const HIDDEN = 'outline-chapters_hidden'\n    const opened = this.attr('afterOpened')\n\n    removeClass(this.$el, HIDDEN)\n    if (this.isInside()) {\n      removeClass(this.$parentElement, HIDDEN)\n    }\n    this.closed = false\n\n    if (isFunction(opened)) {\n      opened.call(this)\n    }\n\n    return this\n  }\n\n  hide() {\n    const HIDDEN = 'outline-chapters_hidden'\n    const closed = this.attr('afterClosed')\n\n    addClass(this.$el, HIDDEN)\n    if (this.isInside()) {\n      addClass(this.$parentElement, HIDDEN)\n    }\n    this.closed = true\n\n    if (isFunction(closed)) {\n      closed.call(this)\n    }\n\n    return this\n  }\n\n  toggle() {\n    if (this.closed) {\n      this.show()\n    } else {\n      this.hide()\n    }\n\n    return this\n  }\n\n  destroy() {\n    const beforeDestroy = this.attr('beforeDestroy')\n    const afterDestroy = this.attr('afterDestroy')\n\n    if (isFunction(beforeDestroy)) {\n      beforeDestroy.call(this)\n    }\n\n    this.removeListeners()\n    this.$parentElement.removeChild(this.$el)\n\n    this.attr(Chapters.DEFAULTS)\n    this.$el = null\n    this.$title = null\n    this.$main = null\n    this.$list = null\n    this.$placeholder = null\n    this.$parentElement = null\n    this.$scrollElement = null\n    this.chapters = []\n    this.active = 0\n    this.offsetTop = 0\n    this.$active = null\n    this.closed = false\n\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timer = null\n    }\n\n    if (isFunction(afterDestroy)) {\n      afterDestroy.call(this)\n    }\n\n    return this\n  }\n\n  onObserver() {\n    let timer = null\n\n    intersection(\n      ($heading) => {\n        const id = $heading.getAttribute('data-id')\n\n        if (this.playing) {\n          return false\n        }\n\n        if (timer) {\n          clearTimeout(timer)\n        }\n\n        timer = later(() => {\n          this.highlight(id)\n        }, 100)\n      },\n      { context: this }\n    )\n\n    return this\n  }\n\n  onSelect(evt) {\n    const $anchor = evt.delegateTarget\n    const id = $anchor.getAttribute('data-id')\n    const headingId = $anchor.href.split('#')[1]\n    const $heading = document.querySelector(`#${headingId}`)\n    const top = $heading.offsetTop\n    const min = 0\n    const max = this.$scrollElement.scrollHeight\n    const afterScroll = this.attr('afterScroll')\n    const after = () => {\n      if (isFunction(afterScroll)) {\n        afterScroll.call(this)\n      }\n\n      later(() => {\n        this.playing = false\n        publish('update:toolbar', {\n          top,\n          min,\n          max\n        })\n      })\n    }\n\n    this.playing = true\n    if (this.isFixed()) {\n      this.sticky()\n      later(() => {\n        this.scrollTo(top, after)\n        this.highlight(id)\n      }, 10)\n    } else {\n      this.scrollTo(top, after)\n      this.highlight(id)\n    }\n\n    stop(evt)\n\n    return this\n  }\n\n  onScroll() {\n    const $scrollElement = this.$scrollElement\n\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n\n    this.timer = later(() => {\n      const top = $scrollElement.scrollTop\n      const min = 0\n      const max = $scrollElement.scrollHeight - $scrollElement.clientHeight\n\n      if (this.isFixed()) {\n        this.sticky()\n      }\n\n      publish('update:toolbar', {\n        top,\n        min,\n        max\n      })\n    }, 50)\n\n    return this\n  }\n\n  addListeners() {\n    const $el = this.$el\n    const $scrollElement = this.$scrollElement\n    const tagName = $scrollElement.tagName.toLowerCase()\n    let $element = $scrollElement\n\n    if (tagName === 'html' || tagName === 'body') {\n      $element = window\n    }\n\n    on($el, '.outline-chapters__anchor', 'click', this.onSelect, this, true)\n    emit($element, 'scroll', this.onScroll, this, true)\n\n    return this\n  }\n\n  removeListeners() {\n    const $el = this.$el\n    const $scrollElement = this.$scrollElement\n    const tagName = $scrollElement.tagName.toLowerCase()\n    let $element = $scrollElement\n\n    if (tagName === 'html' || tagName === 'body') {\n      $element = window\n    }\n\n    off($el, 'click', this.onSelect)\n    off($element, 'scroll', this.onScroll)\n\n    return this\n  }\n}\n\nChapters.DEFAULTS = {\n  parentElement: '',\n  scrollElement: '',\n  selector: '',\n  active: 0,\n  closed: false,\n  showCode: true,\n  position: 'relative',\n  chapters: [],\n  created: null,\n  mounted: null,\n  afterClosed: null,\n  afterOpened: null,\n  afterScroll: null,\n  beforeDestroy: null,\n  afterDestroy: null\n}\n\nexport default Chapters\n","import createElement from './utils/dom/createElement'\r\n\r\nconst _paintChapters = (list, chapters, showCode = false) => {\r\n  chapters.forEach((chapter) => {\r\n    const pid = chapter.pid\r\n    const text = createElement(\r\n      'span',\r\n      {\r\n        className: 'outline-chapters__text'\r\n      },\r\n      [chapter.text]\r\n    )\r\n    const link = createElement(\r\n      'a',\r\n      {\r\n        id: `outline-anchor-${chapter.id}`,\r\n        className: 'outline-chapters__anchor',\r\n        href: '#' + chapter.rel,\r\n        rel: chapter.rel,\r\n        'data-id': chapter.id\r\n      },\r\n      [text]\r\n    )\r\n    let parent\r\n    let ul\r\n    let li\r\n    let code\r\n    let children = []\r\n\r\n    if (showCode) {\r\n      code = createElement(\r\n        'span',\r\n        {\r\n          className: 'outline-chapters__code',\r\n          'data-id': chapter.id\r\n        },\r\n        [chapter.code]\r\n      )\r\n\r\n      link.insertBefore(code, link.firstChild)\r\n    }\r\n\r\n    children.push(link)\r\n\r\n    li = createElement(\r\n      'li',\r\n      {\r\n        id: `outline-chapter-${chapter.id}`,\r\n        className: 'outline-chapters__item',\r\n        'data-id': chapter.id\r\n      },\r\n      children\r\n    )\r\n\r\n    if (pid === -1) {\r\n      list.appendChild(li)\r\n    } else {\r\n      parent = document.getElementById('outline-chapter-' + pid)\r\n      ul = document.getElementById('outline-subject-' + pid)\r\n\r\n      if (!ul) {\r\n        ul = createElement(\r\n          'ul',\r\n          {\r\n            id: 'outline-subject-' + pid,\r\n            className: 'outline-chapters__subject'\r\n          },\r\n          [li]\r\n        )\r\n\r\n        parent.appendChild(ul)\r\n      } else {\r\n        ul.appendChild(li)\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport default _paintChapters\r\n","/**\r\n * 检测数据是否为 Number 类型\r\n * ========================================================================\r\n * @method isNumber\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isNumber = (o) => {\r\n  return typeof o === 'number'\r\n}\r\n\r\nexport default isNumber\r\n","import isFunction from '../types/isFunction'\r\n\r\n/**\r\n * 通用的 IntersectionObserver 观察者处理器\r\n * ========================================================================\r\n * @method intersection\r\n * @param {Function} fn\r\n * @param {Object} [props]\r\n * @param {Object|HTMLElement} [props.root]\r\n * @param {String} [props.selector]\r\n * @param {Object} [props.context]\r\n * @param {String} [props.attr]\r\n * @param {String} [props.rootMargin]\r\n */\r\nconst intersection = (fn, props) => {\r\n  const root = props.root || null\r\n  const selector = props.selector || '.outline-heading'\r\n  const context = props.context || null\r\n  const rootMargin = props.rootMargin || '0px 0px -90% 0px'\r\n  const options = {\r\n    rootMargin: rootMargin\r\n  }\r\n  const Observer = new IntersectionObserver((entries) => {\r\n    entries.forEach((entry) => {\r\n      if (entry.intersectionRatio > 0) {\r\n        if (isFunction(fn)) {\r\n          fn.call(context || entry.target, entry.target)\r\n        }\r\n      }\r\n    })\r\n  }, options)\r\n\r\n  if (root) {\r\n    options.root = root\r\n  }\r\n\r\n  document.querySelectorAll(selector).forEach((section) => {\r\n    Observer.observe(section)\r\n  })\r\n}\r\n\r\nexport default intersection\r\n","/**\r\n * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n * ========================================================================\r\n * @method stop\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 工作台输出：'a'\r\n *   // 不会触发事件冒泡，输出：'你点击了导航栏'\r\n *   // 也不会切换到 href 属性的页面，阻止了点击链接的默认行为\r\n *   stopEvent(evt)\r\n * })\r\n */\r\nconst stop = function (evt) {\r\n  evt.stopPropagation()\r\n  evt.preventDefault()\r\n}\r\n\r\nexport default stop\r\n","import isFunction from '../types/isFunction'\r\nimport off from './off'\r\n\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定代理事件\r\n * ========================================================================\r\n * @method emit\r\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n * @param {Function|Object} fn - （必须） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst emit = (el, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n  const listener = function (evt) {\r\n    let overrideContext = context || el\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    // 仅触发一次\r\n    /* istanbul ignore else */\r\n    if (once === true) {\r\n      off(el, type, listener)\r\n    }\r\n\r\n    fn.call(overrideContext, evt, data)\r\n  }\r\n\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default emit\r\n"],"names":["isString","str","hasOwn","obj","prop","hasOwnProperty","Object","prototype","call","toString","Base","constructor","options","this","attrs","initialize","attr","render","addListeners","value","o","apply","origin","source","keys","forEach","arguments","length","destroy","removeListeners","reload","isFunction","val","isElement","nodeName","tagName","nodeType","later","fn","delay","setTimeout","CAPTURE_EVENTS","_off","el","type","capture","indexOf","_delegateListener","listeners","_listeners","index","listener","i","handler","splice","_delete","removeEventListener","purgeElement","recurse","$element","document","querySelector","$children","childNodes","filter","getListeners","$child","off","matches","selector","sel","replace","msMatchesSelector","getParentOrHost","host","parentNode","on","data","context","once","evt","target","getTarget","delegateTarget","ctx","includeCTX","closest","overrideContext","push","addEventListener","createElement","attributes","children","element","toLowerCase","style","cssText","setAttribute","className","Array","isArray","child","childNode","createTextNode","appendChild","easeInQuad","x","_getScrollElement","scrollElement","$rootElements","$scrollElement","querySelectorAll","scrollTop","timer","hasClass","allClass","match","RegExp","addClass","removeClass","offsetTop","top","offsetParent","_subscribers","_hasDirectSubscribersFor","topic","has","isDirect","found","position","lastIndexOf","substring","_hasSubscribers","emit","async","execute","subscriber","message","callback","deliver","Chapters","super","DEFAULTS","$el","$title","$main","$list","$placeholder","$parentElement","chapters","closed","active","$active","playing","created","parentElement","$parent","isClosed","isSticky","isFixed","isInside","isOutside","mounted","title","showCode","customClass","contents","id","list","chapter","pid","text","link","href","rel","parent","ul","li","code","insertBefore","firstChild","getElementById","_paintChapters","onObserver","highlight","$anchor","HIGHLIGHT","parseInt","getAttribute","sticky","FIXED","scrollTo","after","afterStop","speed","step","distance","MAX_HEIGHT","scrollHeight","MAX_TOP","stop","clearTimeout","play","show","HIDDEN","opened","hide","toggle","beforeDestroy","afterDestroy","removeChild","props","root","rootMargin","Observer","IntersectionObserver","entries","entry","intersectionRatio","section","observe","intersection","$heading","onSelect","headingId","split","max","afterScroll","publish","min","stopPropagation","preventDefault","onScroll","clientHeight","window","afterClosed","afterOpened"],"mappings":"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"}