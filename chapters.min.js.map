{"version":3,"file":"chapters.min.js","sources":["utils/types/isString.js","utils/lang/hasOwn.js","utils/lang/toString.js","utils/types/isFunction.js","utils/types/isObject.js","utils/observer/_subscribers.js","utils/observer/_hasDirectSubscribersFor.js","utils/observer/has.js","utils/observer/_hasSubscribers.js","utils/observer/emit.js","utils/types/isTypedArray.js","utils/lang/guid.js","utils/observer/_removeSubscriber.js","utils/observer/off.js","utils/observer/_removeSubscriberByToken.js","base.js","utils/lang/extend.js","utils/observer/on.js","utils/types/isElement.js","utils/lang/later.js","utils/event/enum.js","utils/event/_off.js","utils/event/_delete.js","utils/event/purgeElement.js","utils/event/getListeners.js","utils/event/off.js","utils/event/at.js","utils/dom/matches.js","utils/dom/getParentOrHost.js","utils/event/on.js","utils/event/getTarget.js","utils/dom/resolveTextNode.js","utils/dom/closest.js","utils/types/isArray.js","utils/types/isDOM.js","utils/types/isHTMLCollection.js","utils/types/isFragment.js","utils/types/isTextNode.js","utils/dom/createElement.js","utils/dom/setAttributes.js","utils/dom/setAttribute.js","utils/lang/easeInQuad.js","utils/dom/_getScrollElement.js","utils/dom/hasClass.js","utils/dom/addClass.js","utils/dom/removeClass.js","utils/lang/trim.js","utils/dom/offsetTop.js","utils/dom/getStyle.js","utils/dom/setProperty.js","utils/lang/cloneDeep.js","utils/lang/timeSlice.js","chapters.js","_paintChapters.js","utils/dom/scrollTo.js","utils/dom/intersection.js","utils/event/stop.js"],"sourcesContent":["/**\r\n * 检测数据是否为 String 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} str\r\n * @returns {boolean}\r\n */\r\nconst isString = (str) => {\r\n  return typeof str === 'string'\r\n}\r\n\r\nexport default isString\r\n","/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n  return obj && hasOwnProperty.call(obj, prop)\r\n}\r\n\r\nexport default hasOwn\r\n","/**\r\n * Object 对象原型上的 toString 方法\r\n * ========================================================================\r\n * @method toString\r\n * @param {*} val\r\n * @returns {string}\r\n */\r\nconst toString = (val) => {\r\n  return Object.prototype.toString.apply(val)\r\n}\r\n\r\nexport default toString\r\n","import toString from '../lang/toString'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  return typeof val === 'function' || toString(val) === '[object Function]'\r\n}\r\n\r\nexport default isFunction\r\n","import toString from '../lang/toString'\r\nimport isFunction from './isFunction'\r\n\r\n/**\r\n * 检测数据是否为 Object 类型\r\n * ========================================================================\r\n * @method isObject\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isObject = (o) => {\r\n  return (\r\n    (toString(o) === '[object Object]' ||\r\n      typeof o === 'object' ||\r\n      isFunction(o)) &&\r\n    o !== null\r\n  )\r\n}\r\n\r\nexport default isObject\r\n","/**\r\n * 存储订阅者（主题和处理器的）私有对象\r\n * ========================================================================\r\n * @type {{}}\r\n * @private\r\n */\r\nconst _subscribers = {}\r\n\r\nexport default _subscribers\r\n","import _subscribers from './_subscribers'\r\nimport hasOwn from '../lang/hasOwn'\r\n\r\n/**\r\n * 判断是否存在与给定 topic 完全匹配的订阅者信息\r\n * ========================================================================\r\n * @method _hasDirectSubscribersFor\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasDirectSubscribersFor = (topic) => {\r\n  return hasOwn(_subscribers, topic) && _subscribers[topic].length > 0\r\n}\r\n\r\nexport default _hasDirectSubscribersFor\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\nimport _hasSubscribers from './_hasSubscribers'\r\n\r\n/**\r\n * 判断是否存在包含 topic 指定的订阅者信息\r\n * ========================================================================\r\n * @method has\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Boolean} [isDirect] - （可选）是否为直接的主题，默认值：true\r\n * @returns {Boolean}\r\n */\r\nconst has = (topic, isDirect = true) => {\r\n  return isDirect ? _hasDirectSubscribersFor(topic) : _hasSubscribers(topic)\r\n}\r\n\r\nexport default has\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\n\r\n/**\r\n * 判断是否存在包含给定 topic 相关的订阅者信息\r\n * ========================================================================\r\n * @method _hasSubscribers\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasSubscribers = (topic) => {\r\n  let found = _hasDirectSubscribersFor(topic)\r\n  let position = topic.lastIndexOf('.')\r\n\r\n  while (!found && position !== -1) {\r\n    topic = topic.substring(0, position)\r\n    position = topic.lastIndexOf('.')\r\n    found = _hasDirectSubscribersFor(topic)\r\n  }\r\n\r\n  return found\r\n}\r\n\r\nexport default _hasSubscribers\r\n","import isTypedArray from '../types/isTypedArray'\r\nimport _subscribers from './_subscribers'\r\nimport has from './has'\r\nimport _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\n\r\n/**\r\n * （异步）发布订阅主题信息\r\n * ========================================================================\r\n * 主题默认是异步发布的。确保在消费者处理主题时，主题的发起者不会被阻止。\r\n * ========================================================================\r\n * @method emit\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Object} [data] - （可选）数据对象\r\n * @param {Boolean} [async] - (可选) 是否异步发布\r\n */\r\nconst emit = (topic, data, async = true) => {\r\n  const execute = (topic) => {\r\n    if (!_hasDirectSubscribersFor(topic)) {\r\n      return false\r\n    }\r\n\r\n    _subscribers[topic].forEach((subscriber) => {\r\n      // 针对 mqtt 消息服务返回的 Uint8Array 类似的 typed arrays 格式的数据\r\n      // 采用 toString() 方法转化为普通（JSON）字符串\r\n      const message = isTypedArray(data) ? data.toString() : data\r\n\r\n      subscriber.callback.call(subscriber.context || subscriber, message)\r\n    })\r\n  }\r\n  const deliver = () => {\r\n    let subscriber = topic\r\n    let position = topic.lastIndexOf('.')\r\n\r\n    while (position !== -1) {\r\n      subscriber = subscriber.substring(0, position)\r\n      position = subscriber.lastIndexOf('.')\r\n\r\n      execute(subscriber)\r\n    }\r\n\r\n    // 执行 topic 对应的处理器\r\n    execute(topic)\r\n    // 执行特殊 topic：'*'（监听全部消息的发布）\r\n    execute('*')\r\n  }\r\n\r\n  if (!has(topic)) {\r\n    return false\r\n  }\r\n\r\n  if (async) {\r\n    setTimeout(deliver, 10)\r\n  } else {\r\n    deliver()\r\n  }\r\n}\r\n\r\nexport default emit\r\n","import toString from '../lang/toString'\r\n/**\r\n * 判断检测数据是否为 Typed Arrays 类型的数据\r\n * ========================================================================\r\n * @param {*} val\r\n * @returns {boolean}\r\n */\r\nconst isTypedArray = (val) => {\r\n  const TYPES = [\r\n    '[object Int8Array]',\r\n    '[object Uint8Array]',\r\n    '[object Uint8ClampedArray]',\r\n    '[object Int16Array]',\r\n    '[object Uint16Array]',\r\n    '[object Int32Array]',\r\n    '[object Uint32Array]',\r\n    '[object Float32Array]',\r\n    '[object Float64Array]',\r\n    '[object BigInt64Array]',\r\n    '[object BigUint64Array]'\r\n  ]\r\n\r\n  return TYPES.indexOf(toString(val)) > -1\r\n}\r\n\r\nexport default isTypedArray\r\n","/**\r\n * 生成唯一 id 字符串的函数\r\n * ========================================================================\r\n * @method guid\r\n * @param {String} [prefix] - 生成 id 的前缀字符串\r\n * @return {String} 返回一个表示唯一 id 的字符串\r\n */\r\nconst guid = (() => {\r\n  let uuid = 0\r\n\r\n  return (prefix) => {\r\n    uuid += 1\r\n\r\n    return prefix ? prefix + '-' + uuid : 'guid-' + uuid\r\n  }\r\n})()\r\n\r\nexport default guid\r\n","import _subscribers from './_subscribers'\r\nimport hasOwn from '../lang/hasOwn'\r\n\r\n/**\r\n * 删除与给定 topic 相同的订阅者信息\r\n * ========================================================================\r\n * @method _removeSubscriber\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _removeSubscriber = (topic) => {\r\n  if (!hasOwn(_subscribers, topic)) {\r\n    return false\r\n  }\r\n\r\n  delete _subscribers[topic]\r\n}\r\n\r\nexport default _removeSubscriber\r\n","import has from './has'\r\nimport _removeSubscriber from './_removeSubscriber'\r\nimport _removeSubscriberByToken from './_removeSubscriberByToken'\r\n\r\n/**\r\n * 取消订阅主题\r\n * ========================================================================\r\n * @method off\r\n * @param {String} topic - （必须）订阅的主题\r\n * @param {Function|String} [token] - （可选）订阅主题的处理器函数或者唯一 Id 值\r\n */\r\nconst off = (topic, token) => {\r\n  if (!has(topic)) {\r\n    return false\r\n  }\r\n\r\n  if (token) {\r\n    _removeSubscriberByToken(token)\r\n  } else {\r\n    _removeSubscriber(topic)\r\n  }\r\n}\r\n\r\nexport default off\r\n","import _subscribers from './_subscribers'\r\nimport _removeSubscriber from './_removeSubscriber'\r\n\r\n/**\r\n * 通过订阅者 token 值删除订阅者信息\r\n * ========================================================================\r\n * @method _removeSubscriberByToken\r\n * @param {String} token - 订阅者 token 字符串\r\n * @returns {boolean}\r\n * @private\r\n */\r\nconst _removeSubscriberByToken = (token) => {\r\n  const keys = Object.keys(_subscribers)\r\n  let index = -1\r\n\r\n  if (!token || keys.length < 1) {\r\n    return false\r\n  }\r\n\r\n  keys.forEach((subject) => {\r\n    const subscriber = _subscribers[subject]\r\n    let topic\r\n\r\n    subscriber.forEach((execution, j) => {\r\n      if (execution.callback === token || execution.token === token) {\r\n        topic = execution.topic\r\n        subscriber.splice(index, j)\r\n      }\r\n    })\r\n\r\n    /* istanbul ignore else */\r\n    if (subscriber.length < 1) {\r\n      _removeSubscriber(topic)\r\n    }\r\n  })\r\n}\r\n\r\nexport default _removeSubscriberByToken\r\n","import isString from './utils/types/isString'\r\nimport hasOwn from './utils/lang/hasOwn'\r\nimport isObject from './utils/types/isObject'\r\nimport extend from './utils/lang/extend'\r\nimport publish from './utils/observer/emit'\r\nimport subscribe from './utils/observer/on'\r\nimport unsubscribe from './utils/observer/off'\r\n\r\nclass Base {\r\n  constructor(options) {\r\n    this.attrs = {}\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n  }\r\n\r\n  initialize(options) {\r\n    this.attr(options).render().addListeners()\r\n    return this\r\n  }\r\n\r\n  attr(prop, value) {\r\n    const attrs = this.attrs\r\n\r\n    if (isString(prop)) {\r\n      // 只能扩展 attrs 中已有的属性\r\n      if (value && hasOwn(attrs, prop)) {\r\n        // 更新单个配置信息\r\n        attrs[prop] = value\r\n        return this\r\n      }\r\n\r\n      // 只传递 prop 参数，则返回对应的属性值\r\n      return attrs[prop]\r\n    } else if (isObject(prop)) {\r\n      // 批量更新配置信息\r\n      extend(attrs, prop)\r\n\r\n      return this\r\n    } else if (arguments.length === 0) {\r\n      // 不传递参数，直接返回整个\r\n      return attrs\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  render() {\r\n    return this\r\n  }\r\n\r\n  destroy() {\r\n    this.removeListeners()\r\n    return this\r\n  }\r\n\r\n  reload(options) {\r\n    this.destroy().initialize(this.attr(options))\r\n    return this\r\n  }\r\n\r\n  $emit(event, data) {\r\n    publish(event, data)\r\n    return this\r\n  }\r\n\r\n  $on(event, callback) {\r\n    subscribe(event, callback, this)\r\n    return this\r\n  }\r\n\r\n  $off(event, callback) {\r\n    unsubscribe(event, callback)\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    return this\r\n  }\r\n}\r\n\r\nexport default Base\r\n","import hasOwn from './hasOwn'\r\n\r\n/**\r\n * 扩展对象\r\n * ========================================================================\r\n * @method extend\r\n * @param {Object} origin\r\n * @param {Object} source\r\n */\r\nconst extend = (origin, source) => {\r\n  const keys = Object.keys(source)\r\n\r\n  keys.forEach((prop) => {\r\n    if (hasOwn(source, prop)) {\r\n      origin[prop] = source[prop]\r\n    }\r\n  })\r\n}\r\n\r\nexport default extend\r\n","import _subscribers from './_subscribers'\r\nimport isFunction from '../types/isFunction'\r\nimport guid from '../lang/guid'\r\n\r\n/**\r\n * 订阅主题，并给出处理器函数\r\n * ========================================================================\r\n * @method on\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Function} handler - （必须）主题的处理器函数\r\n * @param {Object} [context] - （可选）指定 this 执行上下文\r\n * @return {String} - 唯一的 token 字符串，例如：'guid-1'。\r\n */\r\nconst on = (topic, handler, context = null) => {\r\n  const token = guid()\r\n  let subject = typeof topic === 'symbol' ? topic.toString() : topic\r\n\r\n  if (!isFunction(handler)) {\r\n    return ''\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (!_subscribers[subject]) {\r\n    _subscribers[subject] = []\r\n  }\r\n\r\n  _subscribers[subject].push({\r\n    topic: subject,\r\n    callback: handler,\r\n    context,\r\n    token\r\n  })\r\n\r\n  return token\r\n}\r\n\r\nexport default on\r\n","import isObject from './isObject'\r\n\r\n/**\r\n * 检测数据是否为 HTMLElement DOM 节点\r\n * ========================================================================\r\n * @method isElement\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isElement = (o) => {\r\n  return !!(isObject(o) && o.nodeName && o.tagName && o.nodeType === 1)\r\n}\r\n\r\nexport default isElement\r\n","import isFunction from '../types/isFunction'\r\n\r\n/**\r\n * later - 延迟执行方法\r\n * ========================================================================\r\n * @method later\r\n * @param {Function} fn\r\n * @param {Number} [delay]\r\n * @returns {number|boolean}\r\n */\r\nconst later = (fn, delay = 300) => {\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  return setTimeout(() => {\r\n    fn()\r\n  }, delay)\r\n}\r\n\r\nexport default later\r\n","export const CAPTURE_EVENTS = [\r\n  'focusout',\r\n  'blur',\r\n  'focusin',\r\n  'focus',\r\n  'load',\r\n  'unload',\r\n  'mouseenter',\r\n  'mouseleave'\r\n]\r\n","import { CAPTURE_EVENTS } from './enum'\r\nimport _delete from './_delete'\r\n\r\n/**\r\n * （私有方法）取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method _off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须）事件处理器回调函数\r\n * @private\r\n */\r\nconst _off = (el, type, fn) => {\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  /* istanbul ignore else */\r\n  if (fn._delegateListener) {\r\n    fn = fn._delegateListener\r\n    delete fn._delegateListener\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  _delete(el, type, fn)\r\n\r\n  el.removeEventListener(type, fn, capture)\r\n}\r\n\r\nexport default _off\r\n","/**\r\n * 删除 DOM 元素缓存的 _listeners 数据\r\n * ========================================================================\r\n * @method _delete\r\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\r\n * @param {String} type - 事件类型（名称）\r\n * @param {Function} [fn] - 事件处理器回调函数\r\n */\r\nconst _delete = function (el, type, fn) {\r\n  const listeners = el._listeners\r\n  let index = -1\r\n\r\n  if (listeners.length < 1) {\r\n    return false\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  listeners.forEach((listener, i) => {\r\n    const handler = listener.fn\r\n\r\n    if (type === listener.type) {\r\n      index = i\r\n\r\n      if (handler === fn) {\r\n        index = i\r\n      }\r\n    }\r\n  })\r\n\r\n  /* istanbul ignore else */\r\n  if (index > -1) {\r\n    listeners.splice(index, 1)\r\n  }\r\n}\r\n\r\nexport default _delete\r\n","import isString from '../types/isString'\r\nimport isElement from '../types/isElement'\r\nimport getListeners from './getListeners'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 销毁（type 类型的）代理事件绑定\r\n * ========================================================================\r\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\r\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\r\n * ========================================================================\r\n * @method purgeElement\r\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\r\n * @param {String|Boolean} type - （必须）事件类型\r\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\r\n */\r\nconst purgeElement = function (el, type, recurse = false) {\r\n  const $element = isString(el) ? document.querySelector(el) : el\r\n  const $children = $element.childNodes\r\n  const listeners = getListeners($element, type)\r\n\r\n  listeners.forEach((listener) => {\r\n    _off($element, listener.type, listener.fn)\r\n  })\r\n\r\n  if (\r\n    (recurse || type === true || arguments.length === 1) &&\r\n    $element &&\r\n    $children\r\n  ) {\r\n    $children.forEach(($child) => {\r\n      if (isElement($child)) {\r\n        purgeElement($child, type, recurse)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default purgeElement\r\n","import isString from '../types/isString'\r\n\r\n/**\r\n * 获取 DOM 元素（type 事件类型）事件绑定信息\r\n * ========================================================================\r\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\r\n * ========================================================================\r\n * @methods getListeners\r\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\r\n * @param {String} [type] - （可选）事件类型\r\n * @returns {Array} - 已绑定的事件信息\r\n */\r\nconst getListeners = (el, type) => {\r\n  let listeners = el._listeners || []\r\n\r\n  if (isString(type) && type) {\r\n    listeners = listeners.filter((listener) => {\r\n      return listener.type === type\r\n    })\r\n  }\r\n\r\n  return listeners\r\n}\r\n\r\nexport default getListeners\r\n","import purgeElement from './purgeElement'\r\nimport isFunction from '../types/isFunction'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method off\r\n * @param {HTMLElement|Object} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} [fn] - （可选）事件处理器回调函数\r\n */\r\nconst off = (el, type, fn) => {\r\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\r\n  if (!isFunction(fn)) {\r\n    return purgeElement(el, type)\r\n  }\r\n\r\n  _off(el, type, fn)\r\n}\r\n\r\nexport default off\r\n","import isFunction from '../types/isFunction'\r\nimport off from './off'\r\n\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定事件\r\n * ========================================================================\r\n * @method at\r\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n * @param {Function|Object} fn - （必须） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst at = (el, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n  const listener = function (evt) {\r\n    let overrideContext = context || el\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    // 仅触发一次\r\n    /* istanbul ignore else */\r\n    if (once === true) {\r\n      off(el, type, listener)\r\n    }\r\n\r\n    fn.call(overrideContext, evt, data)\r\n  }\r\n\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default at\r\n","/**\r\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\r\n * ========================================================================\r\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\r\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\r\n * 标 DOM 元素是否为事件代理所期望触发的目标。\r\n * ========================================================================\r\n * @method matches\r\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\r\n * @returns {Boolean}\r\n */\r\nconst matches = (el, selector = '') => {\r\n  const sel = selector.replace(/^>/i, '')\r\n\r\n  if (!selector || !sel || !el) {\r\n    return false\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.matches) {\r\n    return el.matches(sel)\r\n  } else if (el.msMatchesSelector) {\r\n    return el.msMatchesSelector(sel)\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default matches\r\n","/**\r\n * 获取 DOM 元素的父节点\r\n * ========================================================================\r\n * @method getParentOrHost\r\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\r\n * @returns {*|HTMLElement}\r\n */\r\nconst getParentOrHost = (el) => {\r\n  return el.host && el !== document && el.host.nodeType\r\n    ? el.host\r\n    : el.parentNode\r\n}\r\n\r\nexport default getParentOrHost\r\n","import closest from '../dom/closest'\r\nimport off from './off'\r\nimport getTarget from './getTarget'\r\n\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定代理事件\r\n * ========================================================================\r\n * @method on\r\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n * @param {Function|Object} fn - （可选） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst on = (el, selector, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  const listener = function (evt) {\r\n    const target = getTarget(evt)\r\n    // 通过 Element.matches 方法获得点击的目标元素\r\n    const delegateTarget = closest(target, selector, el)\r\n    let overrideContext = context || el\r\n\r\n    evt.delegateTarget = delegateTarget\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (delegateTarget) {\r\n      // 仅触发一次\r\n      /* istanbul ignore else */\r\n      if (once === true) {\r\n        off(el, type, listener)\r\n      }\r\n\r\n      fn.call(overrideContext, evt, data)\r\n    }\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    selector,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default on\r\n","import resolveTextNode from '../dom/resolveTextNode'\r\n\r\n/**\r\n * 返回触发事件的 target DOM 元素\r\n * ========================================================================\r\n * @method getTarget\r\n * @param {Event} evt - Event 对象\r\n * @return {HTMLElement} - Event 对象的 target DOM 元素\r\n */\r\nconst getTarget = function (evt) {\r\n  const target = evt.target\r\n\r\n  return resolveTextNode(target)\r\n}\r\n\r\nexport default getTarget\r\n","/**\r\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\r\n * resolveTextNode() 方法则会返回实际的目标节点。\r\n * ========================================================================\r\n * @method resolveTextNode\r\n * @param {HTMLElement|Text} el - 要解析的节点\r\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\r\n */\r\nconst resolveTextNode = function (el) {\r\n  if (el && el.nodeType === 3) {\r\n    return el.parentNode\r\n  }\r\n\r\n  return el\r\n}\r\n\r\nexport default resolveTextNode\r\n","import matches from './matches'\r\nimport getParentOrHost from './getParentOrHost'\r\n\r\n/**\r\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\r\n * ========================================================================\r\n * @method closest\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）DOM 元素的选择其\r\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\r\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\r\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\r\n */\r\nconst closest = (el, selector, ctx, includeCTX) => {\r\n  const context = ctx || document\r\n\r\n  if (!el) {\r\n    return null\r\n  }\r\n\r\n  do {\r\n    /* istanbul ignore else */\r\n    if (\r\n      (selector != null &&\r\n        (selector.startsWith('>')\r\n          ? el.parentNode === context && matches(el, selector)\r\n          : matches(el, selector))) ||\r\n      (includeCTX && el === context)\r\n    ) {\r\n      return el\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (el === context) {\r\n      break\r\n    }\r\n\r\n    /* jshint boss:true */\r\n  } while ((el = getParentOrHost(el)))\r\n}\r\n\r\nexport default closest\r\n","import toString from '../lang/toString'\r\n\r\n/**\r\n * 检测数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isArray = (o) => {\r\n  if (Array.isArray) {\r\n    return Array.isArray(o)\r\n  } else {\r\n    return toString(o) === '[object Array]'\r\n  }\r\n}\r\n\r\nexport default isArray\r\n","import isObject from './isObject'\r\nimport isElement from './isElement'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isFragment from './isFragment'\r\nimport isTextNode from './isTextNode'\r\n\r\nconst isDOM = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (isElement(el) || isHTMLCollection(el) || isFragment(el) || isTextNode(el))\r\n  )\r\n}\r\n\r\nexport default isDOM\r\n","import toString from '../lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isHTMLCollection = (el) => {\r\n  return !!(isObject(el) && toString(el) === '[object NodeList]')\r\n}\r\n\r\nexport default isHTMLCollection\r\n","import toString from '../lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isFragment = (fragment) => {\r\n  return !!(\r\n    isObject(fragment) && toString(fragment) === '[object DocumentFragment]'\r\n  )\r\n}\r\n\r\nexport default isFragment\r\n","import toString from '../lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isTextNode = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (toString(el) === '[object Text]' || (el.tagName && el.nodeType === 3))\r\n  )\r\n}\r\n\r\nexport default isTextNode\r\n","import isObject from '../types/isObject'\r\nimport isString from '../types/isString'\r\nimport isArray from '../types/isArray'\r\nimport isDOM from '../types/isDOM'\r\nimport setAttributes from './setAttributes'\r\n\r\n/**\r\n * 创建 DOM 节点，并添加属性和子节点\r\n * ========================================================================\r\n * @method createElement\r\n * @param {String} tagName - 标签名称\r\n * @param {Object|Array|HTMLElement|DocumentFragment|String} attrs - 属性对象或者子节点\r\n * @param {Array|HTMLElement|DocumentFragment|String} [children] - 子节点数组\r\n * @returns {HTMLElement}\r\n */\r\nconst createElement = (tagName, attrs, children) => {\r\n  const $fragment = document.createDocumentFragment()\r\n  const $el = document.createElement(tagName)\r\n  const isValidChild = (child) => {\r\n    return isDOM(child) || isString(child)\r\n  }\r\n  const append = (child) => {\r\n    let $child\r\n\r\n    if (!isValidChild(child)) {\r\n      return false\r\n    }\r\n\r\n    if (isDOM(child)) {\r\n      $child = child\r\n    } else if (isString(child)) {\r\n      $child = document.createTextNode(child)\r\n    }\r\n\r\n    $fragment.appendChild($child)\r\n  }\r\n\r\n  if (isObject(attrs)) {\r\n    setAttributes($el, attrs)\r\n  } else if (isArray(attrs) && attrs.every((attr) => isValidChild(attr))) {\r\n    attrs.forEach((child) => {\r\n      append(child)\r\n    })\r\n  } else if (isDOM(attrs)) {\r\n    append(attrs)\r\n  } else if (isString(attrs)) {\r\n    append(document.createTextNode(attrs))\r\n  }\r\n\r\n  if (isArray(children)) {\r\n    children.forEach((child) => {\r\n      append(child)\r\n    })\r\n  } else {\r\n    append(children)\r\n  }\r\n\r\n  $el.appendChild($fragment)\r\n\r\n  return $el\r\n}\r\n\r\nexport default createElement\r\n","import isObject from '../types/isObject'\r\nimport hasOwn from '../lang/hasOwn'\r\nimport setAttribute from './setAttribute'\r\n\r\nconst setAttributes = (el, attrs) => {\r\n  if (!el || !isObject(attrs)) {\r\n    return false\r\n  }\r\n\r\n  Object.keys(attrs).forEach((attr) => {\r\n    const value = attrs[attr]\r\n    if (hasOwn(attrs, attr)) {\r\n      setAttribute(el, attr, value)\r\n    }\r\n  })\r\n}\r\n\r\nexport default setAttributes\r\n","/**\r\n * 给 DOM 节点设置属性/值\r\n * ========================================================================\r\n * @method setAttribute\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} attr - 属性名称\r\n * @param {String|Number|Boolean} value - 属性值\r\n */\r\nconst setAttribute = (el, attr, value) => {\r\n  let tagName = el.tagName.toLowerCase()\r\n\r\n  switch (attr) {\r\n    case 'style':\r\n      el.style.cssText = value\r\n      break\r\n    case 'value':\r\n      if (tagName === 'input' || tagName === 'textarea') {\r\n        el.value = value\r\n      } else {\r\n        el.setAttribute(attr, value)\r\n      }\r\n      break\r\n    case 'htmlFor':\r\n      el.setAttribute('for', value)\r\n      break\r\n    case 'className':\r\n      el.className = value\r\n      break\r\n    case 'innerHTML':\r\n      el.innerHTML = value\r\n      break\r\n    case 'innerText':\r\n      el.innerText = value\r\n      break\r\n    default:\r\n      el.setAttribute(attr, value)\r\n      break\r\n  }\r\n}\r\n\r\nexport default setAttribute\r\n","/**\r\n * 返回给定值的平方值\r\n * ========================================================================\r\n * @method easeInQuad\r\n * @param {Number} x\r\n * @returns {number}\r\n */\r\nconst easeInQuad = (x) => {\r\n  return x * x\r\n}\r\n\r\nexport default easeInQuad\r\n","import isString from '../types/isString'\r\nimport isElement from '../types/isElement'\r\n\r\n/**\r\n * 通过给的 scrollElement 参数，获取滚动 DOM 元素\r\n * ========================================================================\r\n * @method _getScrollElement\r\n * @param {String|HTMLElement} scrollElement\r\n * @returns {Element}\r\n * @private\r\n */\r\nconst _getScrollElement = (scrollElement = null) => {\r\n  let $rootElements\r\n  let $scrollElement\r\n\r\n  if (!scrollElement) {\r\n    $rootElements = document.querySelectorAll('html,body')\r\n    $scrollElement =\r\n      $rootElements[0].scrollTop - $rootElements[1].scrollTop >= 0\r\n        ? $rootElements[0]\r\n        : $rootElements[1]\r\n  } else {\r\n    if (isString(scrollElement)) {\r\n      $scrollElement = document.querySelector(scrollElement)\r\n    } else if (isElement(scrollElement)) {\r\n      $scrollElement = scrollElement\r\n    }\r\n  }\r\n\r\n  return $scrollElement\r\n}\r\n\r\nexport default _getScrollElement\r\n","import isElement from '../types/isElement'\r\n/**\r\n * 检测 DOM 节点是否包含名为 className 的样式\r\n * ========================================================================\r\n * @method hasClass\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst hasClass = (el, className) => {\r\n  const pattern = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)')\r\n  let allClass\r\n  let classList\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  allClass = el.className\r\n\r\n  if (!allClass) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.contains) {\r\n    return el.classList.contains(className)\r\n  }\r\n\r\n  return !!pattern.exec(allClass)\r\n}\r\n\r\nexport default hasClass\r\n","import hasClass from './hasClass'\r\n\r\n/**\r\n * 给 DOM 节点添加名为 className 的样式\r\n * ========================================================================\r\n * @method addClass\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst addClass = (el, className) => {\r\n  let classList\r\n  let allClass\r\n\r\n  if (hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.add) {\r\n    classList.add(className)\r\n  } else {\r\n    allClass = el.className\r\n    allClass += allClass.length > 0 ? ' ' + className : className\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\nexport default addClass\r\n","import trim from '../lang/trim'\r\nimport hasClass from './hasClass'\r\n\r\n/**\r\n * 移除 DOM 节点的 className 样式\r\n * ========================================================================\r\n * @method removeClass\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst removeClass = (el, className) => {\r\n  let allClass = el.className\r\n  let classList\r\n\r\n  if (!allClass || !hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.remove) {\r\n    classList.remove(className)\r\n  } else {\r\n    allClass = trim(allClass.replace(className, ''))\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\nexport default removeClass\r\n","import isString from '../types/isString'\r\n\r\n/**\r\n * 清楚字符串起始位置所有的空格\r\n * ========================================================================\r\n * @method trim\r\n * @param {string} str\r\n * @returns {string|Boolean}\r\n */\r\nconst trim = (str) => {\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n  return str.replace(/(^\\s+)|(\\s+$)/g, '')\r\n}\r\n\r\nexport default trim\r\n","/**\r\n * 获取 DOM 节点相对于窗口的 left （纵坐标）值\r\n * ========================================================================\r\n * @method offsetTop\r\n * @param {HTMLElement} el - DOM 节点\r\n * @returns {Number}\r\n */\r\nconst offsetTop = (el) => {\r\n  let top = el.offsetTop\r\n\r\n  if (el.offsetParent !== null) {\r\n    top += offsetTop(el.offsetParent)\r\n  }\r\n\r\n  return top\r\n}\r\n\r\nexport default offsetTop\r\n","/**\r\n * 获取HTML元素的某个CSS样式值\r\n * ====================================================\r\n * @param el\r\n * @param ruleName\r\n * @returns {*}\r\n */\r\nconst getStyle = (el, ruleName) => {\r\n  return getComputedStyle(el)[ruleName]\r\n}\r\n\r\nexport default getStyle\r\n","const setProperty = (prop, value) => {\r\n  const documentElement = document.documentElement\r\n  documentElement.style.setProperty(prop, value)\r\n}\r\n\r\nexport default setProperty\r\n","import isObject from '../types/isObject'\r\nimport isArray from '../types/isArray'\r\n\r\n/**\r\n * 深拷贝对象函数\r\n * ========================================================================\r\n * @methods cloneDeep\r\n * @param {Object} obj - 深拷贝的对象\r\n * @returns {Array|Object|*}\r\n *\r\n * @example\r\n * const arr = cloneDeep([2,3,4,6])\r\n * => [2,3,4,6]\r\n */\r\nconst cloneDeep = (obj) => {\r\n  let clone = {}\r\n\r\n  if (obj === null) {\r\n    return null\r\n  }\r\n\r\n  if (isArray(obj)) {\r\n    clone = Array.from(obj)\r\n  } else {\r\n    clone = Object.assign({}, obj)\r\n    Object.keys(clone).forEach((key) => {\r\n      return (clone[key] = isObject(obj[key]) ? cloneDeep(obj[key]) : obj[key])\r\n    })\r\n  }\r\n\r\n  return clone\r\n}\r\n\r\nexport default cloneDeep\r\n","/**\r\n * timeSlice.js 时间切片功能函数\r\n * ====================================================\r\n * Created By: Yaohaixiao\r\n * Update: 2023.09.04\r\n */\r\nimport isFunction from '../types/isFunction'\r\nimport later from './later'\r\n\r\nconst queue = []\r\nlet isHandling\r\nlet done\r\n\r\n// Shim from https://developers.google.com/web/updates/2015/08/using-requestidlecallback\r\nif (typeof window.requestIdleCallback === 'undefined') {\r\n  window.requestIdleCallback = function (cb) {\r\n    const start = Date.now()\r\n    return later(function () {\r\n      cb({\r\n        didTimeout: false,\r\n        timeRemaining: function () {\r\n          return Math.max(0, 50 - (Date.now() - start))\r\n        }\r\n      })\r\n    }, 10)\r\n  }\r\n\r\n  window.cancelIdleCallback = function (id) {\r\n    clearTimeout(id)\r\n  }\r\n}\r\n\r\nfunction runIdle(idleDeadline) {\r\n  while (idleDeadline.timeRemaining() > 0 && queue.length) {\r\n    const fn = queue.shift()\r\n\r\n    if (!isFunction(fn)) {\r\n      return false\r\n    }\r\n\r\n    fn()\r\n  }\r\n\r\n  if (queue.length) {\r\n    isHandling = requestIdleCallback(runIdle)\r\n  } else {\r\n    isHandling = 0\r\n\r\n    if (isFunction(done)) {\r\n      done()\r\n      done = null\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 时间切片功能函数：主要用于优化长时任务的性能，将长时任务分解成\r\n * 多个短时间任务\r\n * ====================================================\r\n * @param {Function} fn - 需要在空闲时执行的回调函数\r\n * @param {Function} afterComplete - queen 的\r\n * @return {(function(): (boolean|undefined))|*|boolean}\r\n */\r\nconst timeSlice = (fn, afterComplete = null) => {\r\n  queue.push(fn)\r\n\r\n  if (isFunction(afterComplete)) {\r\n    done = afterComplete\r\n  }\r\n\r\n  if (!isHandling) {\r\n    requestIdleCallback(runIdle)\r\n  }\r\n}\r\n\r\nexport default timeSlice\r\n","import Base from './base'\r\n\r\nimport isString from './utils/types/isString'\r\nimport isFunction from './utils/types/isFunction'\r\nimport isElement from './utils/types/isElement'\r\nimport later from './utils/lang/later'\r\nimport at from './utils/event/at'\r\nimport on from './utils/event/on'\r\nimport off from './utils/event/off'\r\nimport stop from './utils/event/stop'\r\nimport createElement from './utils/dom/createElement'\r\nimport scrollTo from './utils/dom/scrollTo'\r\nimport addClass from './utils/dom/addClass'\r\nimport intersection from './utils/dom/intersection'\r\nimport removeClass from './utils/dom/removeClass'\r\nimport offsetTop from './utils/dom/offsetTop'\r\nimport getStyle from './utils/dom/getStyle'\r\nimport setProperty from './utils/dom/setProperty'\r\nimport _getScrollElement from './utils/dom/_getScrollElement'\r\nimport cloneDeep from './utils/lang/cloneDeep'\r\n\r\nimport _paintChapters from './_paintChapters'\r\n\r\nclass Chapters extends Base {\r\n  constructor(options) {\r\n    super()\r\n\r\n    this.attrs = cloneDeep(Chapters.DEFAULTS)\r\n\r\n    this._reset()\r\n\r\n    this.offsetWidth = 0\r\n    this.playing = false\r\n    this.scrollTimer = null\r\n    this.resizeTimer = null\r\n    this.Observer = null\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n  }\r\n\r\n  _reset() {\r\n    this.$el = null\r\n    this.$title = null\r\n    this.$main = null\r\n    this.$list = null\r\n    this.$placeholder = null\r\n    this.$parentElement = null\r\n    this.$scrollElement = null\r\n    this.$active = null\r\n\r\n    this.chapters = []\r\n    this.active = 0\r\n    this.offsetTop = 0\r\n    this.closed = false\r\n\r\n    return this\r\n  }\r\n\r\n  initialize(options) {\r\n    let created\r\n    let parentElement\r\n    let scrollElement\r\n    let $parent\r\n\r\n    this.attr(options)\r\n    created = this.attr('created')\r\n    parentElement = this.attr('parentElement')\r\n    scrollElement = this.attr('scrollElement')\r\n\r\n    if (isString(parentElement)) {\r\n      $parent = document.querySelector(parentElement)\r\n    } else if (isElement(parentElement)) {\r\n      $parent = parentElement\r\n    }\r\n    this.$parentElement = $parent\r\n    this.$scrollElement = _getScrollElement(scrollElement)\r\n\r\n    this.chapters = this.attr('chapters')\r\n    this.closed = this.attr('closed')\r\n    this.active = this.attr('active')\r\n\r\n    if (isFunction(created)) {\r\n      created.call(this)\r\n    }\r\n\r\n    if (this.chapters.length < 1) {\r\n      return this\r\n    }\r\n\r\n    this.render().addListeners()\r\n\r\n    this.$active = document.querySelector(`#chapter-${this.active}`)\r\n\r\n    return this\r\n  }\r\n\r\n  isClosed() {\r\n    return this.closed\r\n  }\r\n\r\n  isSticky() {\r\n    const position = this.attr('position')\r\n    return position === 'sticky'\r\n  }\r\n\r\n  isFixed() {\r\n    const position = this.attr('position')\r\n    return position === 'fixed'\r\n  }\r\n\r\n  isInside() {\r\n    return this.isFixed() || this.isSticky()\r\n  }\r\n\r\n  isOutside() {\r\n    return !this.isInside()\r\n  }\r\n\r\n  count() {\r\n    return this.chapters.length\r\n  }\r\n\r\n  _paintEdge() {\r\n    const $fragment = document.createDocumentFragment()\r\n    const STICKY = 'outline-chapters_sticky'\r\n    const HIDDEN = 'outline-chapters_hidden'\r\n    const title = this.attr('title')\r\n    const customClass = this.attr('customClass')\r\n    const $parentElement = this.$parentElement\r\n    const contents = []\r\n    let $title = null\r\n    let $el\r\n    let $main\r\n    let $list\r\n    let $placeholder\r\n\r\n    if (!$parentElement) {\r\n      return this\r\n    }\r\n\r\n    if (this.isInside() && title) {\r\n      $title = createElement(\r\n        'h2',\r\n        {\r\n          className: 'outline-chapters__title'\r\n        },\r\n        title\r\n      )\r\n      this.$title = $title\r\n      contents.push($title)\r\n    }\r\n\r\n    $list = createElement('ul', {\r\n      // 为优化性能，添加了 _fixed 和 _hidden\r\n      // fixed 为了让 $list 脱离流布局\r\n      // hidden 让 $list 不可见\r\n      className: `outline-chapters__list`\r\n    })\r\n    this.$list = $list\r\n\r\n    $placeholder = createElement('div', {\r\n      className: 'outline-chapters__placeholder'\r\n    })\r\n    this.$placeholder = $placeholder\r\n\r\n    $main = createElement(\r\n      'div',\r\n      {\r\n        className: 'outline-chapters__main'\r\n      },\r\n      [$list, $placeholder]\r\n    )\r\n    this.$main = $main\r\n    contents.push($main)\r\n\r\n    $el = createElement(\r\n      'nav',\r\n      {\r\n        id: 'outline-chapters',\r\n        className: `outline-chapters ${HIDDEN}`\r\n      },\r\n      contents\r\n    )\r\n    this.$el = $el\r\n\r\n    if (this.isSticky()) {\r\n      this.calculateStickyHeight()\r\n      addClass($el, STICKY)\r\n    }\r\n\r\n    if (customClass) {\r\n      addClass($el, customClass)\r\n    }\r\n    $fragment.appendChild($el)\r\n    $parentElement.appendChild($fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  render() {\r\n    const HIDDEN = 'outline-chapters_hidden'\r\n    const showCode = this.attr('showCode')\r\n    const mounted = this.attr('mounted')\r\n    const $parentElement = this.$parentElement\r\n    const chapters = this.chapters\r\n    const count = this.count()\r\n    let $el\r\n    let $list\r\n\r\n    if (!$parentElement || chapters.length < 1) {\r\n      return this\r\n    }\r\n\r\n    this._paintEdge()\r\n\r\n    $el = this.$el\r\n    $list = this.$list\r\n    _paintChapters($list, chapters, showCode)\r\n    removeClass($el, HIDDEN)\r\n\r\n    later(() => {\r\n      this.positionPlaceholder(this.active)\r\n    }, 60)\r\n\r\n    this.offsetTop = offsetTop($el)\r\n    this.offsetWidth = $el.offsetWidth\r\n\r\n    if (this.isFixed()) {\r\n      this.sticky()\r\n      setProperty('--outline-chapters-width', `${this.offsetWidth}px`)\r\n    }\r\n\r\n    if (isFunction(mounted)) {\r\n      mounted.call(this)\r\n    }\r\n\r\n    if (count < 400) {\r\n      this.onObserver()\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  positionPlaceholder(index) {\r\n    const $main = this.$main\r\n    const $list = this.$list\r\n    const $placeholder = this.$placeholder\r\n    const $anchor = $list.querySelector('.outline-chapters__anchor')\r\n    const mainPaddingTop = parseInt(getStyle($main, 'padding-top'), 10)\r\n    const mainBorderTop = parseInt(getStyle($main, 'border-top-width'), 10)\r\n    const placeholderPaddingTop = parseInt(getStyle($list, 'padding-top'), 10)\r\n    const placeholderMarginTop = parseInt(getStyle($list, 'margin-top'), 10)\r\n    const placeholderBorderTop = parseInt(\r\n      getStyle($list, 'border-top-width'),\r\n      10\r\n    )\r\n    let height = $anchor.offsetHeight\r\n    let offsetTop = 0\r\n    let top\r\n\r\n    if (mainPaddingTop) {\r\n      offsetTop += mainPaddingTop\r\n    }\r\n\r\n    if (placeholderPaddingTop) {\r\n      offsetTop += placeholderPaddingTop\r\n    }\r\n\r\n    if (placeholderMarginTop) {\r\n      offsetTop += placeholderMarginTop\r\n    }\r\n\r\n    if (mainBorderTop) {\r\n      offsetTop += mainBorderTop\r\n    }\r\n\r\n    if (placeholderBorderTop) {\r\n      offsetTop += placeholderBorderTop\r\n    }\r\n\r\n    top = height * index\r\n    // top:calc(${offsetTop}px + ${top}px);\r\n    $placeholder.style.cssText = `transform: translateY(${\r\n      offsetTop + top\r\n    }px);height:${height}px;`\r\n\r\n    return this\r\n  }\r\n\r\n  highlight(id) {\r\n    const $anchor = this.$el.querySelector(`#chapter__anchor-${id}`)\r\n    const HIGHLIGHT = 'outline-chapters_active'\r\n\r\n    if (!$anchor) {\r\n      return this\r\n    }\r\n\r\n    if (this.$active) {\r\n      removeClass(this.$active, HIGHLIGHT)\r\n    }\r\n\r\n    this.active = parseInt($anchor.getAttribute('data-id'), 10)\r\n    this.$active = $anchor\r\n    addClass(this.$active, HIGHLIGHT)\r\n\r\n    this.positionPlaceholder(this.active)\r\n\r\n    return this\r\n  }\r\n\r\n  sticky() {\r\n    const afterSticky = this.attr('afterSticky')\r\n    const FIXED = 'outline-chapters_fixed'\r\n    const $el = this.$el\r\n    const top = this.offsetTop\r\n    const scrollTop = this.$scrollElement.scrollTop\r\n    let isStickying\r\n\r\n    if (!this.isFixed()) {\r\n      return this\r\n    }\r\n\r\n    isStickying = scrollTop >= top\r\n\r\n    if (isStickying) {\r\n      addClass($el, FIXED)\r\n    } else {\r\n      removeClass($el, FIXED)\r\n    }\r\n\r\n    if (isFunction(afterSticky)) {\r\n      afterSticky.call(this, this.isClosed(), isStickying)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  calculateStickyHeight() {\r\n    const documentElement = document.documentElement\r\n    const height = Math.max(\r\n      documentElement.clientHeight || 0,\r\n      window.innerHeight || 0\r\n    )\r\n    setProperty('--outline-sticky-height', `${height}px`)\r\n    return this\r\n  }\r\n\r\n  scrollTo(top, after) {\r\n    const el = this.$scrollElement\r\n\r\n    scrollTo(el, top, after)\r\n\r\n    return this\r\n  }\r\n\r\n  show() {\r\n    const FOLDED = 'outline-chapters_folded'\r\n    const HIDDEN = 'outline-chapters_hidden'\r\n    const opened = this.attr('afterOpened')\r\n    const $el = this.$el\r\n    const $parent = this.$parentElement\r\n\r\n    if (this.isInside()) {\r\n      removeClass($parent, HIDDEN)\r\n      later(() => {\r\n        removeClass($parent, FOLDED)\r\n      }, 30)\r\n    } else {\r\n      removeClass($el, HIDDEN)\r\n    }\r\n    this.closed = false\r\n\r\n    if (isFunction(opened)) {\r\n      opened.call(this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  hide() {\r\n    const FOLDED = 'outline-chapters_folded'\r\n    const HIDDEN = 'outline-chapters_hidden'\r\n    const closed = this.attr('afterClosed')\r\n    const $el = this.$el\r\n    const $parent = this.$parentElement\r\n\r\n    if (this.isInside()) {\r\n      addClass($parent, FOLDED)\r\n      later(() => {\r\n        addClass($parent, HIDDEN)\r\n      }, 30)\r\n    } else {\r\n      addClass($el, HIDDEN)\r\n    }\r\n    this.closed = true\r\n\r\n    if (isFunction(closed)) {\r\n      closed.call(this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  toggle() {\r\n    const afterToggle = this.attr('afterToggle')\r\n    const top = this.offsetTop\r\n    const scrollTop = this.$scrollElement.scrollTop\r\n    let isStickying\r\n\r\n    if (this.isClosed()) {\r\n      this.show()\r\n    } else {\r\n      this.hide()\r\n    }\r\n\r\n    if (isFunction(afterToggle)) {\r\n      later(() => {\r\n        isStickying = scrollTop >= top\r\n        afterToggle.call(this, this.isClosed(), isStickying)\r\n      })\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  destroy() {\r\n    const beforeDestroy = this.attr('beforeDestroy')\r\n    const afterDestroy = this.attr('afterDestroy')\r\n\r\n    if (isFunction(beforeDestroy)) {\r\n      beforeDestroy.call(this)\r\n    }\r\n\r\n    this.removeListeners()\r\n    this.$parentElement.removeChild(this.$el)\r\n\r\n    this.attr(Chapters.DEFAULTS)._reset()\r\n\r\n    if (this.scrollTimer) {\r\n      clearTimeout(this.scrollTimer)\r\n      this.scrollTimer = null\r\n    }\r\n\r\n    if (this.resizeTimer) {\r\n      clearTimeout(this.resizeTimer)\r\n      this.resizeTimer = null\r\n    }\r\n\r\n    if (isFunction(afterDestroy)) {\r\n      afterDestroy.call(this)\r\n    }\r\n\r\n    if (this.Observer) {\r\n      this.Observer = null\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  onObserver() {\r\n    const selector = this.attr('selector')\r\n    let timer = null\r\n\r\n    this.Observer = intersection(\r\n      ($heading) => {\r\n        const id = $heading.getAttribute('data-id')\r\n\r\n        if (this.playing) {\r\n          return false\r\n        }\r\n\r\n        if (timer) {\r\n          clearTimeout(timer)\r\n        }\r\n\r\n        timer = later(() => {\r\n          this.highlight(id)\r\n        }, 100)\r\n      },\r\n      {\r\n        selector,\r\n        context: this\r\n      }\r\n    )\r\n\r\n    return this\r\n  }\r\n\r\n  onSelect(evt) {\r\n    const stickyHeight = this.attr('stickyHeight')\r\n    const $anchor = evt.delegateTarget\r\n    const id = $anchor.getAttribute('data-id')\r\n    const headingId = $anchor.href.split('#')[1]\r\n    const $heading = document.querySelector(`#${headingId}`)\r\n    const top = offsetTop($heading) - (stickyHeight + 10)\r\n    const min = 0\r\n    const max = this.$scrollElement.scrollHeight\r\n    const afterScroll = this.attr('afterScroll')\r\n    const after = () => {\r\n      if (isFunction(afterScroll)) {\r\n        afterScroll.call(this, 'chapter')\r\n      }\r\n\r\n      later(() => {\r\n        this.playing = false\r\n        this.$emit('toolbar:update', {\r\n          top,\r\n          min,\r\n          max\r\n        })\r\n      })\r\n    }\r\n\r\n    this.playing = true\r\n    if (this.isFixed()) {\r\n      this.sticky()\r\n      later(() => {\r\n        this.scrollTo(top, after)\r\n        this.highlight(id)\r\n      }, 10)\r\n    } else {\r\n      this.scrollTo(top, after)\r\n      this.highlight(id)\r\n    }\r\n\r\n    stop(evt)\r\n\r\n    return this\r\n  }\r\n\r\n  onScroll() {\r\n    const $scrollElement = this.$scrollElement\r\n\r\n    if (this.scrollTimer) {\r\n      clearTimeout(this.scrollTimer)\r\n    }\r\n\r\n    this.scrollTimer = later(() => {\r\n      const top = $scrollElement.scrollTop\r\n      const min = 0\r\n      const max = $scrollElement.scrollHeight - $scrollElement.clientHeight\r\n\r\n      if (this.isFixed()) {\r\n        this.sticky()\r\n      }\r\n\r\n      this.$emit('toolbar:update', {\r\n        top,\r\n        min,\r\n        max\r\n      })\r\n    }, 100)\r\n\r\n    return this\r\n  }\r\n\r\n  onResize() {\r\n    if (this.resizeTimer) {\r\n      clearTimeout(this.resizeTimer)\r\n    }\r\n\r\n    this.resizeTimer = later(() => {\r\n      this.calculateStickyHeight()\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    const $el = this.$el\r\n    const $scrollElement = this.$scrollElement\r\n    const tagName = $scrollElement.tagName.toLowerCase()\r\n    let $element = $scrollElement\r\n\r\n    if (tagName === 'html' || tagName === 'body') {\r\n      $element = window\r\n    }\r\n\r\n    on($el, '.outline-chapters__anchor', 'click', this.onSelect, this, true)\r\n    at($element, 'scroll', this.onScroll, this, true)\r\n    if (this.isSticky()) {\r\n      at(window, 'resize', this.onResize, this, true)\r\n    }\r\n    this.$on('anchors:all:paint', this.onObserver, this)\r\n\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    const selector = this.attr('selector')\r\n    const $el = this.$el\r\n    const $scrollElement = this.$scrollElement\r\n    const tagName = $scrollElement.tagName.toLowerCase()\r\n    let $element = $scrollElement\r\n\r\n    if (tagName === 'html' || tagName === 'body') {\r\n      $element = window\r\n    }\r\n\r\n    off($el, 'click', this.onSelect)\r\n    off($element, 'scroll', this.onScroll)\r\n\r\n    if (this.isSticky()) {\r\n      at(window, 'resize', this.onResize)\r\n    }\r\n\r\n    this.$off('anchors:all:paint')\r\n\r\n    if (this.Observer) {\r\n      document.querySelectorAll(selector).forEach((section) => {\r\n        this.Observer.unobserve(section)\r\n      })\r\n    }\r\n\r\n    return this\r\n  }\r\n}\r\n\r\nChapters.DEFAULTS = {\r\n  parentElement: '',\r\n  scrollElement: '',\r\n  selector: '.outline-heading',\r\n  active: 0,\r\n  closed: false,\r\n  showCode: true,\r\n  position: 'relative',\r\n  stickyHeight: 0,\r\n  chapters: [],\r\n  created: null,\r\n  mounted: null,\r\n  afterClosed: null,\r\n  afterOpened: null,\r\n  afterScroll: null,\r\n  beforeDestroy: null,\r\n  afterDestroy: null,\r\n  afterSticky: null\r\n}\r\n\r\nexport default Chapters\r\n","import createElement from './utils/dom/createElement'\r\nimport timeSlice from './utils/lang/timeSlice'\r\n\r\nconst _paintChapters = ($list, chapters, showCode = false) => {\r\n  const LIMIT = 600\r\n  const count = chapters.length\r\n  const clones = [...chapters]\r\n  const paint = (parts) => {\r\n    const byId = (id) => $list.querySelector(`#${id}`)\r\n\r\n    parts.forEach((chapter) => {\r\n      const pid = chapter.pid\r\n      const id = chapter.id\r\n      const rel = chapter.rel\r\n      const children = []\r\n      const $text = createElement(\r\n        'span',\r\n        {\r\n          className: 'outline-chapters__text'\r\n        },\r\n        chapter.text\r\n      )\r\n      let $link\r\n      let $code\r\n      let $li\r\n      let $subject\r\n      let $chapter\r\n\r\n      if (showCode) {\r\n        $code = createElement(\r\n          'span',\r\n          {\r\n            className: 'outline-chapters__code',\r\n            'data-id': id\r\n          },\r\n          chapter.code\r\n        )\r\n\r\n        children.push($code)\r\n      }\r\n\r\n      children.push($text)\r\n\r\n      $link = createElement(\r\n        'a',\r\n        {\r\n          id: `chapter__anchor-${id}`,\r\n          className: 'outline-chapters__anchor',\r\n          href: '#' + rel,\r\n          rel: rel,\r\n          'data-id': id\r\n        },\r\n        children\r\n      )\r\n\r\n      $li = createElement(\r\n        'li',\r\n        {\r\n          id: `chapter-${id}`,\r\n          className: 'outline-chapters__item',\r\n          'data-id': id\r\n        },\r\n        $link\r\n      )\r\n\r\n      if (pid === -1) {\r\n        $list.appendChild($li)\r\n      } else {\r\n        $chapter = byId(`chapter-${pid}`)\r\n        $subject = byId(`subject-${pid}`)\r\n\r\n        if (!$subject) {\r\n          $subject = createElement(\r\n            'ul',\r\n            {\r\n              id: 'subject-' + pid,\r\n              className: 'outline-chapters__subject'\r\n            },\r\n            $li\r\n          )\r\n\r\n          $chapter.appendChild($subject)\r\n        } else {\r\n          $subject.appendChild($li)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  if (count > LIMIT) {\r\n    // 同步绘制\r\n    paint(clones.splice(0, LIMIT))\r\n    // 剩余的采用 timeSlice 机制绘制\r\n    while (clones.length > 0) {\r\n      const once = clones.splice(0, LIMIT)\r\n      timeSlice(() => {\r\n        paint(once)\r\n      })\r\n    }\r\n  } else {\r\n    paint(clones)\r\n  }\r\n}\r\n\r\nexport default _paintChapters\r\n","import easeInQuad from '../lang/easeInQuad'\r\nimport isFunction from '../types/isFunction'\r\nimport _getScrollElement from './_getScrollElement'\r\n\r\n/**\r\n * 指定 rootElement DOM 节点滚动到指定 top 位置\r\n * ========================================================================\r\n * @method scrollTo\r\n * @param {HTMLElement|Object} [scrollElement] - （必须）要滚动的 DOM 节点\r\n * @param {Number} top - （必须）滚动的 scrollTop 数值\r\n * @param {Function} [afterStop] - （可选）滚动完成的回调函数\r\n */\r\nconst scrollTo = (scrollElement, top, afterStop) => {\r\n  const $scrollElement = _getScrollElement(scrollElement)\r\n  let scrollTop = $scrollElement.scrollTop\r\n  let step = 0\r\n  const distance = top - scrollTop\r\n  const MAX_HEIGHT = $scrollElement.scrollHeight\r\n  const MAX_TOP = top - MAX_HEIGHT <= 0 ? top : MAX_HEIGHT\r\n  const stop = (top) => {\r\n    if (isFunction(afterStop)) {\r\n      afterStop(top)\r\n    }\r\n\r\n    return false\r\n  }\r\n  const play = () => {\r\n    step += 1\r\n\r\n    // 向上滚动\r\n    if (distance < 0) {\r\n      scrollTop -= easeInQuad(step)\r\n      $scrollElement.scrollTop = scrollTop\r\n\r\n      if (scrollTop <= top) {\r\n        $scrollElement.scrollTop = top\r\n        return stop(top)\r\n      }\r\n    } else {\r\n      scrollTop += easeInQuad(step)\r\n      $scrollElement.scrollTop = scrollTop\r\n\r\n      if (scrollTop >= MAX_TOP) {\r\n        $scrollElement.scrollTop = MAX_TOP\r\n        return stop(MAX_TOP)\r\n      }\r\n    }\r\n\r\n    requestAnimationFrame(play)\r\n  }\r\n\r\n  requestAnimationFrame(play)\r\n}\r\n\r\nexport default scrollTo\r\n","import isFunction from '../types/isFunction'\r\nimport isElement from '../types/isElement'\r\n\r\n/**\r\n * 通用的 IntersectionObserver 观察者处理器\r\n * ========================================================================\r\n * @method intersection\r\n * @param {Function} fn\r\n * @param {Object} [props]\r\n * @param {Object|HTMLElement} [props.root]\r\n * @param {String} [props.selector]\r\n * @param {Object} [props.context]\r\n * @param {String} [props.attr]\r\n * @param {String} [props.rootMargin]\r\n */\r\nconst intersection = (fn, props = {}) => {\r\n  const root = props.root || null\r\n  const selector = props.selector || '.outline-heading'\r\n  const context = props.context || null\r\n  const rootMargin = props.rootMargin || '0px 0px -90% 0px'\r\n  const options = {\r\n    rootMargin: rootMargin\r\n  }\r\n  const Observer = new IntersectionObserver((entries) => {\r\n    entries.forEach((entry) => {\r\n      if (entry.intersectionRatio > 0) {\r\n        if (isFunction(fn)) {\r\n          fn.call(context || entry.target, entry.target)\r\n        }\r\n      }\r\n    })\r\n  }, options)\r\n  const $root = isElement(root) ? root : document\r\n\r\n  if (root) {\r\n    options.root = root\r\n  }\r\n\r\n  $root.querySelectorAll(selector).forEach((section) => {\r\n    Observer.observe(section)\r\n  })\r\n\r\n  return Observer\r\n}\r\n\r\nexport default intersection\r\n","/**\r\n * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n * ========================================================================\r\n * @method stop\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 工作台输出：'a'\r\n *   // 不会触发事件冒泡，输出：'你点击了导航栏'\r\n *   // 也不会切换到 href 属性的页面，阻止了点击链接的默认行为\r\n *   stopEvent(evt)\r\n * })\r\n */\r\nconst stop = function (evt) {\r\n  evt.stopPropagation()\r\n  evt.preventDefault()\r\n}\r\n\r\nexport default stop\r\n"],"names":["isString","str","hasOwn","obj","prop","hasOwnProperty","Object","prototype","call","toString","val","apply","isFunction","isObject","o","_subscribers","_hasDirectSubscribersFor","topic","length","has","isDirect","found","position","lastIndexOf","substring","_hasSubscribers","emit","data","async","execute","forEach","subscriber","message","indexOf","callback","context","deliver","setTimeout","guid","uuid","prefix","_removeSubscriber","off","token","keys","subject","execution","j","splice","_removeSubscriberByToken","Base","constructor","options","this","attrs","initialize","attr","render","addListeners","value","origin","source","arguments","destroy","removeListeners","reload","$emit","event","publish","$on","handler","push","subscribe","$off","unsubscribe","isElement","nodeName","tagName","nodeType","later","fn","delay","CAPTURE_EVENTS","_off","el","type","capture","_delegateListener","listeners","_listeners","index","listener","i","_delete","removeEventListener","purgeElement","recurse","$element","document","querySelector","$children","childNodes","filter","getListeners","$child","at","once","evt","overrideContext","addEventListener","matches","selector","sel","replace","msMatchesSelector","getParentOrHost","host","parentNode","on","target","getTarget","delegateTarget","ctx","includeCTX","startsWith","closest","isArray","Array","isDOM","isHTMLCollection","fragment","isTextNode","createElement","children","$fragment","createDocumentFragment","$el","isValidChild","child","append","createTextNode","appendChild","toLowerCase","style","cssText","setAttribute","className","innerHTML","innerText","setAttributes","every","easeInQuad","x","_getScrollElement","scrollElement","$rootElements","$scrollElement","querySelectorAll","scrollTop","hasClass","pattern","RegExp","allClass","classList","contains","exec","addClass","add","removeClass","remove","offsetTop","top","offsetParent","getStyle","ruleName","getComputedStyle","setProperty","documentElement","cloneDeep","clone","from","assign","key","queue","isHandling","done","runIdle","idleDeadline","timeRemaining","shift","requestIdleCallback","window","cb","start","Date","now","didTimeout","Math","max","cancelIdleCallback","id","clearTimeout","timeSlice","afterComplete","Chapters","super","DEFAULTS","_reset","offsetWidth","playing","scrollTimer","resizeTimer","Observer","$title","$main","$list","$placeholder","$parentElement","$active","chapters","active","closed","created","parentElement","$parent","isClosed","isSticky","isFixed","isInside","isOutside","count","_paintEdge","title","customClass","contents","calculateStickyHeight","showCode","mounted","clones","paint","parts","byId","chapter","pid","rel","$text","text","$link","$code","$li","$subject","$chapter","code","href","_paintChapters","positionPlaceholder","sticky","onObserver","$anchor","mainPaddingTop","parseInt","mainBorderTop","placeholderPaddingTop","placeholderMarginTop","placeholderBorderTop","height","offsetHeight","highlight","HIGHLIGHT","getAttribute","afterSticky","FIXED","isStickying","clientHeight","innerHeight","scrollTo","after","afterStop","step","distance","MAX_HEIGHT","scrollHeight","MAX_TOP","stop","play","requestAnimationFrame","show","HIDDEN","opened","hide","toggle","afterToggle","beforeDestroy","afterDestroy","removeChild","timer","props","root","rootMargin","IntersectionObserver","entries","entry","intersectionRatio","$root","section","observe","intersection","$heading","onSelect","stickyHeight","headingId","split","afterScroll","min","stopPropagation","preventDefault","onScroll","onResize","unobserve","afterClosed","afterOpened"],"mappings":"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"}