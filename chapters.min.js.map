{"version":3,"file":"chapters.min.js","sources":["src/utils/types/isString.js","src/utils/lang/hasOwn.js","src/utils/lang/toString.js","src/utils/types/isFunction.js","src/utils/types/isObject.js","src/base.js","src/utils/lang/extend.js","src/utils/types/isElement.js","src/utils/lang/later.js","src/utils/event/enum.js","src/utils/event/_off.js","src/utils/event/_delete.js","src/utils/event/purgeElement.js","src/utils/event/getListeners.js","src/utils/event/off.js","src/utils/dom/matches.js","src/utils/dom/getParentOrHost.js","src/utils/event/on.js","src/utils/event/getTarget.js","src/utils/dom/resolveTextNode.js","src/utils/dom/closest.js","src/utils/types/isArray.js","src/utils/types/isDOM.js","src/utils/types/isHTMLCollection.js","src/utils/types/isFragment.js","src/utils/types/isTextNode.js","src/utils/dom/createElement.js","src/utils/dom/setAttribute.js","src/utils/lang/easeInQuad.js","src/utils/dom/_getScrollElement.js","src/utils/dom/scrollTo.js","src/utils/dom/hasClass.js","src/utils/dom/addClass.js","src/utils/dom/removeClass.js","src/utils/lang/trim.js","src/utils/dom/offsetTop.js","src/utils/observer/_subscribers.js","src/utils/observer/_hasDirectSubscribersFor.js","src/utils/observer/has.js","src/utils/observer/_hasSubscribers.js","src/utils/observer/emit.js","src/utils/types/isTypedArray.js","src/chapters.js","src/_paintChapters.js","src/utils/types/isNumber.js","src/utils/dom/intersection.js","src/utils/event/stop.js","src/utils/event/emit.js"],"sourcesContent":["/**\n * 检测数据是否为 String 类型\n * ========================================================================\n * @method isArray\n * @param {*} str\n * @returns {boolean}\n */\nconst isString = (str) => {\n  return typeof str === 'string'\n}\n\nexport default isString\n","/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  const hasOwnProperty = Object.prototype.hasOwnProperty\n  return obj && hasOwnProperty.call(obj, prop)\n}\n\nexport default hasOwn\n","const toString = Object.prototype.toString\n\n/**\n * Object 对象原型上的 toString 方法\n * ========================================================================\n * @method toString\n * @param {*} val\n * @returns {string}\n */\nexport default toString\n","import toString from '../lang/toString'\n\n/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @param {*} val - （必须）待检测的数据\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  return (\n    typeof val === 'function' || toString.apply(val) === '[object Function]'\n  )\n}\n\nexport default isFunction\n","import toString from '../lang/toString'\nimport isFunction from '../types/isFunction'\n\n/**\n * 检测数据是否为 Object 类型\n * ========================================================================\n * @method isObject\n * @param {*} o\n * @returns {boolean}\n */\nconst isObject = (o) => {\n  return (\n    (toString.apply(o) === '[object Object]' ||\n      typeof o === 'object' ||\n      isFunction(o)) &&\n    o !== null\n  )\n}\n\nexport default isObject\n","import isString from './utils/types/isString'\r\nimport hasOwn from './utils/lang/hasOwn'\r\nimport isObject from './utils/types/isObject'\r\nimport extend from './utils/lang/extend'\r\n\r\nclass Base {\r\n  constructor(options) {\r\n    this.attrs = {}\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n  }\r\n\r\n  initialize(options) {\r\n    this.attr(options).render().addListeners()\r\n    return this\r\n  }\r\n\r\n  attr(prop, value) {\r\n    const attrs = this.attrs\r\n\r\n    if (isString(prop)) {\r\n      // 只能扩展 attrs 中已有的属性\r\n      if (value && hasOwn(attrs, prop)) {\r\n        // 更新单个配置信息\r\n        attrs[prop] = value\r\n        return this\r\n      }\r\n\r\n      // 只传递 prop 参数，则返回对应的属性值\r\n      return attrs[prop]\r\n    } else if (isObject(prop)) {\r\n      // 批量更新配置信息\r\n      extend(attrs, prop)\r\n\r\n      return this\r\n    } else if (arguments.length === 0) {\r\n      // 不传递参数，直接返回整个\r\n      return attrs\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  render() {\r\n    return this\r\n  }\r\n\r\n  destroy() {\r\n    this.removeListeners()\r\n    return this\r\n  }\r\n\r\n  reload(options) {\r\n    this.destroy().initialize(this.attr(options))\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    return this\r\n  }\r\n}\r\n\r\nexport default Base\r\n","import hasOwn from './hasOwn'\n\n/**\n * 扩展对象\n * ========================================================================\n * @method extend\n * @param {Object} origin\n * @param {Object} source\n */\nconst extend = (origin, source) => {\n  const keys = Object.keys(source)\n\n  keys.forEach((prop) => {\n    if (hasOwn(source, prop)) {\n      origin[prop] = source[prop]\n    }\n  })\n}\n\nexport default extend\n","import isObject from './isObject'\n\n/**\n * 检测数据是否为 HTMLElement DOM 节点\n * ========================================================================\n * @method isElement\n * @param {*} o\n * @returns {boolean}\n */\nconst isElement = (o) => {\n  return isObject(o) && o.nodeName && o.tagName && o.nodeType === 1\n}\n\nexport default isElement\n","import isFunction from '../types/isFunction'\n\n/**\n * later - 延迟执行方法\n * ========================================================================\n * @method later\n * @param {Function} fn\n * @param {Number} [delay]\n * @returns {number|boolean}\n */\nconst later = (fn, delay = 300) => {\n  if (!isFunction(fn)) {\n    return false\n  }\n\n  return setTimeout(() => {\n    fn()\n  }, delay)\n}\n\nexport default later\n","export const CAPTURE_EVENTS = [\n  'focusout',\n  'blur',\n  'focusin',\n  'focus',\n  'load',\n  'unload',\n  'mouseenter',\n  'mouseleave'\n]\n","import { CAPTURE_EVENTS } from './enum'\nimport _delete from './_delete'\n\n/**\n * （私有方法）取消 type 类型的代理事件绑定\n * ========================================================================\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\n * ========================================================================\n * @method _off\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\n * @param {String} type - （必须）事件类型\n * @param {Function} fn - （必须）事件处理器回调函数\n * @private\n */\nconst _off = (el, type, fn) => {\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\n\n  /* istanbul ignore else */\n  if (fn._delegateListener) {\n    fn = fn._delegateListener\n    delete fn._delegateListener\n  }\n\n  // 移除缓存的 _listeners 数据\n  _delete(el, type, fn)\n\n  el.removeEventListener(type, fn, capture)\n}\n\nexport default _off\n","/**\n * 删除 DOM 元素缓存的 _listeners 数据\n * ========================================================================\n * @method _delete\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\n * @param {String} type - 事件类型（名称）\n * @param {Function} [fn] - 事件处理器回调函数\n */\nconst _delete = function (el, type, fn) {\n  const listeners = el._listeners\n  let index = -1\n\n  if (listeners.length < 1) {\n    return false\n  }\n\n  // 移除缓存的 _listeners 数据\n  listeners.forEach((listener, i) => {\n    const handler = listener.fn\n\n    if (type === listener.type) {\n      index = i\n\n      if (handler === fn) {\n        index = i\n      }\n    }\n  })\n\n  /* istanbul ignore else */\n  if (index > -1) {\n    listeners.splice(index, 1)\n  }\n}\n\nexport default _delete\n","import isString from '../types/isString'\nimport isElement from '../types/isElement'\nimport getListeners from './getListeners'\nimport _off from './_off'\n\n/**\n * 销毁（type 类型的）代理事件绑定\n * ========================================================================\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\n * ========================================================================\n * @method purgeElement\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\n * @param {String|Boolean} type - （必须）事件类型\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\n */\nconst purgeElement = function (el, type, recurse = false) {\n  const $element = isString(el) ? document.querySelector(el) : el\n  const $children = $element.childNodes\n  const listeners = getListeners($element, type)\n\n  listeners.forEach((listener) => {\n    _off($element, listener.type, listener.fn)\n  })\n\n  if (\n    (recurse || type === true || arguments.length === 1) &&\n    $element &&\n    $children\n  ) {\n    $children.forEach(($child) => {\n      if (isElement($child)) {\n        purgeElement($child, type, recurse)\n      }\n    })\n  }\n}\n\nexport default purgeElement\n","import isString from '../types/isString'\n\n/**\n * 获取 DOM 元素（type 事件类型）事件绑定信息\n * ========================================================================\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\n * ========================================================================\n * @methods getListeners\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\n * @param {String} [type] - （可选）事件类型\n * @returns {Array} - 已绑定的事件信息\n */\nconst getListeners = (el, type) => {\n  let listeners = el._listeners || []\n\n  if (isString(type) && type) {\n    listeners = listeners.filter((listener) => {\n      return listener.type === type\n    })\n  }\n\n  return listeners\n}\n\nexport default getListeners\n","import purgeElement from './purgeElement'\nimport isFunction from '../types/isFunction'\nimport _off from './_off'\n\n/**\n * 取消 type 类型的代理事件绑定\n * ========================================================================\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\n * ========================================================================\n * @method off\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\n * @param {String} type - （必须）事件类型\n * @param {Function} [fn] - （可选）事件处理器回调函数\n */\nconst off = (el, type, fn) => {\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\n  if (!isFunction(fn)) {\n    return purgeElement(el, type)\n  }\n\n  _off(el, type, fn)\n}\n\nexport default off\n","/**\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\n * ========================================================================\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\n * 标 DOM 元素是否为事件代理所期望触发的目标。\n * ========================================================================\n * @method matches\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\n * @param {HTMLElement} el - （必须）DOM 元素\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\n * @returns {Boolean}\n */\nconst matches = (el, selector = '') => {\n  const sel = selector.replace(/^>/i, '')\n\n  if (!selector || !sel || !el) {\n    return false\n  }\n\n  /* istanbul ignore else */\n  if (el.matches) {\n    return el.matches(sel)\n  } else if (el.msMatchesSelector) {\n    return el.msMatchesSelector(sel)\n  } else {\n    return false\n  }\n}\n\nexport default matches\n","/**\n * 获取 DOM 元素的父节点\n * ========================================================================\n * @method getParentOrHost\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\n * @returns {*|HTMLElement}\n */\nconst getParentOrHost = (el) => {\n  return el.host && el !== document && el.host.nodeType\n    ? el.host\n    : el.parentNode\n}\n\nexport default getParentOrHost\n","import closest from '../dom/closest'\nimport off from './off'\nimport getTarget from './getTarget'\n\nimport { CAPTURE_EVENTS } from './enum'\n\n/**\n * 绑定代理事件\n * ========================================================================\n * @method on\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\n * @param {Function|Object} fn - （可选） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n * @param {Boolean} once - （可选）是否仅触发一次\n */\nconst on = (el, selector, type, fn, data, context, once = false) => {\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\n\n  const listener = function (evt) {\n    const target = getTarget(evt)\n    // 通过 Element.matches 方法获得点击的目标元素\n    const delegateTarget = closest(target, selector, el)\n    let overrideContext = context || el\n\n    evt.delegateTarget = delegateTarget\n\n    // 当设置为 true 时，则事件处理器回调函数的\n    // this 上下文指向为 data 对象\n    if (context === true) {\n      overrideContext = data\n    }\n\n    /* istanbul ignore else */\n    if (delegateTarget) {\n      // 仅触发一次\n      /* istanbul ignore else */\n      if (once === true) {\n        off(el, type, listener)\n      }\n\n      fn.call(overrideContext, evt, data)\n    }\n  }\n\n  if (!el._listeners) {\n    el._listeners = []\n  }\n\n  // 缓存 options 元素绑定的事件处理器\n  el._listeners.push({\n    el,\n    selector,\n    type,\n    fn: listener,\n    data,\n    context,\n    capture\n  })\n\n  // 缓存包装后的事件处理器\n  fn._delegateListener = listener\n\n  el.addEventListener(type, listener, capture)\n}\n\nexport default on\n","import resolveTextNode from '../dom/resolveTextNode'\n\n/**\n * 返回触发事件的 target DOM 元素\n * ========================================================================\n * @method getTarget\n * @param {Event} evt - Event 对象\n * @return {HTMLElement} - Event 对象的 target DOM 元素\n */\nconst getTarget = function (evt) {\n  const target = evt.target\n\n  return resolveTextNode(target)\n}\n\nexport default getTarget\n","/**\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\n * resolveTextNode() 方法则会返回实际的目标节点。\n * ========================================================================\n * @method resolveTextNode\n * @param {HTMLElement|Text} el - 要解析的节点\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\n */\nconst resolveTextNode = function (el) {\n  if (el && el.nodeType === 3) {\n    return el.parentNode\n  }\n\n  return el\n}\n\nexport default resolveTextNode\n","import matches from './matches'\nimport getParentOrHost from './getParentOrHost'\n\n/**\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\n * ========================================================================\n * @method closest\n * @param {HTMLElement} el - （必须）DOM 元素\n * @param {String} selector - （必须）DOM 元素的选择其\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\n */\nconst closest = (el, selector, ctx, includeCTX) => {\n  const context = ctx || document\n\n  if (!el) {\n    return null\n  }\n\n  do {\n    /* istanbul ignore else */\n    if (\n      (selector != null &&\n        (selector[0] === '>'\n          ? el.parentNode === context && matches(el, selector)\n          : matches(el, selector))) ||\n      (includeCTX && el === context)\n    ) {\n      return el\n    }\n\n    /* istanbul ignore else */\n    if (el === context) {\n      break\n    }\n\n    /* jshint boss:true */\n  } while ((el = getParentOrHost(el)))\n}\n\nexport default closest\n","import toString from '../lang/toString'\n\n/**\n * 检测数据是否为 Array 类型\n * ========================================================================\n * @method isArray\n * @param {*} o\n * @returns {boolean}\n */\nconst isArray = (o) => {\n  if (Array.isArray) {\n    return Array.isArray(o)\n  } else {\n    return toString.apply(o) === '[object Array]'\n  }\n}\n\nexport default isArray\n","import isObject from './isObject'\r\nimport isElement from './isElement'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isFragment from './isFragment'\r\nimport isTextNode from './isTextNode'\r\n\r\nconst isDOM = (el) => {\r\n  return (\r\n    isObject(el) &&\r\n    (isElement(el) || isHTMLCollection(el) || isFragment(el) || isTextNode(el))\r\n  )\r\n}\r\n\r\nexport default isDOM\r\n","import toString from '../lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isHTMLCollection = (el) => {\r\n  return isObject(el) && toString.apply(el) === '[object NodeList]'\r\n}\r\n\r\nexport default isHTMLCollection\r\n","import toString from '../lang/toString'\nimport isObject from './isObject'\n\nconst isFragment = (fragment) => {\n  return (\n    isObject(fragment) &&\n    toString.call(fragment) === '[object DocumentFragment]'\n  )\n}\n\nexport default isFragment\n","import toString from '../lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isTextNode = (el) => {\r\n  return (\r\n    isObject(el) &&\r\n    (toString.apply(el) === '[object Text]' ||\r\n      (el.tagName && el.nodeType === 3))\r\n  )\r\n}\r\n\r\nexport default isTextNode\r\n","import hasOwn from '../lang/hasOwn'\nimport isObject from '../types/isObject'\nimport isString from '../types/isString'\nimport isArray from '../types/isArray'\nimport isDOM from '../types/isDOM'\nimport setAttribute from './setAttribute'\n\n/**\n * 创建 DOM 节点，并添加属性和子节点\n * ========================================================================\n * @method createElement\n * @param {String} tagName - 标签名称\n * @param {Object|Array} attrs - 属性对象或者子节点\n * @param {Array} [children] - 子节点数组\n * @returns {HTMLElement}\n */\nconst createElement = (tagName, attrs, children) => {\n  const $fragment = document.createDocumentFragment()\n  const $el = document.createElement(tagName)\n  const isValidChild = (child) => {\n    return isDOM(child) || isString(child)\n  }\n  const append = (child) => {\n    let $child\n\n    if (!isValidChild(child)) {\n      return false\n    }\n\n    if (isDOM(child)) {\n      $child = child\n    } else if (isString(child)) {\n      $child = document.createTextNode(child)\n    }\n\n    $fragment.appendChild($child)\n  }\n\n  if (isObject(attrs)) {\n    Object.keys(attrs).forEach((attr) => {\n      if (hasOwn(attrs, attr)) {\n        setAttribute($el, attr, attrs[attr])\n      }\n    })\n  } else if (isArray(attrs) && attrs.every((attr) => isValidChild(attr))) {\n    attrs.forEach((child) => {\n      append(child)\n    })\n  }\n\n  if (isArray(children)) {\n    children.forEach((child) => {\n      append(child)\n    })\n  } else {\n    append(children)\n  }\n\n  $el.appendChild($fragment)\n\n  return $el\n}\n\nexport default createElement\n","/**\n * 给 DOM 节点设置属性/值\n * ========================================================================\n * @method setAttribute\n * @param {HTMLElement} el - DOM 节点\n * @param {String} attr - 属性名称\n * @param {String|Number|Boolean} value - 属性值\n */\nconst setAttribute = (el, attr, value) => {\n  let tagName = el.tagName.toLowerCase()\n\n  switch (attr) {\n    case 'style':\n      el.style.cssText = value\n      break\n    case 'value':\n      if (tagName === 'input' || tagName === 'textarea') {\n        el.value = value\n      } else {\n        el.setAttribute(attr, value)\n      }\n      break\n    case 'className':\n      el.className = value\n      break\n    default:\n      el.setAttribute(attr, value)\n      break\n  }\n}\n\nexport default setAttribute\n","/**\n * 返回给定值的平方值\n * ========================================================================\n * @method easeInQuad\n * @param {Number} x\n * @returns {number}\n */\nconst easeInQuad = (x) => {\n  return x * x\n}\n\nexport default easeInQuad\n","import isString from '../types/isString'\nimport isElement from '../types/isElement'\n\nconst _getScrollElement = (scrollElement = null) => {\n  let $rootElements\n  let $scrollElement\n\n  if (!scrollElement) {\n    $rootElements = document.querySelectorAll('html,body')\n    $scrollElement =\n      $rootElements[0].scrollTop - $rootElements[1].scrollTop >= 0\n        ? $rootElements[0]\n        : $rootElements[1]\n  } else {\n    if (isString(scrollElement)) {\n      $scrollElement = document.querySelector(scrollElement)\n    } else if (isElement(scrollElement)) {\n      $scrollElement = scrollElement\n    }\n  }\n\n  return $scrollElement\n}\n\nexport default _getScrollElement\n","import easeInQuad from '../lang/easeInQuad'\nimport isFunction from '../types/isFunction'\nimport isNumber from '../types/isNumber'\nimport _getScrollElement from './_getScrollElement'\n\nlet timer = null\n\n/**\n * 指定 rootElement DOM 节点滚动到指定 top 位置\n * ========================================================================\n * @method scrollTo\n * @param {HTMLElement|Object} [scrollElement] - （必须）要滚动的 DOM 节点\n * @param {Number} top - （必须）滚动的 scrollTop 数值\n * @param {Function|Number} [afterStop] - （可选）滚动完成的回调函数或者滚动的速率值\n * @param {Number} [speed] - 可选）滚动的速率值\n */\nconst scrollTo = (scrollElement, top, afterStop, speed = 50) => {\n  const $scrollElement = _getScrollElement(scrollElement)\n  let scrollTop = $scrollElement.scrollTop\n  let step = 0\n  const distance = top - scrollTop\n  const MAX_HEIGHT = $scrollElement.scrollHeight\n  const MAX_TOP = top - MAX_HEIGHT <= 0 ? top : MAX_HEIGHT\n  const stop = () => {\n    clearTimeout(timer)\n    timer = null\n  }\n  const play = () => {\n    if (timer) {\n      stop()\n    }\n\n    step += 3\n\n    // 线上滚动\n    if (distance < 0) {\n      scrollTop -= easeInQuad(step)\n      $scrollElement.scrollTop = scrollTop\n\n      if (scrollTop <= top) {\n        $scrollElement.scrollTop = top\n        stop()\n\n        if (isFunction(afterStop)) {\n          afterStop(top)\n        }\n\n        return false\n      }\n    } else {\n      scrollTop += easeInQuad(step)\n      $scrollElement.scrollTop = scrollTop\n\n      if (scrollTop >= MAX_TOP) {\n        $scrollElement.scrollTop = MAX_TOP\n        stop()\n\n        if (isFunction(afterStop)) {\n          afterStop(MAX_TOP)\n        }\n\n        return false\n      }\n    }\n\n    timer = setTimeout(play, isNumber(afterStop) ? afterStop : speed)\n  }\n\n  play()\n}\n\nexport default scrollTo\n","/**\n * 检测 DOM 节点是否包含名为 className 的样式\n * ========================================================================\n * @method hasClass\n * @param {HTMLElement|Object} el - DOM 节点\n * @param {String} className - 样式名称\n * @returns {*}\n */\nconst hasClass = (el, className) => {\n  let allClass = el.className\n\n  if (!allClass) {\n    return false\n  }\n\n  return allClass.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'))\n}\n\nexport default hasClass\n","import hasClass from './hasClass'\n\n/**\n * 给 DOM 节点添加名为 className 的样式\n * ========================================================================\n * @method addClass\n * @param {HTMLElement|Object} el - DOM 节点\n * @param {String} className - 样式名称\n * @returns {Boolean}\n */\nconst addClass = (el, className) => {\n  let allClass = el.className\n\n  if (hasClass(el, className)) {\n    return false\n  }\n\n  allClass += allClass.length > 0 ? ' ' + className : className\n\n  el.className = allClass\n}\n\nexport default addClass\n","import trim from '../lang/trim'\nimport hasClass from './hasClass'\n\n/**\n * 移除 DOM 节点的 className 样式\n * ========================================================================\n * @method removeClass\n * @param {HTMLElement|Object} el - DOM 节点\n * @param {String} className - 样式名称\n * @returns {Boolean}\n */\nconst removeClass = (el, className) => {\n  let allClass = el.className\n\n  if (!allClass || !hasClass(el, className)) {\n    return false\n  }\n\n  allClass = trim(allClass.replace(className, ''))\n\n  el.className = allClass\n}\n\nexport default removeClass\n","import isString from '../types/isString'\n\n/**\n * 清楚字符串起始位置所有的空格\n * ========================================================================\n * @method trim\n * @param {string} str\n * @returns {string|Boolean}\n */\nconst trim = (str) => {\n  if (!isString(str)) {\n    return false\n  }\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nexport default trim\n","/**\n * 获取 DOM 节点相对于窗口的 left （纵坐标）值\n * ========================================================================\n * @method offsetTop\n * @param {HTMLElement} el - DOM 节点\n * @returns {Number}\n */\nconst offsetTop = (el) => {\n  let top = el.offsetTop\n\n  if (el.offsetParent !== null) {\n    top += offsetTop(el.offsetParent)\n  }\n\n  return top\n}\n\nexport default offsetTop\n","/**\n * 存储订阅者（主题和处理器的）私有对象\n * ========================================================================\n * @type {{}}\n * @private\n */\nconst _subscribers = {}\n\nexport default _subscribers\n","import _subscribers from './_subscribers'\nimport hasOwn from '../lang/hasOwn'\n\n/**\n * 判断是否存在与给定 topic 完全匹配的订阅者信息\n * ========================================================================\n * @method _hasDirectSubscribersFor\n * @param {String} topic - （必须）订阅主题字符串\n * @returns {Boolean}\n */\nconst _hasDirectSubscribersFor = (topic) => {\n  return hasOwn(_subscribers, topic) && _subscribers[topic].length > 0\n}\n\nexport default _hasDirectSubscribersFor\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\nimport _hasSubscribers from './_hasSubscribers'\n\n/**\n * 判断是否存在包含 topic 指定的订阅者信息\n * ========================================================================\n * @method has\n * @param {String} topic - （必须）主题名称\n * @param {Boolean} [isDirect] - （可选）是否为直接的主题，默认值：true\n * @returns {Boolean}\n */\nconst has = (topic, isDirect = true) => {\n  return isDirect ? _hasDirectSubscribersFor(topic) : _hasSubscribers(topic)\n}\n\nexport default has\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\n\n/**\n * 判断是否存在包含给定 topic 相关的订阅者信息\n * ========================================================================\n * @method _hasSubscribers\n * @param {String} topic - （必须）订阅主题字符串\n * @returns {Boolean}\n */\nconst _hasSubscribers = (topic) => {\n  let found = _hasDirectSubscribersFor(topic)\n  let position = topic.lastIndexOf('.')\n\n  while (!found && position !== -1) {\n    topic = topic.substring(0, position)\n    position = topic.lastIndexOf('.')\n    found = _hasDirectSubscribersFor(topic)\n  }\n\n  return found\n}\n\nexport default _hasSubscribers\n","import isTypedArray from '../types/isTypedArray'\nimport _subscribers from './_subscribers'\nimport has from './has'\nimport _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\n\n/**\n * （异步）发布订阅主题信息\n * ========================================================================\n * 主题默认是异步发布的。确保在消费者处理主题时，主题的发起者不会被阻止。\n * ========================================================================\n * @method emit\n * @param {String} topic - （必须）主题名称\n * @param {Object} data - （必须）数据对象\n * @param {Boolean} async - (可选) 是否异步发布\n */\nconst emit = (topic, data, async = true) => {\n  const execute = (topic) => {\n    if (!_hasDirectSubscribersFor(topic)) {\n      return false\n    }\n\n    _subscribers[topic].forEach((subscriber) => {\n      // 针对 mqtt 消息服务返回的 Uint8Array 类似的 typed arrays 格式的数据\n      // 采用 toString() 方法转化为普通（JSON）字符串\n      const message = isTypedArray(data) ? data.toString() : data\n\n      subscriber.callback.call(subscriber.context || subscriber, message)\n    })\n  }\n  const deliver = () => {\n    let subscriber = topic\n    let position = topic.lastIndexOf('.')\n\n    while (position !== -1) {\n      subscriber = subscriber.substring(0, position)\n      position = subscriber.lastIndexOf('.')\n\n      execute(subscriber)\n    }\n\n    // 执行 topic 对应的处理器\n    execute(topic)\n    // 执行特殊 topic：'*'（监听全部消息的发布）\n    execute('*')\n  }\n\n  if (!has(topic)) {\n    return false\n  }\n\n  if (async) {\n    setTimeout(deliver, 10)\n  } else {\n    deliver()\n  }\n}\n\nexport default emit\n","import toString from '../lang/toString'\n/**\n * 判断检测数据是否为 Typed Arrays 类型的数据\n * ========================================================================\n * @param {*} val\n * @returns {boolean}\n */\nconst isTypedArray = (val) => {\n  const TYPES = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]',\n    '[object BigInt64Array]',\n    '[object BigUint64Array]'\n  ]\n\n  return TYPES.indexOf(toString.call(val)) > -1\n}\n\nexport default isTypedArray\n","import Base from './base'\n\nimport isString from './utils/types/isString'\nimport isFunction from './utils/types/isFunction'\nimport isElement from './utils/types/isElement'\nimport later from './utils/lang/later'\nimport emit from './utils/event/emit'\nimport on from './utils/event/on'\nimport off from './utils/event/off'\nimport stop from './utils/event/stop'\nimport createElement from './utils/dom/createElement'\nimport scrollTo from './utils/dom/scrollTo'\nimport addClass from './utils/dom/addClass'\nimport intersection from './utils/dom/intersection'\nimport removeClass from './utils/dom/removeClass'\nimport offsetTop from './utils/dom/offsetTop'\nimport publish from './utils/observer/emit'\n\nimport _getScrollElement from './utils/dom/_getScrollElement'\nimport _paintChapters from './_paintChapters'\n\nclass Chapters extends Base {\n  constructor(options) {\n    super()\n\n    this.attrs = Chapters.DEFAULTS\n    this.$el = null\n    this.$title = null\n    this.$main = null\n    this.$list = null\n    this.$placeholder = null\n    this.$parentElement = null\n    this.$scrollElement = null\n    this.chapters = []\n    this.closed = false\n    this.active = 0\n    this.offsetTop = 0\n    this.$active = null\n    this.timer = null\n    this.playing = false\n\n    if (options) {\n      this.initialize(options)\n    }\n  }\n\n  initialize(options) {\n    let created\n    let parentElement\n    let scrollElement\n    let $parent\n\n    this.attr(options)\n    created = this.attr('created')\n    parentElement = this.attr('parentElement')\n    scrollElement = this.attr('scrollElement')\n\n    if (isString(parentElement)) {\n      $parent = document.querySelector(parentElement)\n    } else if (isElement(parentElement)) {\n      $parent = parentElement\n    }\n    this.$parentElement = $parent\n    this.$scrollElement = _getScrollElement(scrollElement)\n\n    this.chapters = this.attr('chapters')\n    this.closed = this.attr('closed')\n    this.active = this.attr('active')\n\n    if (isFunction(created)) {\n      created.call(this)\n    }\n\n    if (this.chapters.length < 1) {\n      return this\n    }\n\n    this.render().addListeners()\n\n    this.$active = document.querySelector(`#chapter-${this.active}`)\n\n    return this\n  }\n\n  isClosed() {\n    return this.closed\n  }\n\n  isSticky() {\n    const position = this.attr('position')\n    return position === 'sticky'\n  }\n\n  isFixed() {\n    const position = this.attr('position')\n    return position === 'fixed'\n  }\n\n  isInside() {\n    return this.isFixed() || this.isSticky()\n  }\n\n  isOutside() {\n    return !this.isInside()\n  }\n\n  render() {\n    const FIXED = 'outline-chapters_fixed'\n    const HIDDEN = 'outline-chapters_hidden'\n    const mounted = this.attr('mounted')\n    const title = this.attr('title')\n    const showCode = this.attr('showCode')\n    const customClass = this.attr('customClass')\n    const $parentElement = this.$parentElement\n    const $fragment = document.createDocumentFragment()\n    const contents = []\n    let $title = null\n    let $el\n    let $main\n    let $list\n    let $placeholder\n\n    if (!$parentElement) {\n      return this\n    }\n\n    if (this.isInside()) {\n      $title = createElement(\n        'h2',\n        {\n          className: 'outline-chapters__title'\n        },\n        [title]\n      )\n      this.$title = $title\n      contents.push($title)\n    }\n\n    $list = createElement(\n      'ul',\n      {\n        className: `outline-chapters__list ${FIXED} ${HIDDEN}`\n      },\n      ['']\n    )\n    this.$list = $list\n\n    $placeholder = createElement(\n      'div',\n      {\n        className: 'outline-chapters__placeholder'\n      },\n      ['']\n    )\n    this.$placeholder = $placeholder\n\n    $main = createElement(\n      'div',\n      {\n        className: 'outline-chapters__main'\n      },\n      [$list, $placeholder]\n    )\n    this.$main = $main\n    contents.push($main)\n\n    $el = createElement(\n      'nav',\n      {\n        id: 'outline-chapters',\n        className: 'outline-chapters'\n      },\n      contents\n    )\n    this.$el = $el\n\n    if (this.isSticky()) {\n      addClass($el, 'outline-chapters_sticky')\n    }\n\n    if (customClass) {\n      addClass($el, customClass)\n    }\n\n    $fragment.appendChild($el)\n    $parentElement.appendChild($fragment)\n    _paintChapters($list, this.chapters, showCode)\n    removeClass($list, FIXED)\n    removeClass($list, HIDDEN)\n\n    this.offsetTop = offsetTop(document.querySelector('#outline-chapters'))\n\n    if (isFunction(mounted)) {\n      mounted.call(this)\n    }\n\n    this.onObserver()\n\n    return this\n  }\n\n  highlight(id) {\n    const $anchor = this.$el.querySelector(`#outline-anchor-${id}`)\n    const HIGHLIGHT = 'outline-chapters_active'\n    const $placeholder = this.$placeholder\n    let top\n\n    if (this.$active) {\n      removeClass(this.$active, HIGHLIGHT)\n    }\n\n    this.active = parseInt($anchor.getAttribute('data-id'), 10)\n    this.$active = $anchor\n    addClass(this.$active, HIGHLIGHT)\n\n    top = 30 * this.active\n    $placeholder.style.top = `calc(0.5em + ${top}px)`\n\n    return this\n  }\n\n  sticky() {\n    const FIXED = 'outline-chapters_fixed'\n    const $el = this.$el\n    const top = this.offsetTop\n    const scrollTop = this.$scrollElement.scrollTop\n\n    if (this.isClosed()) {\n      return this\n    }\n\n    if (scrollTop >= top) {\n      addClass($el, FIXED)\n    } else {\n      removeClass($el, FIXED)\n    }\n\n    return this\n  }\n\n  scrollTo(top, after) {\n    const el = this.$scrollElement\n\n    scrollTo(el, top, after, 100)\n\n    return this\n  }\n\n  show() {\n    const HIDDEN = 'outline-chapters_hidden'\n    const opened = this.attr('afterOpened')\n\n    removeClass(this.$el, HIDDEN)\n    if (this.isInside()) {\n      removeClass(this.$parentElement, HIDDEN)\n    }\n    this.closed = false\n\n    if (isFunction(opened)) {\n      opened.call(this)\n    }\n\n    return this\n  }\n\n  hide() {\n    const HIDDEN = 'outline-chapters_hidden'\n    const closed = this.attr('afterClosed')\n\n    addClass(this.$el, HIDDEN)\n    if (this.isInside()) {\n      addClass(this.$parentElement, HIDDEN)\n    }\n    this.closed = true\n\n    if (isFunction(closed)) {\n      closed.call(this)\n    }\n\n    return this\n  }\n\n  toggle() {\n    if (this.closed) {\n      this.show()\n    } else {\n      this.hide()\n    }\n\n    return this\n  }\n\n  destroy() {\n    const beforeDestroy = this.attr('beforeDestroy')\n    const afterDestroy = this.attr('afterDestroy')\n\n    if (isFunction(beforeDestroy)) {\n      beforeDestroy.call(this)\n    }\n\n    this.removeListeners()\n    this.$parentElement.removeChild(this.$el)\n\n    this.attr(Chapters.DEFAULTS)\n    this.$el = null\n    this.$title = null\n    this.$main = null\n    this.$list = null\n    this.$placeholder = null\n    this.$parentElement = null\n    this.$scrollElement = null\n    this.chapters = []\n    this.active = 0\n    this.offsetTop = 0\n    this.$active = null\n    this.closed = false\n\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timer = null\n    }\n\n    if (isFunction(afterDestroy)) {\n      afterDestroy.call(this)\n    }\n\n    return this\n  }\n\n  onObserver() {\n    let timer = null\n\n    intersection(\n      ($heading) => {\n        const id = $heading.getAttribute('data-id')\n\n        if (this.playing) {\n          return false\n        }\n\n        if (timer) {\n          clearTimeout(timer)\n        }\n\n        timer = later(() => {\n          this.highlight(id)\n        }, 100)\n      },\n      { context: this }\n    )\n\n    return this\n  }\n\n  onSelect(evt) {\n    const $anchor = evt.delegateTarget\n    const id = $anchor.getAttribute('data-id')\n    const headingId = $anchor.href.split('#')[1]\n    const $heading = document.querySelector(`#${headingId}`)\n    const top = $heading.offsetTop\n    const min = 0\n    const max = this.$scrollElement.scrollHeight\n    const afterScroll = this.attr('afterScroll')\n    const after = () => {\n      if (isFunction(afterScroll)) {\n        afterScroll.call(this)\n      }\n\n      later(() => {\n        this.playing = false\n        publish('update:toolbar', {\n          top,\n          min,\n          max\n        })\n      })\n    }\n\n    this.playing = true\n    if (this.isFixed()) {\n      this.sticky()\n      later(() => {\n        this.scrollTo(top, after)\n        this.highlight(id)\n      }, 10)\n    } else {\n      this.scrollTo(top, after)\n      this.highlight(id)\n    }\n\n    stop(evt)\n\n    return this\n  }\n\n  onScroll() {\n    const $scrollElement = this.$scrollElement\n\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n\n    this.timer = later(() => {\n      const top = $scrollElement.scrollTop\n      const min = 0\n      const max = $scrollElement.scrollHeight - $scrollElement.clientHeight\n\n      if (this.isFixed()) {\n        this.sticky()\n      }\n\n      publish('update:toolbar', {\n        top,\n        min,\n        max\n      })\n    }, 50)\n\n    return this\n  }\n\n  addListeners() {\n    const $el = this.$el\n    const $scrollElement = this.$scrollElement\n    const tagName = $scrollElement.tagName.toLowerCase()\n    let $element = $scrollElement\n\n    if (tagName === 'html' || tagName === 'body') {\n      $element = window\n    }\n\n    on($el, '.outline-chapters__anchor', 'click', this.onSelect, this, true)\n    emit($element, 'scroll', this.onScroll, this, true)\n\n    return this\n  }\n\n  removeListeners() {\n    const $el = this.$el\n    const $scrollElement = this.$scrollElement\n    const tagName = $scrollElement.tagName.toLowerCase()\n    let $element = $scrollElement\n\n    if (tagName === 'html' || tagName === 'body') {\n      $element = window\n    }\n\n    off($el, 'click', this.onSelect)\n    off($element, 'scroll', this.onScroll)\n\n    return this\n  }\n}\n\nChapters.DEFAULTS = {\n  parentElement: '',\n  scrollElement: '',\n  selector: '',\n  active: 0,\n  closed: false,\n  showCode: true,\n  position: 'relative',\n  chapters: [],\n  created: null,\n  mounted: null,\n  afterClosed: null,\n  afterOpened: null,\n  afterScroll: null,\n  beforeDestroy: null,\n  afterDestroy: null\n}\n\nexport default Chapters\n","import createElement from './utils/dom/createElement'\n\nconst _paintChapters = (list, chapters, showCode = false) => {\n  chapters.forEach((chapter) => {\n    const pid = chapter.pid\n    const text = createElement(\n      'span',\n      {\n        className: 'outline-chapters__text'\n      },\n      [chapter.text]\n    )\n    const link = createElement(\n      'a',\n      {\n        id: `outline-anchor-${chapter.id}`,\n        className: 'outline-chapters__anchor',\n        href: '#' + chapter.rel,\n        rel: chapter.rel,\n        'data-id': chapter.id\n      },\n      [text]\n    )\n    let parent\n    let ul\n    let li\n    let code\n    let children = []\n\n    if (showCode) {\n      code = createElement(\n        'span',\n        {\n          className: 'outline-chapters__code',\n          'data-id': chapter.id\n        },\n        [chapter.code]\n      )\n\n      link.insertBefore(code, link.firstChild)\n    }\n\n    children.push(link)\n\n    li = createElement(\n      'li',\n      {\n        id: `outline-chapter-${chapter.id}`,\n        className: 'outline-chapters__item',\n        'data-id': chapter.id\n      },\n      children\n    )\n\n    if (pid === -1) {\n      list.appendChild(li)\n    } else {\n      parent = document.getElementById('outline-chapter-' + pid)\n      ul = document.getElementById('outline-subject-' + pid)\n\n      if (!ul) {\n        ul = createElement(\n          'ul',\n          {\n            id: 'outline-subject-' + pid,\n            className: 'outline-chapters__subject'\n          },\n          [li]\n        )\n\n        parent.appendChild(ul)\n      } else {\n        ul.appendChild(li)\n      }\n    }\n  })\n}\n\nexport default _paintChapters\n","/**\n * 检测数据是否为 Number 类型\n * ========================================================================\n * @method isNumber\n * @param {*} o\n * @returns {boolean}\n */\nconst isNumber = (o) => {\n  return typeof o === 'number'\n}\n\nexport default isNumber\n","import isFunction from '../types/isFunction'\n\n/**\n * 通用的 IntersectionObserver 观察者处理器\n * ========================================================================\n * @method intersection\n * @param {Function} fn\n * @param {Object} [props]\n * @param {Object|HTMLElement} [props.root]\n * @param {String} [props.selector]\n * @param {Object} [props.context]\n * @param {String} [props.attr]\n * @param {String} [props.rootMargin]\n */\nconst intersection = (fn, props) => {\n  const root = props.root || null\n  const selector = props.selector || '.outline-heading'\n  const context = props.context || null\n  const rootMargin = props.rootMargin || '0px 0px -90% 0px'\n  const options = {\n    rootMargin: rootMargin\n  }\n  const Observer = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      if (entry.intersectionRatio > 0) {\n        if (isFunction(fn)) {\n          fn.call(context || entry.target, entry.target)\n        }\n      }\n    })\n  }, options)\n\n  if (root) {\n    options.root = root\n  }\n\n  document.querySelectorAll(selector).forEach((section) => {\n    Observer.observe(section)\n  })\n}\n\nexport default intersection\n","/**\n * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\n * ========================================================================\n * @method stop\n * @param {Event} evt - 事件对象\n *\n * @example\n * <div id=\"nav\" class=\"nav\">\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\n * </div>\n *\n * const $nav = document.querySelector('#nav')\n * const $service = document.querySelector('.anchor')\n *\n * on($nav, 'click', function(evt) {\n *   console.log('你点击了导航栏')\n * })\n *\n * on($anchor, 'click', function(evt) {\n *   console.log('tagName', this.tagName)\n *\n *   // 工作台输出：'a'\n *   // 不会触发事件冒泡，输出：'你点击了导航栏'\n *   // 也不会切换到 href 属性的页面，阻止了点击链接的默认行为\n *   stopEvent(evt)\n * })\n */\nconst stop = function (evt) {\n  evt.stopPropagation()\n  evt.preventDefault()\n}\n\nexport default stop\n","import isFunction from '../types/isFunction'\nimport off from './off'\n\nimport { CAPTURE_EVENTS } from './enum'\n\n/**\n * 绑定代理事件\n * ========================================================================\n * @method emit\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\n * @param {Function|Object} fn - （必须） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n * @param {Boolean} once - （可选）是否仅触发一次\n */\nconst emit = (el, type, fn, data, context, once = false) => {\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\n  const listener = function (evt) {\n    let overrideContext = context || el\n\n    // 当设置为 true 时，则事件处理器回调函数的\n    // this 上下文指向为 data 对象\n    if (context === true) {\n      overrideContext = data\n    }\n\n    // 仅触发一次\n    /* istanbul ignore else */\n    if (once === true) {\n      off(el, type, listener)\n    }\n\n    fn.call(overrideContext, evt, data)\n  }\n\n  if (!isFunction(fn)) {\n    return false\n  }\n\n  if (!el._listeners) {\n    el._listeners = []\n  }\n\n  // 缓存 options 元素绑定的事件处理器\n  el._listeners.push({\n    el,\n    type,\n    fn: listener,\n    data,\n    context,\n    capture\n  })\n\n  // 缓存包装后的事件处理器\n  fn._delegateListener = listener\n\n  el.addEventListener(type, listener, capture)\n}\n\nexport default emit\n"],"names":["isString","str","hasOwn","obj","prop","hasOwnProperty","Object","prototype","call","toString","isFunction","val","apply","isObject","o","Base","constructor","options","this","attrs","initialize","attr","render","addListeners","value","origin","source","keys","forEach","arguments","length","destroy","removeListeners","reload","isElement","nodeName","tagName","nodeType","later","fn","delay","setTimeout","CAPTURE_EVENTS","_off","el","type","capture","indexOf","_delegateListener","listeners","_listeners","index","listener","i","handler","splice","_delete","removeEventListener","purgeElement","recurse","$element","document","querySelector","$children","childNodes","filter","getListeners","$child","off","matches","selector","sel","replace","msMatchesSelector","getParentOrHost","host","parentNode","on","data","context","once","evt","target","getTarget","delegateTarget","ctx","includeCTX","closest","overrideContext","push","addEventListener","isArray","Array","isDOM","isHTMLCollection","fragment","isTextNode","createElement","children","$fragment","createDocumentFragment","$el","isValidChild","child","append","createTextNode","appendChild","toLowerCase","style","cssText","setAttribute","className","every","easeInQuad","x","_getScrollElement","scrollElement","$rootElements","$scrollElement","querySelectorAll","scrollTop","timer","hasClass","allClass","match","RegExp","addClass","removeClass","offsetTop","top","offsetParent","_subscribers","_hasDirectSubscribersFor","topic","has","isDirect","found","position","lastIndexOf","substring","_hasSubscribers","emit","async","execute","subscriber","message","callback","deliver","Chapters","super","DEFAULTS","$title","$main","$list","$placeholder","$parentElement","chapters","closed","active","$active","playing","created","parentElement","$parent","isClosed","isSticky","isFixed","isInside","isOutside","FIXED","HIDDEN","mounted","title","showCode","customClass","contents","id","list","chapter","pid","text","link","href","rel","parent","ul","li","code","insertBefore","firstChild","getElementById","_paintChapters","onObserver","highlight","$anchor","HIGHLIGHT","parseInt","getAttribute","sticky","scrollTo","after","afterStop","speed","step","distance","MAX_HEIGHT","scrollHeight","MAX_TOP","stop","clearTimeout","play","show","opened","hide","toggle","beforeDestroy","afterDestroy","removeChild","props","root","rootMargin","Observer","IntersectionObserver","entries","entry","intersectionRatio","section","observe","intersection","$heading","onSelect","headingId","split","max","afterScroll","publish","min","stopPropagation","preventDefault","onScroll","clientHeight","window","afterClosed","afterOpened"],"mappings":"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"}