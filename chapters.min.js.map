{"version":3,"file":"chapters.min.js","sources":["src/utils/types/isString.js","src/utils/lang/hasOwn.js","src/utils/lang/toString.js","src/base.js","src/utils/types/isObject.js","src/utils/lang/extend.js","src/utils/types/isFunction.js","src/utils/types/isElement.js","src/utils/lang/later.js","src/utils/event/enum.js","src/utils/event/_off.js","src/utils/event/_delete.js","src/utils/event/purgeElement.js","src/utils/event/getListeners.js","src/utils/event/off.js","src/utils/dom/matches.js","src/utils/dom/getParentOrHost.js","src/utils/event/on.js","src/utils/event/getTarget.js","src/utils/dom/resolveTextNode.js","src/utils/dom/closest.js","src/utils/dom/createElement.js","src/utils/types/isFragment.js","src/utils/types/isArray.js","src/utils/dom/setAttribute.js","src/utils/lang/easeInQuad.js","src/utils/dom/_getScrollElement.js","src/utils/dom/scrollTo.js","src/utils/dom/hasClass.js","src/utils/dom/addClass.js","src/utils/dom/removeClass.js","src/utils/lang/trim.js","src/utils/dom/offsetTop.js","src/utils/observer/_subscribers.js","src/utils/observer/_hasDirectSubscribersFor.js","src/utils/observer/has.js","src/utils/observer/_hasSubscribers.js","src/utils/observer/emit.js","src/utils/types/isTypedArray.js","src/chapters.js","src/_paintChapters.js","src/utils/types/isNumber.js","src/utils/dom/intersection.js","src/utils/event/stop.js","src/utils/event/emit.js"],"sourcesContent":["/**\r\n * 检测数据是否为 String 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} str\r\n * @returns {boolean}\r\n */\r\nconst isString = (str) => {\r\n  return typeof str === 'string'\r\n}\r\n\r\nexport default isString\r\n","/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n  return obj && hasOwnProperty.call(obj, prop)\r\n}\r\n\r\nexport default hasOwn\r\n","const toString = Object.prototype.toString\r\n\r\n/**\r\n * Object 对象原型上的 toString 方法\r\n * ========================================================================\r\n * @method toString\r\n * @param {*} val\r\n * @returns {string}\r\n */\r\nexport default toString\r\n","import isString from './utils/types/isString'\r\nimport hasOwn from './utils/lang/hasOwn'\r\nimport isObject from './utils/types/isObject'\r\nimport extend from './utils/lang/extend'\r\n\r\nclass Base {\r\n  constructor(options) {\r\n    this.attrs = {}\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n  }\r\n\r\n  initialize(options) {\r\n    this.attr(options).render().addListeners()\r\n    return this\r\n  }\r\n\r\n  attr(prop, value) {\r\n    const attrs = this.attrs\r\n\r\n    if (isString(prop)) {\r\n      // 只能扩展 attrs 中已有的属性\r\n      if (value && hasOwn(attrs, prop)) {\r\n        // 更新单个配置信息\r\n        attrs[prop] = value\r\n        return this\r\n      }\r\n\r\n      // 只传递 prop 参数，则返回对应的属性值\r\n      return attrs[prop]\r\n    } else if (isObject(prop)) {\r\n      // 批量更新配置信息\r\n      extend(attrs, prop)\r\n\r\n      return this\r\n    } else if (arguments.length === 0) {\r\n      // 不传递参数，直接返回整个\r\n      return attrs\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  render() {\r\n    return this\r\n  }\r\n\r\n  destroy() {\r\n    this.removeListeners()\r\n    return this\r\n  }\r\n\r\n  reload(options) {\r\n    this.destroy().initialize(this.attr(options))\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    return this\r\n  }\r\n}\r\n\r\nexport default Base\r\n","import toString from '../lang/toString'\r\n\r\n/**\r\n * 检测数据是否为 Object 类型\r\n * ========================================================================\r\n * @method isObject\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isObject = (o) => {\r\n  return toString.apply(o) === '[object Object]' && o !== null\r\n}\r\n\r\nexport default isObject\r\n","import hasOwn from './hasOwn'\r\n\r\n/**\r\n * 扩展对象\r\n * ========================================================================\r\n * @method extend\r\n * @param {Object} origin\r\n * @param {Object} source\r\n */\r\nconst extend = (origin, source) => {\r\n  const keys = Object.keys(source)\r\n\r\n  keys.forEach((prop) => {\r\n    if (hasOwn(source, prop)) {\r\n      origin[prop] = source[prop]\r\n    }\r\n  })\r\n}\r\n\r\nexport default extend\r\n","import toString from '../lang/toString'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  return (\r\n    typeof val === 'function' || toString.apply(val) === '[object Function]'\r\n  )\r\n}\r\n\r\nexport default isFunction\r\n","/**\r\n * 检测数据是否为 HTMLElement DOM 节点\r\n * ========================================================================\r\n * @method isElement\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isElement = (o) => {\r\n  return o && o.nodeName && o.tagName && o.nodeType === 1\r\n}\r\n\r\nexport default isElement\r\n","import isFunction from '../types/isFunction'\r\n\r\n/**\r\n * later - 延迟执行方法\r\n * ========================================================================\r\n * @method later\r\n * @param {Function} fn\r\n * @param {Number} [delay]\r\n * @returns {number|boolean}\r\n */\r\nconst later = (fn, delay = 300) => {\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  return setTimeout(() => {\r\n    fn()\r\n  }, delay)\r\n}\r\n\r\nexport default later\r\n","export const CAPTURE_EVENTS = [\r\n  'focusout',\r\n  'blur',\r\n  'focusin',\r\n  'focus',\r\n  'load',\r\n  'unload',\r\n  'mouseenter',\r\n  'mouseleave'\r\n]\r\n","import { CAPTURE_EVENTS } from './enum'\r\nimport _delete from './_delete'\r\n\r\n/**\r\n * （私有方法）取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method _off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须）事件处理器回调函数\r\n * @private\r\n */\r\nconst _off = (el, type, fn) => {\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  /* istanbul ignore else */\r\n  if (fn._delegateListener) {\r\n    fn = fn._delegateListener\r\n    delete fn._delegateListener\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  _delete(el, type, fn)\r\n\r\n  el.removeEventListener(type, fn, capture)\r\n}\r\n\r\nexport default _off\r\n","/**\r\n * 删除 DOM 元素缓存的 _listeners 数据\r\n * ========================================================================\r\n * @method _delete\r\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\r\n * @param {String} type - 事件类型（名称）\r\n * @param {Function} [fn] - 事件处理器回调函数\r\n */\r\nconst _delete = function (el, type, fn) {\r\n  const listeners = el._listeners\r\n  let index = -1\r\n\r\n  if (listeners.length < 1) {\r\n    return false\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  listeners.forEach((listener, i) => {\r\n    const handler = listener.fn\r\n\r\n    if (type === listener.type) {\r\n      index = i\r\n\r\n      if (handler === fn) {\r\n        index = i\r\n      }\r\n    }\r\n  })\r\n\r\n  /* istanbul ignore else */\r\n  if (index > -1) {\r\n    listeners.splice(index, 1)\r\n  }\r\n}\r\n\r\nexport default _delete\r\n","import isString from '../types/isString'\r\nimport isElement from '../types/isElement'\r\nimport getListeners from './getListeners'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 销毁（type 类型的）代理事件绑定\r\n * ========================================================================\r\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\r\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\r\n * ========================================================================\r\n * @method purgeElement\r\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\r\n * @param {String|Boolean} type - （必须）事件类型\r\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\r\n */\r\nconst purgeElement = function (el, type, recurse = false) {\r\n  const $element = isString(el) ? document.querySelector(el) : el\r\n  const $children = $element.childNodes\r\n  const listeners = getListeners($element, type)\r\n\r\n  listeners.forEach((listener) => {\r\n    _off($element, listener.type, listener.fn)\r\n  })\r\n\r\n  if (\r\n    (recurse || type === true || arguments.length === 1) &&\r\n    $element &&\r\n    $children\r\n  ) {\r\n    $children.forEach(($child) => {\r\n      if (isElement($child)) {\r\n        purgeElement($child, type, recurse)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default purgeElement\r\n","import isString from '../types/isString'\r\n\r\n/**\r\n * 获取 DOM 元素（type 事件类型）事件绑定信息\r\n * ========================================================================\r\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\r\n * ========================================================================\r\n * @methods getListeners\r\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\r\n * @param {String} [type] - （可选）事件类型\r\n * @returns {Array} - 已绑定的事件信息\r\n */\r\nconst getListeners = (el, type) => {\r\n  let listeners = el._listeners || []\r\n\r\n  if (isString(type) && type) {\r\n    listeners = listeners.filter((listener) => {\r\n      return listener.type === type\r\n    })\r\n  }\r\n\r\n  return listeners\r\n}\r\n\r\nexport default getListeners\r\n","import purgeElement from './purgeElement'\r\nimport isFunction from '../types/isFunction'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} [fn] - （可选）事件处理器回调函数\r\n */\r\nconst off = (el, type, fn) => {\r\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\r\n  if (!isFunction(fn)) {\r\n    return purgeElement(el, type)\r\n  }\r\n\r\n  _off(el, type, fn)\r\n}\r\n\r\nexport default off\r\n","/**\r\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\r\n * ========================================================================\r\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\r\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\r\n * 标 DOM 元素是否为事件代理所期望触发的目标。\r\n * ========================================================================\r\n * @method matches\r\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\r\n * @returns {Boolean}\r\n */\r\nconst matches = (el, selector = '') => {\r\n  const sel = selector.replace(/^>/i, '')\r\n\r\n  if (!selector || !sel || !el) {\r\n    return false\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.matches) {\r\n    return el.matches(sel)\r\n  } else if (el.msMatchesSelector) {\r\n    return el.msMatchesSelector(sel)\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default matches\r\n","/**\r\n * 获取 DOM 元素的父节点\r\n * ========================================================================\r\n * @method getParentOrHost\r\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\r\n * @returns {*|HTMLElement}\r\n */\r\nconst getParentOrHost = (el) => {\r\n  return el.host && el !== document && el.host.nodeType\r\n    ? el.host\r\n    : el.parentNode\r\n}\r\n\r\nexport default getParentOrHost\r\n","import closest from '../dom/closest'\r\nimport off from './off'\r\nimport getTarget from './getTarget'\r\n\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定代理事件\r\n * ========================================================================\r\n * @method on\r\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n * @param {Function|Object} fn - （可选） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst on = (el, selector, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  const listener = function (evt) {\r\n    const target = getTarget(evt)\r\n    // 通过 Element.matches 方法获得点击的目标元素\r\n    const delegateTarget = closest(target, selector, el)\r\n    let overrideContext = context || el\r\n\r\n    evt.delegateTarget = delegateTarget\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (delegateTarget) {\r\n      // 仅触发一次\r\n      /* istanbul ignore else */\r\n      if (once === true) {\r\n        off(el, type, listener)\r\n      }\r\n\r\n      fn.call(overrideContext, evt, data)\r\n    }\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    selector,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default on\r\n","import resolveTextNode from '../dom/resolveTextNode'\r\n\r\n/**\r\n * 返回触发事件的 target DOM 元素\r\n * ========================================================================\r\n * @method getTarget\r\n * @param {Event} evt - Event 对象\r\n * @return {HTMLElement} - Event 对象的 target DOM 元素\r\n */\r\nconst getTarget = function (evt) {\r\n  const target = evt.target\r\n\r\n  return resolveTextNode(target)\r\n}\r\n\r\nexport default getTarget\r\n","/**\r\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\r\n * resolveTextNode() 方法则会返回实际的目标节点。\r\n * ========================================================================\r\n * @method resolveTextNode\r\n * @param {HTMLElement|Text} el - 要解析的节点\r\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\r\n */\r\nconst resolveTextNode = function (el) {\r\n  if (el && el.nodeType === 3) {\r\n    return el.parentNode\r\n  }\r\n\r\n  return el\r\n}\r\n\r\nexport default resolveTextNode\r\n","import matches from './matches'\r\nimport getParentOrHost from './getParentOrHost'\r\n\r\n/**\r\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\r\n * ========================================================================\r\n * @method closest\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）DOM 元素的选择其\r\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\r\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\r\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\r\n */\r\nconst closest = (el, selector, ctx, includeCTX) => {\r\n  const context = ctx || document\r\n\r\n  if (!el) {\r\n    return null\r\n  }\r\n\r\n  do {\r\n    /* istanbul ignore else */\r\n    if (\r\n      (selector != null &&\r\n        (selector[0] === '>'\r\n          ? el.parentNode === context && matches(el, selector)\r\n          : matches(el, selector))) ||\r\n      (includeCTX && el === context)\r\n    ) {\r\n      return el\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (el === context) {\r\n      break\r\n    }\r\n\r\n    /* jshint boss:true */\r\n  } while ((el = getParentOrHost(el)))\r\n}\r\n\r\nexport default closest\r\n","import hasOwn from '../lang/hasOwn'\nimport isArray from '../types/isArray'\nimport isElement from '../types/isElement'\nimport isFragment from '../types/isFragment'\nimport setAttribute from './setAttribute'\n\n/**\n * 创建 DOM 节点，并添加属性和子节点\n * ========================================================================\n * @method createElement\n * @param {String} tagName - 标签名称\n * @param {Object} attributes - 属性对象\n * @param {Array} children - 子节点数组\n * @returns {HTMLElement}\n */\nconst createElement = (tagName, attributes, children) => {\n  const keys = Object.keys(attributes)\n  const $fragment = document.createDocumentFragment()\n  const $el = document.createElement(tagName)\n  const append = (child) => {\n    let $child\n    if (isElement(child) || isFragment(child)) {\n      $child = child\n    } else {\n      $child = document.createTextNode(child)\n    }\n\n    $fragment.appendChild($child)\n  }\n\n  keys.forEach((attr) => {\n    if (hasOwn(attributes, attr)) {\n      setAttribute($el, attr, attributes[attr])\n    }\n  })\n\n  if (isArray(children)) {\n    children.forEach((child) => {\n      append(child)\n    })\n  } else {\n    append(children)\n  }\n\n  $el.appendChild($fragment)\n\n  return $el\n}\n\nexport default createElement\n","import toString from '../lang/toString'\n\nconst isFragment = (fragment) => {\n  return toString.call(fragment) === '[object DocumentFragment]'\n}\n\nexport default isFragment\n","import toString from '../lang/toString'\r\n\r\n/**\r\n * 检测数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isArray = (o) => {\r\n  if (Array.isArray) {\r\n    return Array.isArray(o)\r\n  } else {\r\n    return toString.apply(o) === '[object Array]'\r\n  }\r\n}\r\n\r\nexport default isArray\r\n","/**\r\n * 给 DOM 节点设置属性/值\r\n * ========================================================================\r\n * @method setAttribute\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} attr - 属性名称\r\n * @param {String|Number|Boolean} value - 属性值\r\n */\r\nconst setAttribute = (el, attr, value) => {\r\n  let tagName = el.tagName.toLowerCase()\r\n\r\n  switch (attr) {\r\n    case 'style':\r\n      el.style.cssText = value\r\n      break\r\n    case 'value':\r\n      if (tagName === 'input' || tagName === 'textarea') {\r\n        el.value = value\r\n      } else {\r\n        el.setAttribute(attr, value)\r\n      }\r\n      break\r\n    case 'className':\r\n      el.className = value\r\n      break\r\n    default:\r\n      el.setAttribute(attr, value)\r\n      break\r\n  }\r\n}\r\n\r\nexport default setAttribute\r\n","/**\r\n * 返回给定值的平方值\r\n * ========================================================================\r\n * @method easeInQuad\r\n * @param {Number} x\r\n * @returns {number}\r\n */\r\nconst easeInQuad = (x) => {\r\n  return x * x\r\n}\r\n\r\nexport default easeInQuad\r\n","import isString from '../types/isString'\r\nimport isElement from '../types/isElement'\r\n\r\nconst _getScrollElement = (scrollElement = null) => {\r\n  let $rootElements\r\n  let $scrollElement\r\n\r\n  if (!scrollElement) {\r\n    $rootElements = document.querySelectorAll('html,body')\r\n    $scrollElement =\r\n      $rootElements[0].scrollTop - $rootElements[1].scrollTop >= 0\r\n        ? $rootElements[0]\r\n        : $rootElements[1]\r\n  } else {\r\n    if (isString(scrollElement)) {\r\n      $scrollElement = document.querySelector(scrollElement)\r\n    } else if (isElement(scrollElement)) {\r\n      $scrollElement = scrollElement\r\n    }\r\n  }\r\n\r\n  return $scrollElement\r\n}\r\n\r\nexport default _getScrollElement\r\n","import easeInQuad from '../lang/easeInQuad'\r\nimport isFunction from '../types/isFunction'\r\nimport isNumber from '../types/isNumber'\r\nimport _getScrollElement from './_getScrollElement'\r\n\r\nlet timer = null\r\n\r\n/**\r\n * 指定 rootElement DOM 节点滚动到指定 top 位置\r\n * ========================================================================\r\n * @method scrollTo\r\n * @param {HTMLElement|Object} [scrollElement] - （必须）要滚动的 DOM 节点\r\n * @param {Number} top - （必须）滚动的 scrollTop 数值\r\n * @param {Function|Number} [afterStop] - （可选）滚动完成的回调函数或者滚动的速率值\r\n * @param {Number} [speed] - 可选）滚动的速率值\r\n */\r\nconst scrollTo = (scrollElement, top, afterStop, speed = 30) => {\r\n  const $scrollElement = _getScrollElement(scrollElement)\r\n  let scrollTop = $scrollElement.scrollTop\r\n  let step = 0\r\n  const distance = top - scrollTop\r\n  const MAX_HEIGHT = $scrollElement.scrollHeight\r\n  const MAX_TOP = top - MAX_HEIGHT <= 0 ? top : MAX_HEIGHT\r\n  const stop = () => {\r\n    clearTimeout(timer)\r\n    timer = null\r\n  }\r\n  const play = () => {\r\n    if (timer) {\r\n      stop()\r\n    }\r\n\r\n    step += 3\r\n\r\n    // 线上滚动\r\n    if (distance < 0) {\r\n      scrollTop -= easeInQuad(step)\r\n      $scrollElement.scrollTop = scrollTop\r\n\r\n      if (scrollTop <= top) {\r\n        $scrollElement.scrollTop = top\r\n        stop()\r\n\r\n        if (isFunction(afterStop)) {\r\n          afterStop(top)\r\n        }\r\n\r\n        return false\r\n      }\r\n    } else {\r\n      scrollTop += easeInQuad(step)\r\n      $scrollElement.scrollTop = scrollTop\r\n\r\n      if (scrollTop >= MAX_TOP) {\r\n        $scrollElement.scrollTop = MAX_TOP\r\n        stop()\r\n\r\n        if (isFunction(afterStop)) {\r\n          afterStop(MAX_TOP)\r\n        }\r\n\r\n        return false\r\n      }\r\n    }\r\n\r\n    timer = setTimeout(play, isNumber(afterStop) ? afterStop : speed)\r\n  }\r\n\r\n  play()\r\n}\r\n\r\nexport default scrollTo\r\n","/**\r\n * 检测 DOM 节点是否包含名为 className 的样式\r\n * ========================================================================\r\n * @method hasClass\r\n * @param {HTMLElement|Object} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {*}\r\n */\r\nconst hasClass = (el, className) => {\r\n  let allClass = el.className\r\n\r\n  if (!allClass) {\r\n    return false\r\n  }\r\n\r\n  return allClass.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'))\r\n}\r\n\r\nexport default hasClass\r\n","import hasClass from './hasClass'\r\n\r\n/**\r\n * 给 DOM 节点添加名为 className 的样式\r\n * ========================================================================\r\n * @method addClass\r\n * @param {HTMLElement|Object} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst addClass = (el, className) => {\r\n  let allClass = el.className\r\n\r\n  if (hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  allClass += allClass.length > 0 ? ' ' + className : className\r\n\r\n  el.className = allClass\r\n}\r\n\r\nexport default addClass\r\n","import trim from '../lang/trim'\r\nimport hasClass from './hasClass'\r\n\r\n/**\r\n * 移除 DOM 节点的 className 样式\r\n * ========================================================================\r\n * @method removeClass\r\n * @param {HTMLElement|Object} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst removeClass = (el, className) => {\r\n  let allClass = el.className\r\n\r\n  if (!allClass || !hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  allClass = trim(allClass.replace(className, ''))\r\n\r\n  el.className = allClass\r\n}\r\n\r\nexport default removeClass\r\n","import isString from '../types/isString'\r\n\r\n/**\r\n * 清楚字符串起始位置所有的空格\r\n * ========================================================================\r\n * @method trim\r\n * @param {string} str\r\n * @returns {string|Boolean}\r\n */\r\nconst trim = (str) => {\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n  return str.replace(/^\\s+|\\s+$/g, '')\r\n}\r\n\r\nexport default trim\r\n","/**\r\n * 获取 DOM 节点相对于窗口的 left （纵坐标）值\r\n * ========================================================================\r\n * @method offsetTop\r\n * @param {HTMLElement} el - DOM 节点\r\n * @returns {Number}\r\n */\r\nconst offsetTop = (el) => {\r\n  let top = el.offsetTop\r\n\r\n  if (el.offsetParent !== null) {\r\n    top += offsetTop(el.offsetParent)\r\n  }\r\n\r\n  return top\r\n}\r\n\r\nexport default offsetTop\r\n","/**\r\n * 存储订阅者（主题和处理器的）私有对象\r\n * ========================================================================\r\n * @type {{}}\r\n * @private\r\n */\r\nconst _subscribers = {}\r\n\r\nexport default _subscribers\r\n","import _subscribers from './_subscribers'\r\nimport hasOwn from '../lang/hasOwn'\r\n\r\n/**\r\n * 判断是否存在与给定 topic 完全匹配的订阅者信息\r\n * ========================================================================\r\n * @method _hasDirectSubscribersFor\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasDirectSubscribersFor = (topic) => {\r\n  return hasOwn(_subscribers, topic) && _subscribers[topic].length > 0\r\n}\r\n\r\nexport default _hasDirectSubscribersFor\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\nimport _hasSubscribers from './_hasSubscribers'\r\n\r\n/**\r\n * 判断是否存在包含 topic 指定的订阅者信息\r\n * ========================================================================\r\n * @method has\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Boolean} [isDirect] - （可选）是否为直接的主题，默认值：true\r\n * @returns {Boolean}\r\n */\r\nconst has = (topic, isDirect = true) => {\r\n  return isDirect ? _hasDirectSubscribersFor(topic) : _hasSubscribers(topic)\r\n}\r\n\r\nexport default has\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\n\r\n/**\r\n * 判断是否存在包含给定 topic 相关的订阅者信息\r\n * ========================================================================\r\n * @method _hasSubscribers\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasSubscribers = (topic) => {\r\n  let found = _hasDirectSubscribersFor(topic)\r\n  let position = topic.lastIndexOf('.')\r\n\r\n  while (!found && position !== -1) {\r\n    topic = topic.substring(0, position)\r\n    position = topic.lastIndexOf('.')\r\n    found = _hasDirectSubscribersFor(topic)\r\n  }\r\n\r\n  return found\r\n}\r\n\r\nexport default _hasSubscribers\r\n","import isTypedArray from '../types/isTypedArray'\r\nimport _subscribers from './_subscribers'\r\nimport has from './has'\r\nimport _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\n\r\n/**\r\n * （异步）发布订阅主题信息\r\n * ========================================================================\r\n * 主题默认是异步发布的。确保在消费者处理主题时，主题的发起者不会被阻止。\r\n * ========================================================================\r\n * @method emit\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Object} data - （必须）数据对象\r\n * @param {Boolean} async - (可选) 是否异步发布\r\n */\r\nconst emit = (topic, data, async = true) => {\r\n  const execute = (topic) => {\r\n    if (!_hasDirectSubscribersFor(topic)) {\r\n      return false\r\n    }\r\n\r\n    _subscribers[topic].forEach((subscriber) => {\r\n      // 针对 mqtt 消息服务返回的 Uint8Array 类似的 typed arrays 格式的数据\r\n      // 采用 toString() 方法转化为普通（JSON）字符串\r\n      const message = isTypedArray(data) ? data.toString() : data\r\n\r\n      subscriber.callback.call(subscriber.context || subscriber, message)\r\n    })\r\n  }\r\n  const deliver = () => {\r\n    let subscriber = topic\r\n    let position = topic.lastIndexOf('.')\r\n\r\n    while (position !== -1) {\r\n      subscriber = subscriber.substring(0, position)\r\n      position = subscriber.lastIndexOf('.')\r\n\r\n      execute(subscriber)\r\n    }\r\n\r\n    // 执行 topic 对应的处理器\r\n    execute(topic)\r\n    // 执行特殊 topic：'*'（监听全部消息的发布）\r\n    execute('*')\r\n  }\r\n\r\n  if (!has(topic)) {\r\n    return false\r\n  }\r\n\r\n  if (async) {\r\n    setTimeout(deliver, 10)\r\n  } else {\r\n    deliver()\r\n  }\r\n}\r\n\r\nexport default emit\r\n","import toString from '../lang/toString'\r\n/**\r\n * 判断检测数据是否为 Typed Arrays 类型的数据\r\n * ========================================================================\r\n * @param {*} val\r\n * @returns {boolean}\r\n */\r\nconst isTypedArray = (val) => {\r\n  const TYPES = [\r\n    '[object Int8Array]',\r\n    '[object Uint8Array]',\r\n    '[object Uint8ClampedArray]',\r\n    '[object Int16Array]',\r\n    '[object Uint16Array]',\r\n    '[object Int32Array]',\r\n    '[object Uint32Array]',\r\n    '[object Float32Array]',\r\n    '[object Float64Array]',\r\n    '[object BigInt64Array]',\r\n    '[object BigUint64Array]'\r\n  ]\r\n\r\n  return TYPES.indexOf(toString.call(val)) > -1\r\n}\r\n\r\nexport default isTypedArray\r\n","import Base from './base'\r\n\r\nimport isString from './utils/types/isString'\r\nimport isFunction from './utils/types/isFunction'\r\nimport isElement from './utils/types/isElement'\r\nimport later from './utils/lang/later'\r\nimport emit from './utils/event/emit'\r\nimport on from './utils/event/on'\r\nimport off from './utils/event/off'\r\nimport stop from './utils/event/stop'\r\nimport createElement from './utils/dom/createElement'\r\nimport scrollTo from './utils/dom/scrollTo'\r\nimport addClass from './utils/dom/addClass'\r\nimport intersection from './utils/dom/intersection'\r\nimport removeClass from './utils/dom/removeClass'\r\nimport offsetTop from './utils/dom/offsetTop'\r\nimport publish from './utils/observer/emit'\r\n\r\nimport _getScrollElement from './utils/dom/_getScrollElement'\r\nimport _paintChapters from './_paintChapters'\r\n\r\nclass Chapters extends Base {\r\n  constructor(options) {\r\n    super()\r\n\r\n    this.attrs = Chapters.DEFAULTS\r\n    this.$el = null\r\n    this.$title = null\r\n    this.$main = null\r\n    this.$list = null\r\n    this.$placeholder = null\r\n    this.$parentElement = null\r\n    this.$scrollElement = null\r\n    this.chapters = []\r\n    this.closed = false\r\n    this.active = 0\r\n    this.offsetTop = 0\r\n    this.$active = null\r\n    this.timer = null\r\n    this.playing = false\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n  }\r\n\r\n  initialize(options) {\r\n    let created\r\n    let parentElement\r\n    let scrollElement\r\n    let $parent\r\n\r\n    this.attr(options)\r\n    created = this.attr('created')\r\n    parentElement = this.attr('parentElement')\r\n    scrollElement = this.attr('scrollElement')\r\n\r\n    if (isString(parentElement)) {\r\n      $parent = document.querySelector(parentElement)\r\n    } else if (isElement(parentElement)) {\r\n      $parent = parentElement\r\n    }\r\n    this.$parentElement = $parent\r\n    this.$scrollElement = _getScrollElement(scrollElement)\r\n\r\n    this.chapters = this.attr('chapters')\r\n    this.closed = this.attr('closed')\r\n    this.active = this.attr('active')\r\n\r\n    if (isFunction(created)) {\r\n      created.call(this)\r\n    }\r\n\r\n    if (this.chapters.length < 1) {\r\n      return this\r\n    }\r\n\r\n    this.render().addListeners()\r\n\r\n    this.$active = document.querySelector(`#chapter-${this.active}`)\r\n\r\n    return this\r\n  }\r\n\r\n  isClosed() {\r\n    return this.closed\r\n  }\r\n\r\n  isSticky() {\r\n    const position = this.attr('position')\r\n    return position === 'sticky'\r\n  }\r\n\r\n  isFixed() {\r\n    const position = this.attr('position')\r\n    return position === 'fixed'\r\n  }\r\n\r\n  isInside() {\r\n    return this.isFixed() || this.isSticky()\r\n  }\r\n\r\n  isOutside() {\r\n    return !this.isInside()\r\n  }\r\n\r\n  render() {\r\n    const mounted = this.attr('mounted')\r\n    const title = this.attr('title')\r\n    const showCode = this.attr('showCode')\r\n    const customClass = this.attr('customClass')\r\n    const $parentElement = this.$parentElement\r\n    const contents = []\r\n    let $title = null\r\n    let $el\r\n    let $main\r\n    let $list\r\n    let $placeholder\r\n\r\n    if (!$parentElement) {\r\n      return this\r\n    }\r\n\r\n    if (this.isInside()) {\r\n      $title = createElement(\r\n        'h2',\r\n        {\r\n          className: 'outline-chapters__title'\r\n        },\r\n        [title]\r\n      )\r\n      this.$title = $title\r\n      contents.push($title)\r\n    }\r\n\r\n    $list = createElement(\r\n      'ul',\r\n      {\r\n        className: 'outline-chapters__list'\r\n      },\r\n      ['']\r\n    )\r\n    this.$list = $list\r\n\r\n    $placeholder = createElement(\r\n      'div',\r\n      {\r\n        className: 'outline-chapters__placeholder'\r\n      },\r\n      ['']\r\n    )\r\n    this.$placeholder = $placeholder\r\n\r\n    $main = createElement(\r\n      'div',\r\n      {\r\n        className: 'outline-chapters__main'\r\n      },\r\n      [$list, $placeholder]\r\n    )\r\n    this.$main = $main\r\n    contents.push($main)\r\n\r\n    $el = createElement(\r\n      'nav',\r\n      {\r\n        id: 'outline-chapters',\r\n        className: 'outline-chapters'\r\n      },\r\n      contents\r\n    )\r\n    this.$el = $el\r\n\r\n    if (this.isSticky()) {\r\n      addClass($el, 'outline-chapters_sticky')\r\n    }\r\n\r\n    if (customClass) {\r\n      addClass($el, customClass)\r\n    }\r\n\r\n    $parentElement.appendChild($el)\r\n    _paintChapters($list, this.chapters, showCode)\r\n\r\n    this.offsetTop = offsetTop(document.querySelector('#outline-chapters'))\r\n\r\n    if (isFunction(mounted)) {\r\n      mounted.call(this)\r\n    }\r\n\r\n    this.onObserver()\r\n\r\n    return this\r\n  }\r\n\r\n  highlight(id) {\r\n    const $anchor = this.$el.querySelector(`#outline-anchor-${id}`)\r\n    const HIGHLIGHT = 'outline-chapters_active'\r\n    const $placeholder = this.$placeholder\r\n    let top\r\n\r\n    if (this.$active) {\r\n      removeClass(this.$active, HIGHLIGHT)\r\n    }\r\n\r\n    this.active = parseInt($anchor.getAttribute('data-id'), 10)\r\n    this.$active = $anchor\r\n    addClass(this.$active, HIGHLIGHT)\r\n\r\n    top = 30 * this.active\r\n    $placeholder.style.top = `calc(0.5em + ${top}px)`\r\n\r\n    return this\r\n  }\r\n\r\n  sticky() {\r\n    const FIXED = 'outline-chapters_fixed'\r\n    const $el = this.$el\r\n    const top = this.offsetTop\r\n    const scrollTop = this.$scrollElement.scrollTop\r\n\r\n    if (this.isClosed()) {\r\n      return this\r\n    }\r\n\r\n    if (scrollTop >= top) {\r\n      addClass($el, FIXED)\r\n    } else {\r\n      removeClass($el, FIXED)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  scrollTo(top, after) {\r\n    const el = this.$scrollElement\r\n\r\n    scrollTo(el, top, after, 100)\r\n\r\n    return this\r\n  }\r\n\r\n  show() {\r\n    const HIDDEN = 'outline-chapters_hidden'\r\n    const opened = this.attr('afterOpened')\r\n\r\n    removeClass(this.$el, HIDDEN)\r\n    if (this.isInside()) {\r\n      removeClass(this.$parentElement, HIDDEN)\r\n    }\r\n    this.closed = false\r\n\r\n    if (isFunction(opened)) {\r\n      opened.call(this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  hide() {\r\n    const HIDDEN = 'outline-chapters_hidden'\r\n    const closed = this.attr('afterClosed')\r\n\r\n    addClass(this.$el, HIDDEN)\r\n    if (this.isInside()) {\r\n      addClass(this.$parentElement, HIDDEN)\r\n    }\r\n    this.closed = true\r\n\r\n    if (isFunction(closed)) {\r\n      closed.call(this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  toggle() {\r\n    if (this.closed) {\r\n      this.show()\r\n    } else {\r\n      this.hide()\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  destroy() {\r\n    const beforeDestroy = this.attr('beforeDestroy')\r\n    const afterDestroy = this.attr('afterDestroy')\r\n\r\n    if (isFunction(beforeDestroy)) {\r\n      beforeDestroy.call(this)\r\n    }\r\n\r\n    this.removeListeners()\r\n    this.$parentElement.removeChild(this.$el)\r\n\r\n    this.attr(Chapters.DEFAULTS)\r\n    this.$el = null\r\n    this.$title = null\r\n    this.$main = null\r\n    this.$list = null\r\n    this.$placeholder = null\r\n    this.$parentElement = null\r\n    this.$scrollElement = null\r\n    this.chapters = []\r\n    this.active = 0\r\n    this.offsetTop = 0\r\n    this.$active = null\r\n    this.closed = false\r\n\r\n    if (this.timer) {\r\n      clearTimeout(this.timer)\r\n      this.timer = null\r\n    }\r\n\r\n    if (isFunction(afterDestroy)) {\r\n      afterDestroy.call(this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  onObserver() {\r\n    let timer = null\r\n\r\n    intersection(\r\n      ($heading) => {\r\n        const id = $heading.getAttribute('data-id')\r\n\r\n        if (this.playing) {\r\n          return false\r\n        }\r\n\r\n        if (timer) {\r\n          clearTimeout(timer)\r\n        }\r\n\r\n        timer = later(() => {\r\n          this.highlight(id)\r\n        }, 100)\r\n      },\r\n      { context: this }\r\n    )\r\n\r\n    return this\r\n  }\r\n\r\n  onSelect(evt) {\r\n    const $anchor = evt.delegateTarget\r\n    const id = $anchor.getAttribute('data-id')\r\n    const headingId = $anchor.href.split('#')[1]\r\n    const $heading = document.querySelector(`#${headingId}`)\r\n    const top = $heading.offsetTop\r\n    const min = 0\r\n    const max = this.$scrollElement.scrollHeight\r\n    const afterScroll = this.attr('afterScroll')\r\n    const after = () => {\r\n      if (isFunction(afterScroll)) {\r\n        afterScroll.call(this)\r\n      }\r\n\r\n      later(() => {\r\n        this.playing = false\r\n        publish('update:toolbar', {\r\n          top,\r\n          min,\r\n          max\r\n        })\r\n      })\r\n    }\r\n\r\n    this.playing = true\r\n    if (this.isFixed()) {\r\n      this.sticky()\r\n      later(() => {\r\n        this.scrollTo(top, after)\r\n        this.highlight(id)\r\n      }, 10)\r\n    } else {\r\n      this.scrollTo(top, after)\r\n      this.highlight(id)\r\n    }\r\n\r\n    stop(evt)\r\n\r\n    return this\r\n  }\r\n\r\n  onScroll() {\r\n    const $scrollElement = this.$scrollElement\r\n\r\n    if (this.timer) {\r\n      clearTimeout(this.timer)\r\n    }\r\n\r\n    this.timer = later(() => {\r\n      const top = $scrollElement.scrollTop\r\n      const min = 0\r\n      const max = $scrollElement.scrollHeight - $scrollElement.clientHeight\r\n\r\n      if (this.isFixed()) {\r\n        this.sticky()\r\n      }\r\n\r\n      publish('update:toolbar', {\r\n        top,\r\n        min,\r\n        max\r\n      })\r\n    }, 50)\r\n\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    const $el = this.$el\r\n    const $scrollElement = this.$scrollElement\r\n    const tagName = $scrollElement.tagName.toLowerCase()\r\n    let $element = $scrollElement\r\n\r\n    if (tagName === 'html' || tagName === 'body') {\r\n      $element = window\r\n    }\r\n\r\n    on($el, '.outline-chapters__anchor', 'click', this.onSelect, this, true)\r\n    emit($element, 'scroll', this.onScroll, this, true)\r\n\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    const $el = this.$el\r\n    const $scrollElement = this.$scrollElement\r\n    const tagName = $scrollElement.tagName.toLowerCase()\r\n    let $element = $scrollElement\r\n\r\n    if (tagName === 'html' || tagName === 'body') {\r\n      $element = window\r\n    }\r\n\r\n    off($el, 'click', this.onSelect)\r\n    off($element, 'scroll', this.onScroll)\r\n\r\n    return this\r\n  }\r\n}\r\n\r\nChapters.DEFAULTS = {\r\n  parentElement: '',\r\n  scrollElement: '',\r\n  selector: '',\r\n  active: 0,\r\n  closed: false,\r\n  showCode: true,\r\n  position: 'relative',\r\n  chapters: [],\r\n  created: null,\r\n  mounted: null,\r\n  afterClosed: null,\r\n  afterOpened: null,\r\n  afterScroll: null,\r\n  beforeDestroy: null,\r\n  afterDestroy: null\r\n}\r\n\r\nexport default Chapters\r\n","import createElement from './utils/dom/createElement'\r\n\r\nconst _paintChapters = (list, chapters, showCode = false) => {\r\n  chapters.forEach((chapter) => {\r\n    const pid = chapter.pid\r\n    const text = createElement(\r\n      'span',\r\n      {\r\n        className: 'outline-chapters__text'\r\n      },\r\n      [chapter.text]\r\n    )\r\n    const link = createElement(\r\n      'a',\r\n      {\r\n        id: `outline-anchor-${chapter.id}`,\r\n        className: 'outline-chapters__anchor',\r\n        href: '#' + chapter.rel,\r\n        rel: chapter.rel,\r\n        'data-id': chapter.id\r\n      },\r\n      [text]\r\n    )\r\n    let parent\r\n    let ul\r\n    let li\r\n    let code\r\n    let children = []\r\n\r\n    if (showCode) {\r\n      code = createElement(\r\n        'span',\r\n        {\r\n          className: 'outline-chapters__code',\r\n          'data-id': chapter.id\r\n        },\r\n        [chapter.code]\r\n      )\r\n\r\n      link.insertBefore(code, link.firstChild)\r\n    }\r\n\r\n    children.push(link)\r\n\r\n    li = createElement(\r\n      'li',\r\n      {\r\n        id: `outline-chapter-${chapter.id}`,\r\n        className: 'outline-chapters__item',\r\n        'data-id': chapter.id\r\n      },\r\n      children\r\n    )\r\n\r\n    if (pid === -1) {\r\n      list.appendChild(li)\r\n    } else {\r\n      parent = document.getElementById('outline-chapter-' + pid)\r\n      ul = document.getElementById('outline-subject-' + pid)\r\n\r\n      if (!ul) {\r\n        ul = createElement(\r\n          'ul',\r\n          {\r\n            id: 'outline-subject-' + pid,\r\n            className: 'outline-chapters__subject'\r\n          },\r\n          [li]\r\n        )\r\n\r\n        parent.appendChild(ul)\r\n      } else {\r\n        ul.appendChild(li)\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport default _paintChapters\r\n","/**\r\n * 检测数据是否为 Number 类型\r\n * ========================================================================\r\n * @method isNumber\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isNumber = (o) => {\r\n  return typeof o === 'number'\r\n}\r\n\r\nexport default isNumber\r\n","import isFunction from '../types/isFunction'\r\n\r\n/**\r\n * 通用的 IntersectionObserver 观察者处理器\r\n * ========================================================================\r\n * @method intersection\r\n * @param {Function} fn\r\n * @param {Object} [props]\r\n * @param {Object|HTMLElement} [props.root]\r\n * @param {String} [props.selector]\r\n * @param {Object} [props.context]\r\n * @param {String} [props.attr]\r\n * @param {String} [props.rootMargin]\r\n */\r\nconst intersection = (fn, props) => {\r\n  const root = props.root || null\r\n  const selector = props.selector || '.outline-heading'\r\n  const context = props.context || null\r\n  const rootMargin = props.rootMargin || '0px 0px -90% 0px'\r\n  const options = {\r\n    rootMargin: rootMargin\r\n  }\r\n  const Observer = new IntersectionObserver((entries) => {\r\n    entries.forEach((entry) => {\r\n      if (entry.intersectionRatio > 0) {\r\n        if (isFunction(fn)) {\r\n          fn.call(context || entry.target, entry.target)\r\n        }\r\n      }\r\n    })\r\n  }, options)\r\n\r\n  if (root) {\r\n    options.root = root\r\n  }\r\n\r\n  document.querySelectorAll(selector).forEach((section) => {\r\n    Observer.observe(section)\r\n  })\r\n}\r\n\r\nexport default intersection\r\n","/**\r\n * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n * ========================================================================\r\n * @method stop\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 工作台输出：'a'\r\n *   // 不会触发事件冒泡，输出：'你点击了导航栏'\r\n *   // 也不会切换到 href 属性的页面，阻止了点击链接的默认行为\r\n *   stopEvent(evt)\r\n * })\r\n */\r\nconst stop = function (evt) {\r\n  evt.stopPropagation()\r\n  evt.preventDefault()\r\n}\r\n\r\nexport default stop\r\n","import isFunction from '../types/isFunction'\r\nimport off from './off'\r\n\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定代理事件\r\n * ========================================================================\r\n * @method emit\r\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n * @param {Function|Object} fn - （必须） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst emit = (el, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n  const listener = function (evt) {\r\n    let overrideContext = context || el\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    // 仅触发一次\r\n    /* istanbul ignore else */\r\n    if (once === true) {\r\n      off(el, type, listener)\r\n    }\r\n\r\n    fn.call(overrideContext, evt, data)\r\n  }\r\n\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default emit\r\n"],"names":["isString","str","hasOwn","obj","prop","hasOwnProperty","Object","prototype","call","toString","Base","constructor","options","this","attrs","initialize","attr","render","addListeners","value","o","apply","origin","source","keys","forEach","arguments","length","destroy","removeListeners","reload","isFunction","val","isElement","nodeName","tagName","nodeType","later","fn","delay","setTimeout","CAPTURE_EVENTS","_off","el","type","capture","indexOf","_delegateListener","listeners","_listeners","index","listener","i","handler","splice","_delete","removeEventListener","purgeElement","recurse","$element","document","querySelector","$children","childNodes","filter","getListeners","$child","off","matches","selector","sel","replace","msMatchesSelector","getParentOrHost","host","parentNode","on","data","context","once","evt","target","getTarget","delegateTarget","ctx","includeCTX","closest","overrideContext","push","addEventListener","createElement","attributes","children","$fragment","createDocumentFragment","$el","append","child","fragment","createTextNode","appendChild","toLowerCase","style","cssText","setAttribute","className","Array","isArray","easeInQuad","x","_getScrollElement","scrollElement","$rootElements","$scrollElement","querySelectorAll","scrollTop","timer","hasClass","allClass","match","RegExp","addClass","removeClass","offsetTop","top","offsetParent","_subscribers","_hasDirectSubscribersFor","topic","has","isDirect","found","position","lastIndexOf","substring","_hasSubscribers","emit","async","execute","subscriber","message","callback","deliver","Chapters","super","DEFAULTS","$title","$main","$list","$placeholder","$parentElement","chapters","closed","active","$active","playing","created","parentElement","$parent","isClosed","isSticky","isFixed","isInside","isOutside","mounted","title","showCode","customClass","contents","id","list","chapter","pid","text","link","href","rel","parent","ul","li","code","insertBefore","firstChild","getElementById","_paintChapters","onObserver","highlight","$anchor","HIGHLIGHT","parseInt","getAttribute","sticky","FIXED","scrollTo","after","afterStop","speed","step","distance","MAX_HEIGHT","scrollHeight","MAX_TOP","stop","clearTimeout","play","show","HIDDEN","opened","hide","toggle","beforeDestroy","afterDestroy","removeChild","props","root","rootMargin","Observer","IntersectionObserver","entries","entry","intersectionRatio","section","observe","intersection","$heading","onSelect","headingId","split","max","afterScroll","publish","min","stopPropagation","preventDefault","onScroll","clientHeight","window","afterClosed","afterOpened"],"mappings":"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"}